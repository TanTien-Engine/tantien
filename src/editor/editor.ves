import "scene.scene" for Scene
import "scene.scene_stack" for SceneStack
import "graphics.camera2d" for Camera2D as tt_Camera2D
import "gui" for GUI, Context, MOUSE_LEFT, MOUSE_RIGHT, MOUSE_DOWN, MOUSE_UP, MOUSE_MOVE, MOUSE_DRAG
import "blueprint.edit_op" for EditOP as BlueprintEditOP
import "blueprint.node_op" for NodeOP
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_ANY
import "blueprint.execute_list" for ExecuteList
import "maths.vector" for Vector2
import "graphics" for Graphics, Textbox
import "scene.node" for Node as SceneNode
import "scene.components.boundingbox2" for BoundingBox2
import "scene.components.transform2" for Transform2
import "io" for IO
import "filesystem" for Filesystem
import "editor.operators.node2d_translate" for Node2dTranslate
import "editor.node_cache" for NODE_CACHE
import "system" for System as tt_System
import "maths" for Matrix44
import "image" for ImageData
import "render" for Render, Framebuffer, RenderBuffer
import "blueprint.nodes.commentary" for Commentary
import "blueprint.nodes.subgraph" for Subgraph
import "blueprint.nodes.viewport" for Viewport
import "blueprint.pin" for Pin as BP_Pin
import "blueprint.node" for Node as BP_Node
import "network.vertex" for Vertex as NW_Vertex
import "network.pin" for Pin as NW_Pin
import "network.network" for Network
import "network.vertex_shape" for VertexShape
import "tree.pin" for Pin as TR_Pin
import "tree.node" for Node as TR_Node
import "tree.tree" for Tree
import "math" for Math
import "rendergraph.nodes.texture" for Texture
import "rendergraph.nodes.shader_code" for ShaderCode
import "rendergraph.drawlist" for Drawlist
import "rendergraph.rendergraph" for Rendergraph
import "editorgraph.trigger_list" for TriggerList
import "blueprint.blackboard" for BLACKBOARD
import "blueprint.commentary_helper" for CommentaryHelper
import "editorgraph.event_types" for EVENT_MOUSE_LEFT_DOWN, EVENT_MOUSE_LEFT_UP, EVENT_MOUSE_RIGHT_DOWN, EVENT_MOUSE_RIGHT_UP, EVENT_MOUSE_LEFT_DRAG, EVENT_MOUSE_MOVE, EVENT_KEY_PRESSED, EVENT_KEY_RELEASED, EVENT_GLOBAL_TICKER, EVENT_TICKER, EVENT_BLUEPRINT_CHANGED, EVENT_LEAVE_RUNTIME_MODE, EVENT_ENTER_RUNTIME_MODE, EVENT_INIT

class Editor
{ 
	load()
	{
		this.scene_stack = SceneStack()

		this.camera = tt_Camera2D()

		BLACKBOARD.editor_cam = this.camera
		BLACKBOARD.scene = this.scene_stack.top()

		this.nodes_op = BlueprintEditOP(this.camera, this.scene_stack, this.popup_cb)
		this.preview_op = NodeOP(this.scene_stack)
		this.editop = this.nodes_op

		this.popup_pos = nil
		this.prev_pin = nil

		this.gui_top = Context.init()
		this.gui_nodes = Context.init()

		this.right_press_pos = nil

//		this.filepath = "samples/vmgraph/if.ves"
		this.filepath = "../yingzao/10_dougong/zztest.ves"
//		this.filepath = "../yingzao/20_foguangsi/shan_mian.ves"

//		this.filepath = "samples/geograph/nodes/knife.ves"

//d:\projects\tt_sim\fluid\assets\scripts\fluideditor.ves
//d:\projects\tt_sim\pathtracer\assets\scripts\pteditor.ves

//		this.filepath = "../cax/test/partgraph/samples/bottle.ves"
//		this.filepath = "../cax/test/partgraph/nodes/fillet.ves"
//		this.filepath = "../cax/test/breptopo/nodes/graph.ves"

//		this.filepath = "samples/geograph/nodes/poly_expand.ves"
//		this.filepath = "samples/geograph/nodes/knife.ves"

//		this.filepath = "D:/OneDrive/work/hqr/freecad_feature.ves"
//		this.filepath = "../tt/analysis/test/loggraph/nodes/log.ves"

//		this.filepath = "../document/test/buglist/nodes/label.ves"

//		this.filepath = "../tt/analysis/test/codegraph/nodes/flowgraph.ves"
//		this.filepath = "../testbed/test/brepvm/fork_join.ves"
//		this.filepath = "../testbed/test/brepdb/insert.ves"
//		this.filepath = "../testbed/test/brepfw/compiler.ves"
//		this.filepath = "D:/projects/zwcax/final/hqr/hqr.ves"
//		this.filepath = "D:/zz/29_hqr/roadmap.ves"

//		this.filepath = "D:/zz/29_stable/ret/roadmap.ves"

//		this.filepath = ""
//		this.filepath = "assets/blueprints/pbrgraph/clearcoat.ves"
//		this.filepath = "../littleworld/test/terraingraph/nodes/brush.ves"
//		this.filepath = "../littleworld/test/archgraph/nodes/translate_scope.ves"
//		this.filepath = "../littleworld/test/archgraph/pompeii/atrium.ves"

//		this.filepath = "../cax/test/sketchgraph/nodes/point_on_arc.ves"
//		this.filepath = "../cax/test/sketchgraph/test/multi_lines.ves"
//		this.filepath = "../cax/test/sketchgraph/shapes/line_h.ves"

//		this.filepath = "../cax/test/sketchnetwork/ad24/01/bottom.ves"
//		this.filepath = "../testbed/test/rollbackgraph/test.ves"
//		this.filepath = "../cax/test/solidgraph/geos/column.ves"
//		this.filepath = "../yuanye/samples/handrail/048_cmm.ves"
//		this.filepath = "../yuanye/test/lattice/nodes/canvas.ves"
//		this.filepath = "../cax/test/solidgraph/test.ves"
//		this.filepath = "../littleworld/sample/archgraph/pompeii/wall_tex.ves"		
//		this.filepath = "../littleworld/test/globegraph/globe_ocean.ves"
//		this.filepath = "../littleworld/assets/blueprints/ocean/draw_ocean2.ves"
//		this.filepath = "../tt_sim/pathtracer/test/handrail2.ves"
//		this.filepath = "../tt_sim/pathtracer/assets/blueprints/render/path_tracing.ves"

		this.editor_mode = false
		this.node_editor_mode = false

		this.popup_nodes = []
		this.popup_name2node = {}
		this.popup_subgraphs = []

		this.script_stack = []

		// copy and paste
		this.clipboard = ""
		this.cam_pos_on_copy = nil

		NODE_CACHE.set_editor(this)

		var tb = Textbox()
		tb.width = 500
		tb.height = 50
		tb.font_size = 48
		tb.font_color = [196, 64, 64, 255]
		tb.align_hori = 2
		tb.align_vert = 1
		this.TB_TITLE = tb

		this.drawlist = nil
		this.exe_list = nil
		this.trigger_list = nil

		Rendergraph.regist()
	}

	clear_popup_nodes()
	{
		this.popup_nodes.clear()
		this.popup_name2node.clear()
		this.propup_subgraphs.clear()
	}

	update()
	{
		var scene = this.scene_stack.top()
		scene.update()

		// update aabb
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node.aabb_dirty) {
				node.components["bounding"].set_size(bp_node.get_size())
				bp_node.aabb_dirty = false
			}
		}	

		GUI.update(this.gui_top)
		GUI.update(this.gui_nodes)

		if (this.trigger_list) {
			this.trigger_list.run(EVENT_GLOBAL_TICKER)
		}
		if (this.editor_mode and !this.node_editor_mode) {
			this.trigger_list.run(EVENT_TICKER)
		}
	}

	draw()
	{
		this.draw_preview()

		if (!this.editor_mode) 
		{
			this.draw_scene()
		} 
		else 
		{			
			var node = this.preview_op.get_selected()
			if (node) 
			{
				if (node is Commentary) {
					this.draw_scene()
				}

				// draw op title			
				var x = -Graphics.get_width() * 0.5 + 200
				var y = Graphics.get_height() * 0.5 - 50
				Graphics.draw_text(node.get_class().name, x, y, 1.0, this.TB_TITLE)
			}
		}

		this.editop.draw()

		Graphics.flush()

		this.draw_gui()

		//Graphics.dtex_debug_draw()
	}

	sizechanged(w, h)
	{
		if (w == 0 or h == 0) {
			return
		}

		Graphics.on_size(w, h)
		GUI.on_size(w, h)
		this.camera.on_size(w, h)

		var scene = this.scene_stack.top()
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node is Viewport) {
				this.scene_stack.bp_dirty = true
			}
		}
	}

	keypressed(key)
	{
		this.editop.on_key_pressed(key)		

		if (key == "delete") 
		{
			this.scene_stack.bp_dirty = true
			GUI.rebuild(this.gui_nodes)
		} 
		else if (key == "space") 
		{
			this.editor_mode = !this.editor_mode
			if (this.editor_mode) 
			{
				this.trigger_list.run(EVENT_ENTER_RUNTIME_MODE)

				this.editop = this.preview_op

				var node = this.preview_op.get_selected()
				if (node) {
					this.node_editor_mode = node.bind_editor()
				}
			} 
			else 
			{
				this.trigger_list.run(EVENT_LEAVE_RUNTIME_MODE)
			
				this.editop = this.nodes_op
				this.node_editor_mode = false
			}
		}

		this.trigger_list.run(EVENT_KEY_PRESSED + "_" + key)
	}

	keyreleased(key)
	{
		this.editop.on_key_released(key)

		this.trigger_list.run(EVENT_KEY_RELEASED + "_" + key)
	}

	mousemoved(x, y, btn)
	{
		GUI.mouse_input(this.gui_top, btn, MOUSE_MOVE, x, y, 0, 0, 1)
		GUI.mouse_input(this.gui_nodes, btn, MOUSE_MOVE, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (!this.is_gui_active()) {
			this.editop.on_mouse_moved(x, y, btn)
		}

		if (this.editor_mode and !this.node_editor_mode) {
			BLACKBOARD.mouse_pos.set(x, y)
			this.trigger_list.run(EVENT_MOUSE_MOVE)
		}
	}

	mousedragged(x, y, btn)
	{
		GUI.mouse_input(this.gui_top, btn, MOUSE_DRAG, x, y, 0, 0, 1)
		GUI.mouse_input(this.gui_nodes, btn, MOUSE_DRAG, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (!this.is_gui_active()) {
			this.editop.on_mouse_dragged(x, y, btn)
		}

		if (this.editor_mode and !this.node_editor_mode) {
			if (btn == MOUSE_LEFT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_LEFT_DRAG)
			}
		}
	}

	mousepressed(x, y, btn)
	{		
		GUI.mouse_input(this.gui_top, btn, MOUSE_DOWN, x, y, 0, 0, 1)
		GUI.mouse_input(this.gui_nodes, btn, MOUSE_DOWN, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (btn == MOUSE_RIGHT) {
			this.right_press_pos = Vector2(x, y)
		}

		if (!this.is_gui_active()) {
			this.editop.on_mouse_pressed(x, y, btn)
		}

		if (this.editor_mode and !this.node_editor_mode)
		{
			if (btn == MOUSE_LEFT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_LEFT_DOWN)
			} else if (btn == MOUSE_RIGHT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_RIGHT_DOWN)
			}
		}
	}

	mousereleased(x, y, btn)
	{
		GUI.mouse_input(this.gui_top, btn, MOUSE_UP, x, y, 0, 0, 1)
		GUI.mouse_input(this.gui_nodes, btn, MOUSE_UP, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (btn == MOUSE_RIGHT and this.right_press_pos.x == x and this.right_press_pos.y == y) {
			this.right_press_pos = nil
			if (!this.editor_mode) {
				this.popup_pos = Vector2(x, y)			
			}
		} else if (btn == MOUSE_LEFT) {
			this.popup_pos = nil
			this.prev_pin = nil
		}

		if (!this.is_gui_active()) {
			this.editop.on_mouse_released(x, y, btn)
		}

		if (this.editor_mode and !this.node_editor_mode)
		{
			if (btn == MOUSE_LEFT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_LEFT_UP)
			} else if (btn == MOUSE_RIGHT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_RIGHT_UP)
			}
		}
	}

	mouseclicked(x, y, btn)
	{
		this.editop.on_mouse_clicked(x, y, btn)

		this.enter_subgraph()
	}

	mousescrolled(x, y, dx, dy)
	{
		this.editop.on_mouse_scrolled(x, y, dx, dy)
	}

	draw_scene()
	{
		var hw = this.camera.size.x * this.camera.scale * 0.5
		var hh = this.camera.size.y * this.camera.scale * 0.5
		var region = [ this.camera.pos.x - hw, this.camera.pos.y - hh, this.camera.pos.x + hw, this.camera.pos.y + hh ]

		var cam_mt = Matrix44.init()
		var s = 1.0 / this.camera.scale
		cam_mt.translate(-this.camera.pos.x, -this.camera.pos.y, 0)
		cam_mt.scale(s, s, 1)

		var scene = this.scene_stack.top()
		for (var node in scene.nodes) {
			this.draw_node(node, cam_mt, region)
		}

		// fixme
		Graphics.flush()

		var dirty = false
		if (this.camera.scale < 2) 
		{
			GUI.begin(this.gui_nodes)
			for (var node in scene.nodes) {
				if (this.draw_node_gui(node, region)) {
					dirty = true
				}
			}
			GUI.end(this.gui_nodes)
		}

		if (dirty) {
			this.editop.clear()
		}
	}

	draw_node(node, cam_mt, region)
	{
		var bp_node = node.components["bp"]

		var pos = bp_node.pos

		if (pos.x < region[0] or pos.x > region[2] or pos.y < region[1] or pos.y > region[3]) {
			return
		}

		node.draw(cam_mt)
	}

	draw_node_gui(node, region)
	{
		var bp_node = node.components["bp"]

		var pos = bp_node.pos

		if (pos.x < region[0] or pos.x > region[2] or pos.y < region[1] or pos.y > region[3]) {
			return false
		}

		if (bp_node.draw_gui(this.gui_nodes)) 
		{

			bp_node.on_param_dirty()

//			// todo: only use pin_dirty ?
//			Blueprint.send_node_dirty_root(bp_node)
//			for (var p in bp_node.exports) {
//				Blueprint.send_pin_dirty_root(p)
//			}

//			this.scene_stack.bp_dirty = true

			return true
		}

		return false
	}

	setup_popup_nodes()
	{
		var subgraph = this.scene_stack.top().ud
		if (subgraph) {
			subgraph.setup_popup_nodes(this)
		} else {
			this.prepare_nodes()
		}
	}

	draw_scenes_nav_bar()
	{
		if (this.scene_stack.count() <= 1) {
			return
		}

		var x = - Graphics.get_width() * 0.5 + 20
		var y = Graphics.get_height() * 0.5 - 30
		for (var i in 0..this.scene_stack.scenes.count - 1) 
		{
			var scene = this.scene_stack.scenes[i]
			if (GUI.button(this.gui_top, scene.name, x, y, 0, 0)) 
			{
				while (this.scene_stack.scenes.count > i + 1) 
				{
					var old = this.scene_stack.top()
					old.on_leave_out()

					this.scene_stack.pop()

					var new = this.scene_stack.top()					
					this.filepath = new.filepath
					new.on_enter_in()
				}

				this.setup_popup_nodes()

				return
			}
			x = x + 100
		}
	}

	draw_gui()
	{
		Graphics.on_cam_update(0, 0, 1)

		GUI.begin(this.gui_top)

		if (this.popup_pos)
		{
			var pos = GUI.trans_scr_pos_to_proj(this.popup_pos.x, this.popup_pos.y, 0, 0, 1)
			var new_node = this.draw_popup(pos[0], pos[1] - 25, this.prev_pin)
			if (new_node)
			{
				var pos = GUI.trans_scr_pos_to_proj(this.popup_pos.x, this.popup_pos.y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)
				this.add_node(new_node, pos[0], pos[1])
				if (this.prev_pin)
				{
					if (new_node is NW_Vertex)
					{
						var idx = VertexShape.get_match_pin_idx(this.prev_pin, new_node)
						if (idx) 
						{
							var new_pin = NW_Pin(new_node, idx)
							Network.connect(this.prev_pin, new_pin)
							this.scene_stack.bp_dirty = true
						}
					}
					else if (new_node is TR_Node)
					{
						if (this.prev_pin.is_child) 
						{
							var idx = this.query_matched_pin_idx(this.prev_pin, [ new_node.parent ])
							if (idx) {
								Tree.connect(this.prev_pin, new_node.parent)
								this.scene_stack.bp_dirty = true
							}
						}
						else
						{
							var idx = this.query_matched_pin_idx(this.prev_pin, new_node.children)
							if (idx) {
								Tree.connect(new_node.children[idx], this.prev_pin)
								this.scene_stack.bp_dirty = true
							}
						}
					}
					else
					{
						if (this.prev_pin.is_input) 
						{
							if (!new_node.exports.isEmpty) 
							{
								var idx = this.query_matched_pin_idx(this.prev_pin, new_node.exports)
								if (idx) {
									Blueprint.connect(new_node.exports[idx], this.prev_pin)
									this.scene_stack.bp_dirty = true
								}
							}
						} 
						else 
						{
							if (!new_node.imports.isEmpty) 
							{
								var idx = this.query_matched_pin_idx(this.prev_pin, new_node.imports)
								if (idx) {
									Blueprint.connect(this.prev_pin, new_node.imports[idx])
									this.scene_stack.bp_dirty = true
								}
							}
						}
					}
				}
				this.popup_pos = nil
				this.prev_pin = nil
			}
		}

		this.draw_scenes_nav_bar()

		// fixme:
		GUI.button(this.gui_top, ".", 9999, 9999, 0, 0)

		GUI.end(this.gui_top)

		Graphics.on_cam_update(this.camera.pos.x, this.camera.pos.y, this.camera.scale)
	}

	query_matched_pin_idx(pin, pins)
	{
		for (var i in 0..pins.count) {
			if (this.is_pin_pin_type_match(pin, pins[i])) {
				return i
			}
		}
		return nil
	}

	is_pin_pin_type_match(a, b)
	{
		var types = []
		if (a.type is List) {
			for (var type in a.type) {
				types.add(type)
			}
		} else {
			types.add(a.type)
		}
		if (types.contains(VAR_TYPE_ANY)) {
			return true
		}

		if (b.type == VAR_TYPE_ANY) {
			return true
		}
		if (b.type is List) {
			for (var type in b.type) {
				if (types.contains(type)) {
					return true
				}				
			}
		} else {
			if (types.contains(b.type)) {
				return true
			}
		}

		return false
	}

	is_pin_node_type_match(pin, node)
	{
		if (node is NW_Vertex and pin is NW_Pin)
		{
			var expects = pin.vert.pin_types_t[pin.type]
			for (var l in expects) {
				for (var r in node.pin_types_f) {
					if (l == r) {
						return true
					}
				}
			}

			return false
		}

		var types = []
		if (pin.type is List) {
			for (var type in pin.type) {
				types.add(type)
			}
		} else {
			types.add(pin.type)
		}
		if (types.contains(VAR_TYPE_ANY)) {
			return true
		}

		var pins = []
		if (pin is BP_Pin and node is BP_Node)
		{
			if (pin.is_input) {
				pins = node.exports
			} else {
				pins = node.imports
			}
		}
		else if (pin is TR_Pin and node is TR_Node)
		{
			if (pin.is_child) {
				pins = [ node.parent ]
			} else {
				pins = node.children
			}
		}
		for (var p in pins) 
		{
			if (p.type == VAR_TYPE_ANY) {
				return true
			}
			if (p.type is List) {
				for (var type in p.type) {
					if (types.contains(type)) {
						return true
					}				
				}
			} else {
				if (types.contains(p.type)) {
					return true
				}
			}
		}

		return false
	}	

	draw_popup(x, y, prev_pin)
	{
		var num = 0
		if (prev_pin)
		{
			for (var node in this.popup_nodes) {
				if (this.is_pin_node_type_match(prev_pin, this.popup_name2node[node.get_class().name])) {
					num = num + 1
				}
			}
			for (var node in this.popup_subgraphs) {
				if (this.is_pin_node_type_match(prev_pin, node)) {
					num = num + 1
				}
			}
		}
		else
		{
			num = this.popup_nodes.count + this.popup_subgraphs.count
		}

		var ITEM_WIDTH = 120
		var ITEM_HEIGHT = 25
		var Y_MAX = 35

		var frame_w = Math.ceil(num / Y_MAX) * ITEM_WIDTH
		var frame_h = Math.min(num, Y_MAX) * ITEM_HEIGHT
		GUI.frame(this.gui_top, x, y - frame_h + ITEM_HEIGHT, frame_w, frame_h)

		var y_begin = y
		var y_num = 0
		for (var node in this.popup_nodes) 
		{
			var show = true
			if (prev_pin) {
				show = this.is_pin_node_type_match(prev_pin, this.popup_name2node[node.get_class().name])
			}
			if (show)
			{
				if (GUI.selectable(this.gui_top, node.get_class().name, false, x, y, ITEM_WIDTH)) {
					return node()
				}
				y = y - ITEM_HEIGHT

				y_num = y_num + 1
				if (y_num == Y_MAX)	{
					x = x + ITEM_WIDTH
					y = y_begin
					y_num = 0
				}
			}
		}
		for (var node in this.popup_subgraphs)
		{
			var show = true
			if (prev_pin) {
				show = this.is_pin_node_type_match(prev_pin, node)
			}
			if (show)
			{
				if (GUI.selectable(this.gui_top, node.title, false, x, y, ITEM_WIDTH)) {
					return this.subgraph_from_file(node.filepath)
				}
				y = y - ITEM_HEIGHT

				y_num = y_num + 1
				if (y_num == Y_MAX)	{
					x = x + ITEM_WIDTH
					y = y_begin
					y_num = 0
				}
			}
		}

		return nil
	}

	popup_cb(x, y, prev_pin)
	{
		this.popup_pos = Vector2(x, y)
		if (prev_pin) {
			this.prev_pin = prev_pin
		}
	}

	clear_popup_nodes()
	{
			
	}

	add_popup_node(node)
	{
		if (node is Subgraph)
		{
			this.popup_subgraphs.add(node)
		}
		else
		{
			this.popup_nodes.add(node)
			this.popup_name2node[node.get_class().name] = node()
		}
	}

	is_gui_active()
	{
		return this.popup_pos != nil
	}

	add_node(bp_node, x, y)
	{
		var node = SceneNode()

		node.components["bp"] = bp_node

		var pos = Vector2(x, y)

		var bb = BoundingBox2(bp_node.get_size())
		bb.transform(pos, 0, Vector2())
		node.components["bounding"] = bb
		bp_node.aabb_dirty = false

		var trans = Transform2()
		trans.set_position(pos)
		node.components["transform"] = trans

		this.scene_stack.top().add(node)

		bp_node.on_scene_add(this)

		return node
	}

	//new_node_from_file(filepath) { return nil }

	subgraph_from_file(filepath)
	{
		var old_dir = Filesystem.get_asset_base_dir()
		Filesystem.set_asset_base_dir(Filesystem.get_file_dir(filepath))

		var node = Subgraph()
		node.load_from_file(this, filepath)

		if (old_dir != "") {
			Filesystem.set_asset_base_dir(old_dir)
		}

		return node
	}

	add_node_from_file(filepath, x, y)
	{
		var node = nil

		if (filepath.contains(".ves"))
		{
			node = this.subgraph_from_file(filepath)
		}
		else if (filepath.contains(".png") or filepath.contains(".jpg") or filepath.contains(".tif") or filepath.contains(".hgt"))
		{
			node = Texture()
			var relative = Filesystem.get_relative_path(filepath)
			node.init_texture(relative)
		}
		else if (filepath.contains(".glsl") or filepath.contains(".hlsl"))
		{
			node = ShaderCode()
			var relative = Filesystem.get_relative_path(filepath)
			node.filepath = relative
		}
		else
		{
			//node = this.new_node_from_file(filepath)
		}

		if (node) {
			var pos = GUI.trans_scr_pos_to_proj(x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)
			this.add_node(node, pos[0], pos[1])
		}
	}
	
	load_file_imports()
	{
		return "
import \"blueprint.blueprint\" for Blueprint
"
	}

	loadfromstring(str)
	{
		Blueprint.enable_pass_pin_dirty(false)

		this.clear()

		var header = "
import \"editor\" for _editor
"
		header = header + this.load_file_imports()

		var source = header + str

		Basic.loadstring("temp", source)

		CommentaryHelper.rebuild(this.scene_stack.top())

		this.scene_stack.bp_dirty = true

		this.scene_stack.set_root_filepath(this.filepath)

		Blueprint.enable_pass_pin_dirty(true)
	}

	loadfromfile(filepath)
	{
		this.filepath = filepath
		return this.loadfromfile()
	}

	loadfromfile()
	{
		if (this.filepath == "") {
			return
		}

		Filesystem.set_asset_base_dir(Filesystem.get_file_dir(this.filepath))

		var file = IO.open(this.filepath, "r")
		this.loadfromstring(file.read())
		IO.close(file)
	}

	load_from_subgraph(subgraph)
	{
		this.filepath = subgraph.filepath
		
		for (var item in subgraph.all_items) {
			this.add_node(item[0], item[1], item[2])
		}

		CommentaryHelper.rebuild(this.scene_stack.top())

		this.scene_stack.bp_dirty = true
	}

	query_node_idx(node_set, bp_node)
	{
		for (var i in 0..node_set.count) {
			if (node_set[i].components["bp"] == bp_node) {
				return i
			}
		}
		return nil
	}

	savetofile()
	{
		class MemFile {
			init() { this.str = "" }
			write(str) { this.str = this.str + str }	
		}		

		var old_dir = Filesystem.get_asset_base_dir()
		Filesystem.set_asset_base_dir(Filesystem.get_file_dir(this.filepath))
		var file = IO.open(this.filepath, "w")

		if (!file.is_valid()) {
			file = MemFile()
		}

		var scene = this.scene_stack.top()

		// header
		if (file is MemFile) {
			var scene = this.scene_stack.top()
			file.write(scene.ud.import_files_header())
		} else {
			//file.write(this.load_file_imports())
		}

		// nodes
		var index = 0
		for (var node in scene.nodes) 
		{
			var bp = node.components["bp"]
			var trans = node.components["transform"]

			var name = "node%(index)"

			var scope = bp.get_class().module.replace(".", "::")
			file.write("var %(name) = ::%(scope)::%(bp.get_class().name)()\n")

			var node_str = bp.to_string(name)
			file.write("%(node_str)\n")

			file.write("_editor.add_node(node%(index), %(trans.position.x), %(trans.position.y))\n\n")

			index = index + 1
		}

		// connections
		var bp_nodes = []
		var nw_nodes = []
		var tr_nodes = []
		for (var f_node in scene.nodes) 
		{
			var bp = f_node.components["bp"]
			if (bp is BP_Node) {
				bp_nodes.add(bp)
			} else if (bp is NW_Vertex) {
				nw_nodes.add(bp)
			} else if (bp is TR_Node) {
				tr_nodes.add(bp)
			}
		}

		if (!bp_nodes.isEmpty)
		{
			var sorted_nodes = Blueprint.topo_sort(bp_nodes)
			for (var t_node in sorted_nodes)
			{
				var t_name = nil
				var t_idx = this.query_node_idx(scene.nodes, t_node)
				if (t_idx) {
					t_name = "node%(t_idx)"
				}
				for (var t_pin in t_node.imports)
				{
					for (var t_conn in t_pin.conns)
					{
						if (!t_conn.from.node.dummy)
						{
							var f_name = nil
							for (var f_idx = 0; f_idx < scene.nodes.count; f_idx = f_idx + 1) {
								var f_bp = scene.nodes[f_idx].components["bp"]
								if (f_bp == t_conn.from.node) {
									f_name = "node%(f_idx)"
								}
							}
							if (f_name) {
								file.write("Blueprint.connect(%(f_name), \"%(t_conn.from.name)\", %(t_name), \"%(t_conn.to.name)\")\n")						
							}
						}
					}
				}			
			}
		}

		if (!nw_nodes.isEmpty)		
		{
			for (var node in nw_nodes)
			{
				var f_name = nil
				var f_idx = this.query_node_idx(scene.nodes, node)
				if (f_idx) {
					f_name = "node%(f_idx)"
				}
				for (var pin in node.pins)
				{
					for (var edge in pin.edges)
					{
						if (edge.pin0 == pin)
						{
							var t_name = nil
							for (var f_idx = 0; f_idx < scene.nodes.count; f_idx = f_idx + 1) {
								var f_bp = scene.nodes[f_idx].components["bp"]
								if (f_bp == edge.pin1.vert) {
									t_name = "node%(f_idx)"
								}
							}
							if (t_name) 
							{
								var f_pin = VertexShape.get_pin_name(edge.pin0)
								var t_pin = VertexShape.get_pin_name(edge.pin1)
								file.write("Network.connect(%(f_name), \"%(f_pin)\", %(t_name), \"%(t_pin)\")\n")
							}
						}
					}
				}
			}
		}

		if (!tr_nodes.isEmpty)
		{
			for (var p_node in tr_nodes)
			{
				var p_name = nil
				var p_idx = this.query_node_idx(scene.nodes, p_node)
				if (p_idx) {
					p_name = "node%(p_idx)"
				}
				for (var c_pin in p_node.children)
				{
					var edge = c_pin.edge
					var c_name = nil
					for (var c_idx = 0; c_idx < scene.nodes.count; c_idx = c_idx + 1) {
						var c_node = scene.nodes[c_idx].components["bp"]
						if (c_node == edge.pin1.node) {
							c_name = "node%(c_idx)"
						}
					}
					if (c_name) {
						file.write("Tree.connect(%(p_name), \"%(edge.pin0.name)\", %(c_name), \"%(edge.pin1.name)\")\n")
					}
				}			
			}
		}

		if (file is MemFile) 
		{
			var scene = this.scene_stack.top()
			scene.ud.file_content = file.str
		} else {
			IO.close(file)
		}

		if (old_dir != "") {
			Filesystem.set_asset_base_dir(old_dir)
		}
	}

	copy_to_clipboard()
	{
		this.clipboard = ""
		var ext_clipboard = ""

		var scene = this.scene_stack.top()

		// nodes
		for (var node in scene.selection) 
		{
			var bp = node.components["bp"]
			var index = this.query_node_idx(scene.nodes, bp)
			var trans = node.components["transform"]

			var name = nil
			if (index >= 0) {
				name = "node%(index)"
			}
			var scope = bp.get_class().module.replace(".", "::")
			var source = "
var %(name) = ::%(scope)::%(bp.get_class().name)()
%(bp.to_string(name))
_editor.scene_stack.top().selection_add(_editor.add_node(%(name), %(trans.position.x), %(trans.position.y)))
"
			this.clipboard = this.clipboard + source
			ext_clipboard = ext_clipboard + source
		}

		// connections
		var bp_nodes = []
		for (var node in scene.selection)
		{
			var bp_node = node.components["bp"]
			if (bp_node is BP_Node) {
				bp_nodes.add(bp_node)
			}
		}
		var sorted_nodes = Blueprint.topo_sort(bp_nodes)
		for (var t_node in sorted_nodes) 
		{
			var t_name = nil
			var t_idx = this.query_node_idx(scene.nodes, t_node)
			if (t_idx) {
				t_name = "node%(t_idx)"			
			}
			for (var t_pin in t_node.imports)
			{
				for (var t_conn in t_pin.conns)
				{
					var f_name = nil
					// find in selection
					for (var node in scene.selection) {
						var f_bp = node.components["bp"]
						if (f_bp == t_conn.from.node) {
							var f_idx = this.query_node_idx(scene.nodes, f_bp)
							if (f_idx) {
								f_name = "node%(f_idx)"							
							}
						}
					}
					if (f_name) {
						ext_clipboard = ext_clipboard + "Blueprint.connect(%(f_name), \"%(t_conn.from.name)\", %(t_name), \"%(t_conn.to.name)\")\n"	
					}
					
					// find in scene
					if (!f_name)
					{
						var f_idx = this.query_node_idx(scene.nodes, t_conn.from.node)
						if (f_idx) {
							f_name = "_editor.scene_stack.top().nodes[%(f_idx)].components[\"bp\"]"
						}
					}
					if (f_name) {
						this.clipboard = this.clipboard + "Blueprint.connect(%(f_name), \"%(t_conn.from.name)\", %(t_name), \"%(t_conn.to.name)\")\n"
					}
				}
			}
		}

		this.cam_pos_on_copy = Vector2(this.camera.pos.x, this.camera.pos.y)

		tt_System.set_clipboard_text(ext_clipboard)
	}

	paste_from_clipboard()
	{
		var text = this.clipboard
		if (text == "") {
			text = tt_System.get_clipboard_text()
		}
		if (text == "") {
			return
		}

		var scene = this.scene_stack.top()

		scene.selection_clear()

		var header = "
import \"editor\" for _editor
"
		header = header + this.load_file_imports()

		var source = header + text
		Basic.loadstring("temp", source)

		if (this.cam_pos_on_copy)
		{
			var dx = this.camera.pos.x - this.cam_pos_on_copy.x
			var dy = this.camera.pos.y - this.cam_pos_on_copy.y
			var trans_op = Node2dTranslate(this.camera, this.scene_stack)
			trans_op.translate(Vector2(dx, dy))
		}

		this.scene_stack.bp_dirty = true
	}

	refresh()
	{
		this.loadfromfile()
	}

	clear()
	{
		this.editop.clear()
		this.scene_stack.top().clear()

		this.script_stack = []

		this.clipboard = ""
		this.cam_pos_on_copy = nil
	}

	print_screen()
	{
		var TEX_SIZE = 512

		var img_path = this.filepath.replace(".ves", ".jpg")

		Filesystem.remove_file(img_path)

		var fbo = Framebuffer.init()

		var rbo_color = RenderBuffer.init(TEX_SIZE, TEX_SIZE, "rgb")
		fbo.attach_rbo(rbo_color, "col0")

		var rbo_depth = RenderBuffer.init(TEX_SIZE, TEX_SIZE, "depth_component")
		fbo.attach_rbo(rbo_depth, "depth")

		var prev_fbo = Render.get_fbo()
		var prev_vp = Render.get_viewport()

		Render.set_fbo(fbo)
		Render.set_viewport([ 0, 0, TEX_SIZE, TEX_SIZE ])

		this.draw_preview()

		var img = ImageData.init("SCREEN_CAPTURE")
		img.store_to_file(img_path)

		Render.set_fbo(prev_fbo)
		Render.set_viewport(prev_vp)
	}

	enter_subgraph()
	{
		var scene = this.scene_stack.top()

		if (scene.selection.count != 1) {
			return false
		}

		var node = scene.selection.front()
		var bp_node = node.components["bp"]
		if (!(bp_node is Subgraph)) {
			return false
		}

		scene.on_leave_out()

		bp_node.setup_popup_nodes(this)

		var name = Filesystem.get_filename(bp_node.filepath)
		var next_scene = Scene(name)
		next_scene.filepath = bp_node.filepath
		next_scene.ud = bp_node
		this.scene_stack.push(next_scene)
		next_scene.on_enter_in()
		if (bp_node.file_content) {
			this.filepath = ""
			this.loadfromstring(bp_node.file_content)
		} else {
			//this.loadfromfile(bp_node.filepath)
			this.load_from_subgraph(bp_node)
		}

		return true
	}

	check_and_rebuild_list()
	{
		if (this.drawlist and this.exe_list and !this.scene_stack.bp_dirty) {
			return
		}

		var scene = this.scene_stack.root()

		var bp_nodes = []
		for (var node in scene.nodes) {
			var bp = node.components["bp"]
			if (bp is BP_Node) {
				bp_nodes.add(bp)
			}
		}

		if (this.scene_stack.bp_dirty or !this.drawlist) {
			this.drawlist = Drawlist(bp_nodes)
		}
		if (this.scene_stack.bp_dirty or !this.trigger_list) {
			this.trigger_list = TriggerList(bp_nodes)
		}		
		if (this.scene_stack.bp_dirty or !this.exe_list) {
			this.exe_list = ExecuteList(bp_nodes)
			this.trigger_list.run(EVENT_BLUEPRINT_CHANGED)
		}
	}

	draw_preview()
	{
		this.check_and_rebuild_list()

		if (!this.drawlist or !this.exe_list or this.scene_stack.bp_dirty) {
			this.scene_stack.bp_dirty = false
		}

		Graphics.on_cam_update(0, 0, 1)

		Render.clear(["color"], { "color" : [128,128,128,128] })

		this.drawlist.run()

		Graphics.flush()
		Graphics.on_cam_update(this.camera.pos.x, this.camera.pos.y, this.camera.scale)		
	}
}