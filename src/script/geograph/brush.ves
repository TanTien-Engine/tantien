import "geometry" for Shape3D
import "maths.vector" for Vector3

class Brush is Shape3D
{
	init() 
	{
		this.init([])
	}

	init(polys) 
	{
		this.polys = polys

		this.model_dirty = true
		this.model = nil

		this.materials = nil
		this.offsets   = nil
		this.colors    = nil

		this.color = Vector3(255, 255, 255)

		this.instanced_inited = false

		this.order = 0

		this.lock = false
	}

	clone()
	{
		var polys = []
		for (var poly in this.polys) {
			polys.add(poly.clone())
		}

		var new = Brush(polys)

		new.set_color(this.color.x, this.color.y, this.color.z)

		new.order = this.order

		new.lock = this.lock

		return new
	}

	is_contain(x, y, z)
	{
		for (var p in this.polys) {
			if (p.is_contain([ x, y, z ])) {
				return true
			}
		}
		return false
	}

	transform(mat)
	{
		for (var poly in this.polys) {
			poly.transform(mat)
		}

		this.set_model_dirty()
	}

	mirror(plane)
	{
		for (var poly in this.polys) {
			poly.mirror(plane)
		}

		this.set_model_dirty()
	}

	clip(plane, keep, seam)
	{
		var polys = []
		for (var poly in this.polys) {
			if (poly.clip(plane, keep, seam)) {
				polys.add(poly)
			}
		}
		this.polys = polys

		this.set_model_dirty()
	}

	fork(plane)
	{
		var polys = []
		for (var poly in this.polys) {
			polys.add(poly.fork(plane))
		}
		return Brush(polys)
	}

	join(other)
	{
		if (this.polys.count != other.polys.count) {
			return
		}

		for (var i in 0..this.polys.count) {
			this.polys[i].join(other.polys[i])
		}
	}

	set_model_dirty() { this.model_dirty = true }

	get_model(adjacencies)
	{
		if (this.model_dirty) 
		{
			import "model" for glTF
			this.model = glTF.create_from_polytope(this.polys, this.materials, this.offsets, this.colors, adjacencies)

			this.model_dirty = false
		}

		return this.model
	}

	set_materials_id(mat_id)
	{
		if (!this.materials) {
			this.materials = List.filled(this.polys.count, 0)
		}
		for (var i = 0; i < this.materials.count; i = i + 1) 
		{
			if (this.materials[i] != mat_id) {
				this.materials[i] = mat_id
				this.model_dirty = true
			}			
		}
	}

	set_offsets(offset)
	{
		if (!this.offsets) {
			this.offsets = List.filled(this.polys.count, 0)
		}
		for (var i = 0; i < this.offsets.count; i = i + 1) 
		{
			if (this.offsets[i] != offset) {
				this.offsets[i] = offset
				this.model_dirty = true
			}			
		}
	}

	set_color(r, g, b)
	{
		this.color.set(r, g, b)
		var rgb = r * 256 * 256 + g * 256 + b

		if (!this.colors) {
			this.colors = List.filled(this.polys.count, 0)
		}
		for (var i = 0; i < this.colors.count; i = i + 1) 
		{
			if (this.colors[i] != this.color) {
				this.colors[i] = rgb
				this.model_dirty = true
			}			
		}
	}
}

class BrushParts is Shape3D
{
	init()
	{
		this.brush = nil

		// [ [poly_idx, prim_idx] ...]
		this.points = []
		this.faces  = []
	}

	clone()
	{
		var new = BrushParts()

		new.brush = this.brush.clone()

		if (this.points) {
			new.points = []
			this.copy_idx_list(new.points, this.points)
		}
		if (this.faces) {
			new.faces = []
			this.copy_idx_list(new.faces, this.faces)
		}

		return new

	}

	copy_idx_list(dst, src)
	{
		for (var pair in src) {
			var d_pair = [ pair[0], pair[1] ]
			dst.add(d_pair)
		}
	}
}

class BrushInstanced is Shape3D
{
	init() 
	{
		this.brush = nil

		this.transforms = []
	}

	clone()
	{
		var new = BrushInstanced()

		new.brush = this.brush.clone()

		for (var t in this.transforms) {
			new.transforms.add(t.clone())
		}

		return new
	}
}