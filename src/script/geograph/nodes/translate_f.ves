import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VAR_TYPE_HIST, VarGeo
import "geograph.brush" for Brush, BrushInstanced
import "geograph.compiler" for Compiler as geo_Compiler
import "maths.vector" for Vector3
import "maths.compiler" for Compiler as maths_Compiler
import "math" for Math
import "maths" for Matrix44, Float3
import "geometry" for PolyHistory

class TranslateF is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "xyz", [ VAR_TYPE_NUMBER3, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "hist", VAR_TYPE_HIST),
		]

		this.layout()

		this.result = nil
		this.hist = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		this.result = nil
		this.hist = nil
	}

	calc_value(idx)
	{
		if (!this.result) 
		{
			this.calc_value_impl()
		}

		if (idx == 0)
		{
			if (!this.result or this.result.count == 0) {
				return nil
			} else if (this.result.count == 1) {
				return this.result[0]
			} else {
				return Variant(result)
			}
		}
		else if (idx == 1)
		{
			return Variant(VAR_TYPE_HIST, this.hist)
		}

		import "logger.logger" for Logger
		Logger.error("Not Implemented!")
						
		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_obj = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_xyz = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)

		var r_mat = maths_Compiler.create_mat4(compiler, opcodes)
		opcodes.mat4_translate(r_mat, r_xyz)
		compiler.free_reg(r_xyz)

		opcodes.transform(r_obj, r_mat)

		compiler.free_reg(r_mat)

		return r_obj
	}

	calc_value_impl()
	{
		this.result = []
		this.hist = PolyHistory.init()

		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return
		}

		var v_xyz = Blueprint.calc_input_value(this, 1)
		if (v_xyz.type == VAR_TYPE_ARRAY)
		{
			for (var p in v_xyz.value) {
				var mat = this.calc_mat(p.value)
				this.translate_impl(v_geo, mat, p.value, this.result)
			}
		}
		else
		{
			var mat = this.calc_mat(v_xyz.value)
			this.translate_impl(v_geo, mat, v_xyz.value, this.result)
		}
	}

	calc_mat(pos)
	{
		var x = 0
		var y = 0
		var z = 0

		if (pos) {
			x = pos.x
			y = pos.y
			z = pos.z
		}

		var mat = Matrix44.init()
		mat.translate(x, y, z)

		return mat
	}

	translate_impl(v_geo, mat, pos, result)
	{
		if (v_geo.type == VAR_TYPE_ARRAY) 
		{
			var list = []
			for (var v in v_geo.value) {
				this.translate_impl(v, mat, pos, list)
			}
			result.add(Variant(list))
		} 
		else if (v_geo.type == VAR_TYPE_GEO) 
		{
			result.add(this.translate_geo(v_geo.value, mat, pos))
		} 
		else if (v_geo.type == VAR_TYPE_NUMBER3) 
		{
			result.add(this.translate_num3(v_geo.value, mat))	
		}
	}

	translate_geo(geo, mat, pos)
	{
		var new_geo = geo.clone()
		if (new_geo.shape is Brush) 
		{
			new_geo.shape.transform(mat)

			for (var i in 0 .. geo.shape.polys.count)
			{
				this.hist.add_modified(geo.shape.polys[i], new_geo.shape.polys[i])
			}
		} 
		else if (new_geo.shape is BrushInstanced) 
		{
			new_geo.shape.brush.transform(mat)
		} 
		else 
		{
			new_geo.shape.translate(pos.x, pos.y)
		}
		return Variant(VAR_TYPE_GEO, new_geo)
	}

	translate_num3(num3, mat)
	{
		var p = Float3.init(num3.x, num3.y, num3.z)
		p.transform(mat)
		return Variant(Vector3(p.x(), p.y(), p.z()))
	}
}