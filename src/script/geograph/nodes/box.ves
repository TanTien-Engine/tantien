import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VAR_TYPE_CUBE, VarGeo
import "geograph.brush" for Brush
import "geograph.compiler" for PolytopeBuilder
import "geometry" for PolyFace, Polytope
import "maths.vector" for Vector3
import "maths.cube" for Cube
import "maths.compiler" for Compiler as maths_Compiler
import "maths" for Plane

class Box is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "size", VAR_TYPE_NUMBER3),
			Pin(this, "pos",  VAR_TYPE_NUMBER3),			
		]
		this.exports = [
			Pin(this, "geo",  VAR_TYPE_GEO),
			Pin(this, "cube", VAR_TYPE_CUBE),
		]

		this.params.add(NodeParam("size", Vector3(1, 1, 1), { "region" : 1 }))
		this.params.add(NodeParam("pos",  Vector3(0, 0, 0), { "min" : -1, "max" : 1 }))

		this.params.add(NodeParam("offset_x", false))		
		this.params.add(NodeParam("offset_y", false))
		this.params.add(NodeParam("offset_z", false))

		this.layout()
	}

	calc_value(idx)
	{
		if (idx == 0) {
			return this.calc_out_geo()
		} else if (idx == 1) {
			return this.calc_out_cube()
		}

		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_size = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_pos = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)

		if (!r_size and !r_pos) 
		{
			var size = this.query_param("size").value

			var hx = size.x * 0.5
			var hy = size.y * 0.5
			var hz = size.z * 0.5

			var pos = this.query_param("pos").value

			var xmin = pos.x - hx
			var xmax = pos.x + hx
			var ymin = pos.y - hy
			var ymax = pos.y + hy
			var zmin = pos.z - hz
			var zmax = pos.z + hz

			if (this.query_param("offset_x").value) {
				xmin = xmin + hx
				xmax = xmax + hx
			}
			if (this.query_param("offset_y").value) {
				ymin = ymin + hy
				ymax = ymax + hy
			}
			if (this.query_param("offset_z").value) {
				zmin = zmin + hz
				zmax = zmax + hz
			}

			if (idx == 0)
			{
		    	var top_left_front  = Vector3(xmin, ymax, zmin)
		    	var top_left_back   = Vector3(xmin, ymax, zmax)
		    	var top_right_front = Vector3(xmax, ymax, zmin)
		    	var top_right_back  = Vector3(xmax, ymax, zmax)
		    	var btm_left_front  = Vector3(xmin, ymin, zmin)
		    	var btm_left_back   = Vector3(xmin, ymin, zmax)
		    	var btm_right_front = Vector3(xmax, ymin, zmin)
		    	var btm_right_back  = Vector3(xmax, ymin, zmax)

		    	var builder = PolytopeBuilder(compiler, opcodes)

		    	builder.begin()

				builder.add_face_i(top_left_front, top_left_back, top_right_back)
				builder.add_face_i(btm_left_front, btm_right_front, btm_right_back)
				builder.add_face_i(top_left_back, top_left_front, btm_left_front)
				builder.add_face_i(top_right_front, top_right_back, btm_right_back)
				builder.add_face_i(top_left_front, top_right_front, btm_right_front)
				builder.add_face_i(top_right_back, top_left_back, btm_left_back)

				var poly = builder.end()
				
				return poly
			}
			else if (idx == 1)
			{
				var r_min = maths_Compiler.create_vec3(compiler, opcodes, Vector3(xmin, ymin, zmin))
				var r_max = maths_Compiler.create_vec3(compiler, opcodes, Vector3(xmax, ymax, zmax))

				var r_cube = maths_Compiler.create_cube(compiler, opcodes, r_min, r_max)

				compiler.free_reg(r_min)
				compiler.free_reg(r_max)

				return r_cube
			}
		}
		else
		{
			var r_size_x = compiler.new_reg()
			var r_size_y = compiler.new_reg()
			var r_size_z = compiler.new_reg()
			if (r_size)
			{
				opcodes.get_x(r_size_x, r_size)
				opcodes.get_y(r_size_y, r_size)
				opcodes.get_z(r_size_z, r_size)
				compiler.free_reg(r_size)
			}
			else
			{
				var size = this.query_param("size").value
				opcodes.store_num(r_size_x, size.x)
				opcodes.store_num(r_size_y, size.y)
				opcodes.store_num(r_size_z, size.z)
			}

			var r_pos_x = compiler.new_reg()
			var r_pos_y = compiler.new_reg()
			var r_pos_z = compiler.new_reg()
			if (r_pos)
			{
				opcodes.get_x(r_pos_x, r_pos)
				opcodes.get_y(r_pos_y, r_pos)
				opcodes.get_z(r_pos_z, r_pos)
				compiler.free_reg(r_pos)
			}
			else
			{
				var pos = this.query_param("pos").value
				opcodes.store_num(r_pos_x, pos.x)
				opcodes.store_num(r_pos_y, pos.y)
				opcodes.store_num(r_pos_z, pos.z)
			}

			var r_hx = compiler.new_reg()
			var r_hy = compiler.new_reg()
			var r_hz = compiler.new_reg()
			var r_tmp = maths_Compiler.create_number(compiler, opcodes, 0.5)
			opcodes.mul_num(r_hx, r_size_x, r_tmp)
			opcodes.mul_num(r_hy, r_size_y, r_tmp)
			opcodes.mul_num(r_hz, r_size_z, r_tmp)
			compiler.free_reg(r_tmp)
			compiler.free_reg(r_size_x)
			compiler.free_reg(r_size_y)
			compiler.free_reg(r_size_z)

			var r_xmin = compiler.new_reg()
			var r_xmax = compiler.new_reg()
			var r_ymin = compiler.new_reg()
			var r_ymax = compiler.new_reg()
			var r_zmin = compiler.new_reg()
			var r_zmax = compiler.new_reg()
			opcodes.sub_num(r_xmin, r_pos_x, r_hx)
			opcodes.add_num(r_xmax, r_pos_x, r_hx)
			opcodes.sub_num(r_ymin, r_pos_y, r_hy)
			opcodes.add_num(r_ymax, r_pos_y, r_hy)
			opcodes.sub_num(r_zmin, r_pos_z, r_hz)
			opcodes.add_num(r_zmax, r_pos_z, r_hz)
			compiler.free_reg(r_pos_x)
			compiler.free_reg(r_pos_y)
			compiler.free_reg(r_pos_z)

			if (this.query_param("offset_x").value) {
				opcodes.add_num(r_xmin, r_xmin, r_hx)
				opcodes.add_num(r_xmax, r_xmax, r_hx)
			}
			if (this.query_param("offset_y").value) {
				opcodes.add_num(r_ymin, r_ymin, r_hy)
				opcodes.add_num(r_ymax, r_ymax, r_hy)
			}
			if (this.query_param("offset_z").value) {
				opcodes.add_num(r_zmin, r_zmin, r_hz)
				opcodes.add_num(r_zmax, r_zmax, r_hz)
			}
			compiler.free_reg(r_hx)
			compiler.free_reg(r_hy)
			compiler.free_reg(r_hz)

			if (idx == 0)
			{
				var r_top_left_front  = compiler.new_reg()
				var r_top_left_back   = compiler.new_reg()
				var r_top_right_front = compiler.new_reg()
				var r_top_right_back  = compiler.new_reg()
				var r_btm_left_front  = compiler.new_reg()
				var r_btm_left_back   = compiler.new_reg()
				var r_btm_right_front = compiler.new_reg()
				var r_btm_right_back  = compiler.new_reg()
				opcodes.vec3_create_r(r_top_left_front , r_xmin, r_ymax, r_zmin)
				opcodes.vec3_create_r(r_top_left_back  , r_xmin, r_ymax, r_zmax)
				opcodes.vec3_create_r(r_top_right_front, r_xmax, r_ymax, r_zmin)
				opcodes.vec3_create_r(r_top_right_back , r_xmax, r_ymax, r_zmax)
				opcodes.vec3_create_r(r_btm_left_front , r_xmin, r_ymin, r_zmin)
				opcodes.vec3_create_r(r_btm_left_back  , r_xmin, r_ymin, r_zmax)
				opcodes.vec3_create_r(r_btm_right_front, r_xmax, r_ymin, r_zmin)
				opcodes.vec3_create_r(r_btm_right_back , r_xmax, r_ymin, r_zmax)
				compiler.free_reg(r_xmin)
				compiler.free_reg(r_xmax)
				compiler.free_reg(r_ymin)
				compiler.free_reg(r_ymax)
				compiler.free_reg(r_zmin)
				compiler.free_reg(r_zmax)

		    	var builder = PolytopeBuilder(compiler, opcodes)

		    	builder.begin()

				builder.add_face_r(r_top_left_front, r_top_left_back, r_top_right_back)
				builder.add_face_r(r_btm_left_front, r_btm_right_front, r_btm_right_back)
				builder.add_face_r(r_top_left_back, r_top_left_front, r_btm_left_front)
				builder.add_face_r(r_top_right_front, r_top_right_back, r_btm_right_back)
				builder.add_face_r(r_top_left_front, r_top_right_front, r_btm_right_front)
				builder.add_face_r(r_top_right_back, r_top_left_back, r_btm_left_back)

				var poly = builder.end()
				
				compiler.free_reg(r_top_left_front)
				compiler.free_reg(r_top_left_back)
				compiler.free_reg(r_top_right_front)
				compiler.free_reg(r_top_right_back)
				compiler.free_reg(r_btm_left_front)
				compiler.free_reg(r_btm_left_back)
				compiler.free_reg(r_btm_right_front)
				compiler.free_reg(r_btm_right_back)

				return poly
			}
			else if (idx == 1)
			{
				var r_min = compiler.new_reg()
				opcodes.vec3_create_r(r_min, r_xmin, r_ymin, r_zmin)

				var r_max = compiler.new_reg()
				opcodes.vec3_create_r(r_max, r_xmax, r_ymax, r_zmax)

				compiler.free_reg(r_xmin)
				compiler.free_reg(r_xmax)
				compiler.free_reg(r_ymin)
				compiler.free_reg(r_ymax)
				compiler.free_reg(r_zmin)
				compiler.free_reg(r_zmax)
				
				var r_cube = maths_Compiler.create_cube(compiler, opcodes, r_min, r_max)

				compiler.free_reg(r_min)
				compiler.free_reg(r_max)

				return r_cube
			}
		}

		return nil
	}

	calc_in_size()
	{
		var size = nil
		var v_size = Blueprint.calc_input_value(this, 0)
		if (v_size) {
			size = v_size.value
		} else {
			size = this.query_param("size").value
		}
		return size
	}

	calc_in_pos()
	{
		var pos = nil
		var v_pos = Blueprint.calc_input_value(this, 1)
		if (v_pos) {
			pos = v_pos.value
		} else {
			pos = this.query_param("pos").value
		}
		return pos
	}

	calc_out_geo()
	{
		var size = this.calc_in_size()

		var hx = size.x * 0.5
		var hy = size.y * 0.5
		var hz = size.z * 0.5

		var pos = this.calc_in_pos()

		var xmin = pos.x - hx
		var xmax = pos.x + hx
		var ymin = pos.y - hy
		var ymax = pos.y + hy
		var zmin = pos.z - hz
		var zmax = pos.z + hz

		if (this.query_param("offset_x").value) {
			xmin = xmin + hx
			xmax = xmax + hx
		}
		if (this.query_param("offset_y").value) {
			ymin = ymin + hy
			ymax = ymax + hy
		}
		if (this.query_param("offset_z").value) {
			zmin = zmin + hz
			zmax = zmax + hz
		}

    	var top_left_front  = [ xmin, ymax, zmin ]
    	var top_left_back   = [ xmin, ymax, zmax ]
    	var top_right_front = [ xmax, ymax, zmin ]
    	var top_right_back  = [ xmax, ymax, zmax ]
    	var btm_left_front  = [ xmin, ymin, zmin ]
    	var btm_left_back   = [ xmin, ymin, zmax ]
    	var btm_right_front = [ xmax, ymin, zmin ]
    	var btm_right_back  = [ xmax, ymin, zmax ]

    	var faces = []

	    var top = Plane.init(top_left_front, top_left_back, top_right_back)
	    faces.add(PolyFace.init(top))

	    var bottom = Plane.init(btm_left_front, btm_right_front, btm_right_back)
	    faces.add(PolyFace.init(bottom))

	    var left = Plane.init(top_left_back, top_left_front, btm_left_front)
	    faces.add(PolyFace.init(left))

	    var right = Plane.init(top_right_front, top_right_back, btm_right_back)
	    faces.add(PolyFace.init(right))

	    var front = Plane.init(top_left_front, top_right_front, btm_right_front)
	    faces.add(PolyFace.init(front))

	    var back = Plane.init(top_right_back, top_left_back, btm_left_back)
	    faces.add(PolyFace.init(back))

	    var poly = Polytope.init(faces)

		var geo = VarGeo()
		geo.shape = Brush([ poly ])
		return Variant(VAR_TYPE_GEO, geo)
	}

	calc_out_cube()
	{
		var size = this.calc_in_size()

		var hx = size.x * 0.5
		var hy = size.y * 0.5
		var hz = size.z * 0.5

		var pos = this.calc_in_pos()

		var cube = Cube()

		cube.min.x = pos.x - hx
		cube.max.x = pos.x + hx
		cube.min.y = pos.y - hy
		cube.max.y = pos.y + hy
		cube.min.z = pos.z - hz
		cube.max.z = pos.z + hz

		if (this.query_param("offset_x").value) {
			cube.min.x = cube.min.x + hx
			cube.max.x = cube.max.x + hx
		}
		if (this.query_param("offset_y").value) {
			cube.min.y = cube.min.y + hy
			cube.max.y = cube.max.y + hy
		}
		if (this.query_param("offset_z").value) {
			cube.min.z = cube.min.z + hz
			cube.max.z = cube.max.z + hz
		}

		return Variant(VAR_TYPE_CUBE, cube)
	}
}