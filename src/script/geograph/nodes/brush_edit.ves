import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER3
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush, BrushParts
import "maths.calc" for Calc
import "maths" for Float3

class BrushEdit is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "parts",     VAR_TYPE_GEO),
			Pin(this, "translate", VAR_TYPE_NUMBER3),
			Pin(this, "rotate",    VAR_TYPE_NUMBER3),
			Pin(this, "scale",     VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "brush", VAR_TYPE_GEO),
			Pin(this, "parts", VAR_TYPE_GEO),			
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_parts = Blueprint.calc_input_value(this, 0)
		if (!v_parts or v_parts.type != VAR_TYPE_GEO or !(v_parts.value.shape is BrushParts)) {
			return nil
		}

		var v_translate = Blueprint.calc_input_value(this, 1)
		var v_rotate = Blueprint.calc_input_value(this, 2)
		var v_scale = Blueprint.calc_input_value(this, 3)
		var mat = Calc.transform_mat(v_scale, v_rotate, v_translate)

		var parts = v_parts.value.shape.clone()
		var brush = parts.brush
 
		// points
		for (var pair in parts.points)
		{
			var poly = brush.polys[pair[0]]
			var point = poly.get_points()[pair[1]]

			var pos = point.get_pos()
			var p = Float3.init(pos[0], pos[1], pos[2])
			p.transform(mat)
			point.set_pos([ p.x(), p.y(), p.z() ])

			poly.set_topo_dirty()
		}

		// faces
		for (var pair in parts.faces)
		{
			var poly = parts.brush.polys[pair[0]]
			var face = poly.get_faces()[pair[1]]

			var border = face.get_border()
			var pts = poly.get_points()
			for (var i = 0; i < border.count; i = i + 1)
			{
				var point = pts[border[i]]

				var pos = point.get_pos()
				var p = Float3.init(pos[0], pos[1], pos[2])
				p.transform(mat)

				point.set_pos([ p.x(), p.y(), p.z() ])
			}

			poly.set_topo_dirty()
		}

		brush.set_model_dirty()

		if (idx == 0)
		{
			var new_geo = VarGeo()
			new_geo.shape = brush
			return Variant(VAR_TYPE_GEO, new_geo)
		}
		else if (idx == 1)
		{
			var new_geo = VarGeo()
			new_geo.shape = parts
			return Variant(VAR_TYPE_GEO, new_geo)
		}

		return nil
	}
}