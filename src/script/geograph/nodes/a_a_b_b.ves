import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_RECT
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO
import "maths.rect" for Rect
import "maths.vector" for Vector2
import "geometry" for Polyline

class AABB is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "vertices", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "rect", VAR_TYPE_RECT),
		]

		this.layout()

		this.rect = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		this.rect = nil
	}

	on_node_dirty()
	{
		this.rect = nil
	}

	calc_value(idx)
	{
		if (this.rect) {
			return Variant(VAR_TYPE_RECT, this.rect)
		}

		var v_verts = Blueprint.calc_input_value(this, 0)
		if (!v_verts) {
			return nil
		}

		if (v_verts.type == VAR_TYPE_GEO)
		{
			if (v_verts.value.shape is Polyline) 
			{
				var verts = v_verts.value.shape.get_vertices()
				if (verts.count < 2) {
					return nil
				}

				var xmin = verts[0]
				var xmax = xmin
				var ymin = verts[1]
				var ymax = ymin
				for (var i in 1 .. verts.count / 2)
				{
					var x = verts[i * 2]
					var y = verts[i * 2 + 1]
					if (x < xmin) {
						xmin = x
					}
					if (x > xmax) {
						xmax = x
					}
					if (y < ymin) {
						ymin = y
					}
					if (y > ymax) {
						ymax = y
					}
				}

				this.rect = Rect(Vector2(xmin, ymin), Vector2(xmax, ymax))
			}
		}
		else if (v_verts.type == VAR_TYPE_ARRAY)
		{
			var verts = v_verts.value
			var xmin = verts[0].value.x
			var xmax = xmin
			var ymin = verts[0].value.y
			var ymax = ymin
			if (verts.count > 1)
			{
				for (var i in 1 .. verts.count)
				{
					var p = verts[i].value
					if (p.x < xmin) {
						xmin = p.x
					}
					if (p.x > xmax) {
						xmax = p.x
					}
					if (p.y < ymin) {
						ymin = p.y
					}
					if (p.y > ymax) {
						ymax = p.y
					}
				}
			}
			this.rect = Rect(Vector2(xmin, ymin), Vector2(xmax, ymax))
		}

		return Variant(VAR_TYPE_RECT, this.rect)
	}
}