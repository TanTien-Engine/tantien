import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2
import "blueprint.node_param" for NodeParam
import "blueprint.node_helper" for NodeHelper
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geometry" for Arc as tt_Arc
import "maths.vector" for Vector2

class Arc is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "center", VAR_TYPE_NUMBER2),
			Pin(this, "radius", VAR_TYPE_NUMBER),
			Pin(this, "angle", VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		// shape
		this.params.add(NodeParam("center", Vector2(0, 0), { "min" : -10, "max" : 10 }))
		this.params.add(NodeParam("radius", 0.5, { "region" : 1 }))
		this.params.add(NodeParam("angle", Vector2(0, 3.14), { "min" : -10, "max" : 10 }))

		this.layout()
	}

	calc_value(idx)
	{
		var geo = VarGeo()
		geo.shape = tt_Arc.init()
		this.update_geo(geo)
		return Variant(VAR_TYPE_GEO, geo)
	}

	update_geo(geo)
	{
		var center = NodeHelper.calc_prop_value(this, "center")
		var radius = NodeHelper.calc_prop_value(this, "radius")
		var angle = NodeHelper.calc_prop_value(this, "angle")

		geo.shape.set(center.x, center.y, radius, angle.x, angle.y)

//		geo.render_style["fill"] = this.query_param("fill").value
//		geo.render_style["color"] = this.query_param("color").value
	}	
}