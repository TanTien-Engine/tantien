import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.variant_helper" for VariantHelper
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VAR_TYPE_HIST, VarGeo
import "geograph.brush" for Brush
import "geometry" for Polytope
import "vm" for CodeTools
import "geometry" for PolyHistory

class Boolean is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "a", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "b", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "hist", VAR_TYPE_HIST),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "hist", VAR_TYPE_HIST),
		]

		this.params.add(NodeParam("operator", "intersect", { "combo" : [ "union", "intersect", "subtract" ] }))

		this.layout()

		this.brushes = nil
		this.hist = nil
	}
	
	on_node_dirty() 
	{
		super.on_node_dirty()

		this.brushes = nil
		this.hist = nil
	}
	
	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		this.brushes = nil
		this.hist = nil
	}

	calc_value(idx)
	{
		if (!this.brushes)
		{
			this.calc_value_impl()
		}

		if (idx == 0)
		{
			if (this.brushes.isEmpty) {
				return nil
			} else if (this.brushes.count == 1) {
				return this.brushes[0]
			} else {
				return Variant(this.brushes)
			}
		}
		else if (idx == 1)
		{
			return Variant(VAR_TYPE_HIST, this.hist)
		}

		import "logger.logger" for Logger
		Logger.error("Not Implemented!")

		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_dst = compiler.new_reg()
		if (!r_dst) {
			return nil
		}

		var r_base = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_tool = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)

		opcodes.polytope_subtract(r_dst, r_base, r_tool)

		compiler.get_profiler().add_cost(1)

		compiler.free_reg(r_base)
		compiler.free_reg(r_tool)

		return r_dst
	}

	calc_value_impl()
	{
		var v_a = Blueprint.calc_input_value(this, 0)
		if (!v_a) {
			return nil
		}
		var v_b = Blueprint.calc_input_value(this, 1)
		if (!v_b) {
			return nil
		}

		var v_hist = Blueprint.calc_input_value(this, 2)
		if (v_hist) {
			this.hist = PolyHistory.init(v_hist.value)
		} else {
			this.hist = PolyHistory.init()
		}

		var b = []
		this.get_polys(b, v_b)

		var operator = this.query_param("operator").value

		this.brushes = []
		this.boolean_impl(this.brushes, v_a, b, operator)

		if (operator == "subtract")
		{
			var src = []
			var dst = []			

			var src_geos = VariantHelper.flatten_values(v_a, VAR_TYPE_GEO)
			for (var geo in src_geos) 
			{
				for (var poly in geo.shape.polys) {
					src.add(poly)
				}
			}

			for (var v_brush in this.brushes)
			{
				for (var poly in v_brush.value.shape.polys) {
					dst.add(poly)
				}
			}

			this.hist.add_io_list(src, dst)
		}
	}

	get_polys(dst, src)
	{
		if (src.type == VAR_TYPE_ARRAY) 
		{
			for (var v in src.value) {
				this.get_polys(dst, v)
			}
		} 
		else if (src.type == VAR_TYPE_GEO and src.value.shape is Brush) 
		{
			var brush = src.value.shape
			for (var p in src.value.shape.polys) {
				dst.add(p)
			}
		}
	}

	boolean_impl(dst, v_a, b, op)
	{
		if (v_a.type == VAR_TYPE_ARRAY)
		{
			var list = []

			for (var item in v_a.value) {
				this.boolean_impl(list, item, b, op)
			}

			if (!list.isEmpty) 
			{
				if (list.count == 1) {
					dst.add(list[0])
				} else {
					dst.add(Variant(list))
				}
			}
		}
		else if (v_a.type == VAR_TYPE_GEO and v_a.value.shape is Brush)
		{
			var brush = v_a.value.shape
			if (brush.lock)
			{
				var geo = VarGeo()
				geo.shape = brush.clone()
				dst.add(Variant(VAR_TYPE_GEO, geo))
			}
			else
			{
				var d = this.boolean_impl(brush.polys, b, op)
				if (d) {
					dst.add(d)
				}
			}
		}
	}

	boolean_impl(a, b, op)
	{
		var polys = Polytope.boolean(op, a, b)
		if (polys.isEmpty) {
			return nil
		} else {
			var geo = VarGeo()
			geo.shape = Brush(polys)
			return Variant(VAR_TYPE_GEO, geo)
		}
	}
}