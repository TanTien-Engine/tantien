import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.nodes.number2" for Number2
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "geograph.poly_builder" for PolyBuilder
import "geometry" for Circle as tt_Circle
import "maths.vector" for Vector2, Vector3
import "maths.compiler" for Compiler as math_Compiler
import "maths.calc" for Calc
import "math" for Math

var EDITOR = nil

class Circle is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "center", VAR_TYPE_NUMBER2),
			Pin(this, "raduis", VAR_TYPE_NUMBER),
			Pin(this, "pos",    VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo",      VAR_TYPE_GEO),
			Pin(this, "polytope", VAR_TYPE_GEO),
		]

		// shape
		this.params.add(NodeParam("x", 0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("y", 0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("r", 100, { "min" : 0.001, "region" : 1000 }))

		// draw
		this.params.add(NodeParam("fill", false))
		this.params.add(NodeParam("color", Vector3(1.0, 0.0, 0.0)))

		this.layout()

		this.editor_center = Number2()
		this.editor_outer = Number2()
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var geo = VarGeo()
			geo.shape = tt_Circle.init()
			this.update_geo(geo)
			return Variant(VAR_TYPE_GEO, geo)
		}
		else if (idx == 1)
		{
			var points = []
			var faces = []
			this.calc_poly(points, faces)

			if (points.isEmpty or faces.isEmpty) {
				return nil
			}

			var poly = PolyBuilder.build_poly(points, faces)
			
			var geo = VarGeo()
			geo.shape = Brush([ poly ])
			return Variant(VAR_TYPE_GEO, geo)
		}
		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (idx == 1)
		{
			var points = []
			var faces = []

			this.calc_poly(points, faces)
			if (points.isEmpty or faces.isEmpty) {
				return -1
			}

			return PolyBuilder.build_poly_opcodes(compiler, opcodes, points, faces)
		}
		else
		{
			import "logger.logger" for Logger
			Logger.error("Not Implemented!")

			return -1
		}
	}

	update_geo(geo)
	{
		var c = this.get_center()
		var r = this.get_radius()
		geo.shape.set(c.x, c.y, r)

		geo.render_style["fill"] = this.query_param("fill").value
		geo.render_style["color"] = this.query_param("color").value.clone()

		var v_pos = Blueprint.calc_input_value(this, 2)
		if (v_pos) {
			geo.pos[0] = v_pos.value.x
			geo.pos[1] = v_pos.value.y			
		}
	}

	get_center()
	{
		var center = Vector2(0, 0)
		var v_center = Blueprint.calc_input_value(this, 0)
		if (v_center) {
			center.x = v_center.value.x
			center.y = v_center.value.y
		} else {
			center.x = this.query_param("x").value
			center.y = this.query_param("y").value
		}
		return center
	}

	get_radius()
	{
		var r = 0
		var v_radius = Blueprint.calc_input_value(this, 1)
		if (v_radius) {
			r = v_radius.value.x
		} else {
			r = this.query_param("r").value
		}
		return r
	}

	calc_poly(points, faces)
	{
		var c = this.get_center()
		var r = this.get_radius()

		var border = []
		var N = Math.max(16, r * 16)
		for (var i = 0; i < N; i = i + 1)
		{
			var angle = Math.pi() * 2 / N * i
			var x = r * Math.cos(angle)
			var y = r * Math.sin(angle)
			points.add(Vector3(x, 0, y))

			border.add(i)
		}

		faces.add(border)
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/circle_edit.ves")
		}

		var x = this.query_param("x").value
		var y = this.query_param("y").value
		var r = this.query_param("r").value
		this.editor_center.value.set(x, y)
		this.editor_outer.value.set(x + r, y)

		Blueprint.connect(this.editor_center.exports[0], EDITOR.editor_node.imports[1])
		Blueprint.connect(this.editor_outer.exports[0], EDITOR.editor_node.imports[2])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.params[0].value = this.editor_center.value.x
		this.params[1].value = this.editor_center.value.y
		this.params[2].value = Calc.dis_pos_to_pos(this.editor_center.value, this.editor_outer.value)

		Blueprint.send_pin_dirty_root(this.exports[0])
	}
}