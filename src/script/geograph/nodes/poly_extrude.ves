import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_ARRAY
import "blueprint.node_param" for NodeParam
import "blueprint.node_helper" for NodeHelper
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "geometry" for ShapeMaths

class PolyExtrude is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo",      VAR_TYPE_GEO),
			Pin(this, "distance", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("distance", 0.0, { "region" : 10 }))

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var dist = NodeHelper.calc_prop_value(this, "distance")

		var out = []
		this.calc_extrude(v_geo, dist, out)
		if (out.count == 0) {
			return nil
		} else if (out.count == 1) {
			return out[0]
		} else {
			return Variant(out)
		}
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_poly = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_dist = NodeHelper.calc_prop_opcodes(this, "distance", compiler, opcodes)

		opcodes.polytope_extrude(r_poly, r_dist)

		compiler.free_reg(r_dist)		

		return r_poly
	}

	calc_extrude(geo, dist, out)
	{
		if (geo.type == VAR_TYPE_ARRAY)
		{
			var list = []
			for (var v in geo.value) {
				this.calc_extrude(v, dist, list)
			}
			out.add(Variant(list))
		}
		else if (geo.type == VAR_TYPE_GEO)
		{
			var shape = geo.value.shape
			if (shape is Brush)
			{
				for (var poly in shape.polys) 
				{
					var new_poly = poly.clone()
					new_poly.extrude(dist)

					var geo = VarGeo()
					geo.shape = Brush([ new_poly ])
					out.add(Variant(VAR_TYPE_GEO, geo))
				}
			}
			else
			{
				var poly = ShapeMaths.extrude(shape, dist)

				var geo = VarGeo()
				geo.shape = Brush([ poly ])
				out.add(Variant(VAR_TYPE_GEO, geo))
			}
		}
	}
}