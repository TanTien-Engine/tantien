import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.nodes.array" for Array
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER2
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.config" for POINT_RADIUS
import "geometry" for Polyline as tt_Polyline, Circle

var EDITOR = nil

class Polyline is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "vertices", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("vertices", []))
		this.params.add(NodeParam("closed", false))

		this.layout()

		this.editor_polyline = Array()
	}

	calc_value(idx)
	{
		var geo = VarGeo()
		geo.shape = tt_Polyline.init()
		this.update_geo(geo)
		return Variant(VAR_TYPE_GEO, geo)
	}

	update_geo(geo)
	{
		var v_verts = Blueprint.calc_input_value(this, 0)
		if (v_verts)
		{
			if (v_verts.type != VAR_TYPE_ARRAY or v_verts.value.isEmpty) {
				return
			}

			var type = v_verts.value[0].type
			if (type == VAR_TYPE_NUMBER2)
			{
				var vertices = []
				for (var vert in v_verts.value) {
					vertices.add(vert.value.x)
					vertices.add(vert.value.y)
				}
				geo.shape.set_vertices(vertices)
			}
			else if (type == VAR_TYPE_GEO)
			{
				var vertices = []
				for (var shape in v_verts.value) 
				{
					var circle = shape.value.shape.get()
					vertices.add(circle[0])
					vertices.add(circle[1])
				}
				geo.shape.set_vertices(vertices)
			}
		}
		else
		{
			var vertices = this.query_param("vertices").value
			geo.shape.set_vertices(vertices)
		}

		geo.shape.set_closed(this.query_param("closed").value)
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/polyline_edit.ves")
		}

		this.editor_polyline.list.clear()
		for (var i = 0; i < this.params[0].value.count; i = i + 2)
		{
			var x = this.params[0].value[i]
			var y = this.params[0].value[i + 1]

			var geo = VarGeo()
			geo.shape = Circle.init(x, y, POINT_RADIUS)
			this.editor_polyline.list.add(Variant(VAR_TYPE_GEO, geo))
		}

		Blueprint.connect(this.editor_polyline.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)

		this.editor_flush()
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)

		this.editor_flush()
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.editor_flush()
	}

	on_mouse_moved(x, y, btn) 
	{
		EDITOR.on_mouse_moved(x, y, btn)
	}

	editor_flush()
	{
		var circles = this.editor_polyline.list

		this.params[0].value.clear()
		for (var circle in circles) 
		{
			var c = circle.value.shape.get()
			this.params[0].value.add(c[0])
			this.params[0].value.add(c[1])
		}

		Blueprint.send_pin_dirty_root(this.exports[0])
	}
}