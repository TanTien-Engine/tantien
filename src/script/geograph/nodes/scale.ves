import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3
import "geograph.variant" for VAR_TYPE_GEO
import "geograph.brush" for Brush, BrushInstanced
import "maths.vector" for Vector3
import "maths" for Matrix44, Float3

class Scale is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "xyz", [ VAR_TYPE_NUMBER3, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var result = []

		var v_xyz = Blueprint.calc_input_value(this, 1)
		if (v_xyz.type == VAR_TYPE_ARRAY)
		{
			for (var p in v_xyz.value) {
				var mat = this.calc_mat(p.value)
				this.translate_impl(v_geo, mat, result)
			}
		}
		else
		{
			var mat = this.calc_mat(v_xyz.value)
			this.translate_impl(v_geo, mat, result)
		}
		
		if (result.count == 0) {
			return nil
		} else if (result.count == 1) {
			return result[0]
		} else {
			return Variant(result)
		}
	}

	calc_mat(pos)
	{
		var x = 0
		var y = 0
		var z = 0

		if (pos) {
			x = pos.x
			y = pos.y
			z = pos.z
		}

		var mat = Matrix44.init()
		mat.scale(x, y, z)

		return mat
	}

	translate_impl(v_geo, mat, result)
	{
		if (v_geo.type == VAR_TYPE_ARRAY) 
		{
			var list = []
			for (var v in v_geo.value) {
				this.translate_impl(v, mat, list)
			}
			result.add(Variant(list))
		} 
		else if (v_geo.type == VAR_TYPE_GEO) 
		{
			result.add(this.translate_geo(v_geo.value, mat))
		} 
		else if (v_geo.type == VAR_TYPE_NUMBER3) 
		{
			result.add(this.translate_num3(v_geo.value, mat))	
		}
	}

	translate_geo(geo, mat)
	{
		var new_brush = geo.clone()
		if (new_brush.shape is Brush) {
			new_brush.shape.transform(mat)
		} else if (new_brush.shape is BrushInstanced) {
			new_brush.shape.brush.transform(mat)
		}
		return Variant(VAR_TYPE_GEO, new_brush)
	}

	translate_num3(num3, mat)
	{
		var p = Float3.init(num3.x, num3.y, num3.z)
		p.transform(mat)
		return Variant(Vector3(p.x(), p.y(), p.z()))
	}
}