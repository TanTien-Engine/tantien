import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_ARRAY
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "geograph.compiler" for PolytopeBuilder2
import "geograph.poly_builder" for PolyBuilder
import "geometry" for Rect, Circle, Polygon, PolyPoint
import "maths.vector" for Vector2, Vector3
import "math" for Math

class Column is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "base",   VAR_TYPE_GEO),
			Pin(this, "top",    VAR_TYPE_GEO),			
			Pin(this, "height", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("height", 1.0, { "region" : 10 }))
		this.params.add(NodeParam("generatrix", []))
		this.params.add(NodeParam("offset_z_absolute", false))

		this.layout()
	}

	calc_value(idx)
	{
		var v_base = Blueprint.calc_input_value(this, 0)
		if (!v_base or !v_base.value) {
			return nil
		}

		var v_top = Blueprint.calc_input_value(this, 1)
		if (v_top and v_top.value) {
			if (v_base.value.shape is Rect and v_top.value.shape is Rect) {
				return this.build_from_2_rect(v_base.value.shape, v_top.value.shape)
			}
		}

		var points = []
		var faces = []
		this.calc_poly(v_base, points, faces)
		if (points.isEmpty or faces.isEmpty) {
			return nil
		}

		return this.build_poly(points, faces)
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var v_base = Blueprint.calc_input_value(this, 0)
		if (!v_base or !v_base.value) {
			return -1
		}

		var points = []
		var faces = []

		this.calc_poly(v_base, points, faces)
		if (points.isEmpty or faces.isEmpty) {
			return -1
		}

		return PolyBuilder.build_poly_opcodes(compiler, opcodes, points, faces)
	}

	build_poly(points, faces)
	{
		var poly = PolyBuilder.build_poly(points, faces)

		var geo = VarGeo()
		geo.shape = Brush([ poly ])
		return Variant(VAR_TYPE_GEO, geo)
	}

	build_from_2_rect(bottom, top)
	{
		var b_rect = bottom.get()
		var b_lead = [
			Vector2(b_rect[0], b_rect[1]),
			Vector2(b_rect[0] + b_rect[2], b_rect[1]),
			Vector2(b_rect[0] + b_rect[2], b_rect[1] + b_rect[3]),
			Vector2(b_rect[0], b_rect[1] + b_rect[3]),	
		]

		var t_rect = top.get()
		var t_lead = [
			Vector2(t_rect[0], t_rect[1]),
			Vector2(t_rect[0] + t_rect[2], t_rect[1]),
			Vector2(t_rect[0] + t_rect[2], t_rect[1] + t_rect[3]),
			Vector2(t_rect[0], t_rect[1] + t_rect[3]),	
		]

		var points = []

		var h = this.calc_height()
		for (var i = 0; i < 4; i = i + 1) {
			points.add(PolyPoint.init([ b_lead[i].x, 0, b_lead[i].y ]))
			points.add(PolyPoint.init([ t_lead[i].x, h, t_lead[i].y ]))
		}

		return this.build_poly(points, 4, 2)
	}

	calc_height()
	{
		var height = 0
		var v_height = Blueprint.calc_input_value(this, 2)
		if (v_height) {
			height = v_height.value
		} else {
			height = this.query_param("height").value
		}
		return height
	}

	calc_lead(v_base)
	{
		var lead = []

		var cx = 0
		var cy = 0
		
		var shape = v_base.value.shape
		if (shape is Rect)
		{
			var rect = shape.get()
			lead = [
				Vector2(rect[0], rect[1]),
				Vector2(rect[0] + rect[2], rect[1]),				
				Vector2(rect[0] + rect[2], rect[1] + rect[3]),
				Vector2(rect[0], rect[1] + rect[3]),
			]

			cx = rect[0] + rect[2] * 0.5
			cy = rect[1] + rect[3] * 0.5
		}
		else if (shape is Circle) 
		{
			var circle = shape.get()

			var c = Vector2(circle[0], circle[1])
			var r = circle[2]

			var N = Math.max(16, r * 16)
			for (var i = 0; i < N; i = i + 1)
			{
				var angle = Math.pi() * 2 / N * i
				var x = c.x + r * Math.cos(angle)
				var y = c.y + r * Math.sin(angle)
				lead.add(Vector2(x, y))
			}

			cx = c.x
			cy = c.y
		}
		else if (shape is Polygon) 
		{
			var verts = shape.get_vertices()
			for (var i = 0; i < verts.count; i = i + 2)
			{
				var x = verts[i]
				var y = verts[i + 1]
				lead.add(Vector2(x, y))
			}			
		}

		return lead
	}

	calc_bus()
	{
		var bus = nil
		var p_bus = this.query_param("generatrix").value
		if (!p_bus.isEmpty) 
		{
			bus = []
			for (var i = 0; i < p_bus.count; i = i + 2) 
			{
				var h = p_bus[i]
				var r = p_bus[i + 1]
				bus.add(Vector2(h, r))
			}
		}
		return bus
	}

	calc_poly(v_base, points, faces)
	{
		var lead = this.calc_lead(v_base)
		if (lead.isEmpty) {
			return nil
		}

		var height = this.calc_height()

		var lead_num = lead.count

		var bus = this.calc_bus()
		var bus_num = 2
		if (bus) {
			bus_num = bus.count
		}

		this.calc_poly_points(bus, lead, height, points)
		this.calc_poly_faces(lead_num, bus_num, faces)
	}

	calc_poly_points(bus, lead, height, points)
	{
		if (bus)
		{
			var dx = this.query_param("offset_z_absolute").value

			for (var p in lead) 
			{
				for (var b in bus)
				{
					var h = b.x
					var r = b.y

					var x = p.x
					var z = p.y
					var y = height * h

					if (dx) {
						z = z + r
					} else {
						x = x * r
						z = z * r
					}

					points.add(Vector3(x, y, z))
				}
			}
		}
		else
		{
			for (var p in lead) {
				points.add(Vector3(p.x, 0, p.y))
				points.add(Vector3(p.x, height, p.y))
			}
		}
	}

	calc_poly_faces(lead_num, bus_num, faces)
	{
		// bottom
		var bottom = []
		for (var i in 0..lead_num) {
			bottom.add(i * bus_num)
		}
		faces.add(bottom)

		// top
		var top = []
		for (var i in 0..lead_num) {
			top.add(i * bus_num + bus_num - 1)
		}
		top.reverse()
		faces.add(top)

		// sides
		for (var b in 0..bus_num - 1)
		{
			for (var i in 0..lead_num)
			{
				var side = []

				var j = i + 1
				if (j >= lead_num) {
					j = j - lead_num
				}

				side.add(b + i * bus_num)
				side.add(b + i * bus_num + 1)
				side.add(b + j * bus_num + 1)
				side.add(b + j * bus_num)

				faces.add(side)
			}
		}
	}
}