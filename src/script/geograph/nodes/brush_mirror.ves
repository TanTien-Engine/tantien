import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VAR_TYPE_PLANE, VarGeo
import "geograph.brush" for Brush

class BrushMirror is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "plane", VAR_TYPE_PLANE),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var v_plane = Blueprint.calc_input_value(this, 1)
		if (!v_plane) {
			return nil
		}

		var out = []
		this.calc_mirror(v_geo, v_plane.value, out)
		if (out.count == 1) {
			return out[0]
		} else {
			return Variant(out)
		}
	}

	calc_mirror(v_geo, plane, out)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			var list = []
			for (var v in v_geo.value) {
				this.calc_mirror(v, plane, list)
			}
			out.add(Variant(list))
		}
		else if (v_geo.type == VAR_TYPE_GEO and v_geo.value.shape is Brush)
		{
			var shape = v_geo.value.shape.clone()
			shape.mirror(plane)
			
			var new = VarGeo()
			new.shape = shape
			out.add(Variant(VAR_TYPE_GEO, new))
		}
	}
}