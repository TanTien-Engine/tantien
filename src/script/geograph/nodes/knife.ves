import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VAR_TYPE_PLANE, VarGeo

class Knife is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo",   [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "plane", VAR_TYPE_PLANE),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("keep", "above", { "combo" : [ "above", "below", "all" ] }))
		this.params.add(NodeParam("seam", false))

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var v_plane = Blueprint.calc_input_value(this, 1)
		if (!v_plane) {
			return nil
		}

		var keep = this.query_param("keep").value
		var seam = this.query_param("seam").value

		var out = []
		this.calc_clip(v_geo, v_plane.value, keep, seam, out)
		if (out.count == 1) {
			return out[0]
		} else {
			return Variant(out)
		}
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_geo = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_plane = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)

		var keep = this.query_param("keep").value
		var seam = this.query_param("seam").value

		var i_keep = 0
		if (keep == "above") {
			i_keep = 0
		} else if (keep == "below") {
			i_keep = 1
		} else if (keep == "all") {
			i_keep = 2
		}

		var i_seam = 0
		if (seam) {
			i_seam = 1
		}

		opcodes.polytope_clip(r_geo, r_plane, i_keep, i_seam)

		compiler.free_reg(r_plane)

		return r_geo
	}

	calc_clip(geo, plane, keep, seam, out)
	{
		if (geo.type == VAR_TYPE_ARRAY)
		{
			var list = []
			for (var v in geo.value) {
				this.calc_clip(v, plane, keep, seam, list)
			}
			out.add(Variant(list))
		}
		else
		{
			var shape = geo.value.shape.clone()
			shape.clip(plane, keep, seam)
			
			var geo = VarGeo()
			geo.shape = shape
			out.add(Variant(VAR_TYPE_GEO, geo))
		}
	}
}