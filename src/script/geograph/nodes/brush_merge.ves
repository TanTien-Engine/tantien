import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush, BrushInstanced

class BrushMerge is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "list", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "brush", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ])
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_list = Blueprint.calc_input_value(this, 0)
		if (!v_list) {
			return nil
		}

		var instanced = []
		var polys   = []
		var mats    = []
		var offsets = []
		var colors  = []
		this.add_to_list(instanced, polys, mats, offsets, colors, v_list)

		var brush = Brush(polys)

		brush.materials = List.filled(mats.count, 0)
		for (var i = 0; i < mats.count; i = i + 1) {
			brush.materials[i] = mats[i]
		}

		brush.offsets = List.filled(offsets.count, 0)
		for (var i = 0; i < offsets.count; i = i + 1) {
			brush.offsets[i] = offsets[i]
		}

		brush.colors = List.filled(colors.count, 0)
		for (var i = 0; i < colors.count; i = i + 1) {
			brush.colors[i] = colors[i]
		}

		var ret = []		

		if (!polys.isEmpty) {
			var geo = VarGeo()
			geo.shape = brush
			ret.add(Variant(VAR_TYPE_GEO, geo))
		}
		for (var inst in instanced) {
			ret.add(inst)
		}

		if (ret.count == 1) {
			return ret[0]
		} else if (ret.count > 1) {
			return Variant(ret)
		}

		return nil		
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		return Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
	}

	add_to_list(dst_instanced, dst_poly, dst_mat, dst_offset, dst_color, src)
	{
		if (src.type == VAR_TYPE_ARRAY) 
		{
			for (var v in src.value) {
				this.add_to_list(dst_instanced, dst_poly, dst_mat, dst_offset, dst_color, v)
			}
		} 
		else if (src.type == VAR_TYPE_GEO) 
		{
			var brush = src.value.shape
			if (brush is Brush) 
			{
				for (var p in brush.polys) {
					dst_poly.add(p)
				}

				if (!brush.materials) 
				{
					for (var i = 0; i < brush.polys.count; i = i + 1) {
						dst_mat.add(0)
					}
				}
				else
				{
					for (var i in brush.materials) {
						dst_mat.add(i)
					}
				}

				if (!brush.offsets) 
				{
					for (var i = 0; i < brush.polys.count; i = i + 1) {
						dst_offset.add(0)
					}
				}
				else
				{
					for (var i in brush.offsets) {
						dst_offset.add(i)
					}
				}

				if (!brush.colors) 
				{
					var rgb = brush.color.x * 256 * 256 + brush.color.y * 256 + brush.color.z
					for (var i = 0; i < brush.polys.count; i = i + 1) {
						dst_color.add(rgb)
					}
				}
				else
				{
					for (var i in brush.colors) {
						dst_color.add(i)
					}
				}
			}
			else if (brush is BrushInstanced)
			{
				dst_instanced.add(src)
			}
		}
	}
}