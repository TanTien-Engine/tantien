import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.nodes.number2" for Number2
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.blueprint" for Blueprint
import "blueprint.dirty_types" for DIRTY_EDITOR
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "geograph.compiler" for PolytopeBuilder2
import "geograph.poly_builder" for PolyBuilder
import "geometry" for Rect as tt_Rect
import "maths.vector" for Vector3

var EDITOR = nil

class Rect is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "pos",  VAR_TYPE_NUMBER2),
			Pin(this, "size", VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo",      VAR_TYPE_GEO),
			Pin(this, "polytope", VAR_TYPE_GEO),
		]

		// shape
		this.params.add(NodeParam("x", 0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("y", 0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("w", 100, { "min" : 0.001, "region" : 1000 }))
		this.params.add(NodeParam("h", 100, { "min" : 0.001, "region" : 1000 }))
		this.params.add(NodeParam("offset", false))

		// draw
		this.params.add(NodeParam("fill", false))
		this.params.add(NodeParam("color", Vector3(1.0, 0.0, 0.0)))

		this.layout()

		this.editor_in_min = Number2()
		this.editor_in_max = Number2()
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var geo = VarGeo()
			geo.shape = tt_Rect.init()
			this.update_geo(geo)
			return Variant(VAR_TYPE_GEO, geo)
		}
		else if (idx == 1)
		{
			var params = this.calc_rect_params()

			var points = []
			points.add(Vector3(params[0],             0, params[1]            ))
			points.add(Vector3(params[0],             0, params[1] + params[3]))
			points.add(Vector3(params[0] + params[2], 0, params[1] + params[3]))
			points.add(Vector3(params[0] + params[2], 0, params[1]            ))

			var faces = []
			faces.add([ 0, 1, 2, 3 ])

			var poly = PolyBuilder.build_poly(points, faces)

			var geo = VarGeo()
			geo.shape = Brush([ poly ])
			return Variant(VAR_TYPE_GEO, geo)
		}
		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (idx == 1)
		{
			var params = this.calc_rect_params()

    		var builder = PolytopeBuilder2(compiler, opcodes)

    		builder.begin()

			builder.add_point(params[0],             0, params[1]            )
			builder.add_point(params[0],             0, params[1] + params[3])
			builder.add_point(params[0] + params[2], 0, params[1] + params[3])
			builder.add_point(params[0] + params[2], 0, params[1]            )

    		builder.add_face([ 0, 1, 2, 3 ], [])

			var poly = builder.end()
			
			return poly
		}
		else
		{
			import "logger.logger" for Logger
			Logger.error("Not Implemented!")

			return nil
		}
	}

	// x, y, w, h
	calc_rect_params()
	{
		var x = 0
		var y = 0
		var v_pos = Blueprint.calc_input_value(this, 0)
		if (v_pos) {
			x = v_pos.value.x
			y = v_pos.value.y
		} else {
			x = this.query_param("x").value
			y = this.query_param("y").value
		}

		var w = 0
		var h = 0
		var v_size = Blueprint.calc_input_value(this, 1)
		if (v_size) {
			w = v_size.value.x
			h = v_size.value.y
		} else {
			w = this.query_param("w").value
			h = this.query_param("h").value
		}

		if (w < 0) {
			x = x + w
			w = -w
		}
		if (h < 0) {
			y = y + h
			h = -h
		}

		var offset = this.query_param("offset").value
		if (offset) {
			x = x - w * 0.5
			y = y - h * 0.5			
		}

		return [ x, y, w, h ]
	}	

	update_geo(geo)
	{
		var params = this.calc_rect_params()
		geo.shape.set(params[0], params[1], params[2], params[3])

		geo.render_style["fill"] = this.query_param("fill").value
		geo.render_style["color"] = this.query_param("color").value
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/rect_edit.ves")
		}

		var x = this.query_param("x").value
		var y = this.query_param("y").value
		var w = this.query_param("w").value
		var h = this.query_param("h").value
		this.editor_in_min.value.set(x, y)
		this.editor_in_max.value.set(x + w, y + h)

		Blueprint.connect(this.editor_in_min.exports[0], EDITOR.editor_node.imports[1])
		Blueprint.connect(this.editor_in_max.exports[0], EDITOR.editor_node.imports[2])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.params[0].value = this.editor_in_min.value.x
		this.params[1].value = this.editor_in_min.value.y
		this.params[2].value = this.editor_in_max.value.x - this.editor_in_min.value.x
		this.params[3].value = this.editor_in_max.value.y - this.editor_in_min.value.y

		Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_EDITOR)
	}
}