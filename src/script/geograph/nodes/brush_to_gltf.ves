import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_TABLE, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO
import "geograph.brush" for Brush, BrushInstanced
import "geograph.surface" for Surface

class BrushToGltf is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "brush", VAR_TYPE_GEO),
		]
		this.exports = [
			Pin(this, "gltf",      VAR_TYPE_TABLE),
			Pin(this, "inst_mats", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("adjacencies", false))

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or v_geo.type != VAR_TYPE_GEO) {
			return nil
		}

		var adjacencies = this.query_param("adjacencies").value

		var brush = v_geo.value.shape
		if (idx == 0)
		{
			if (brush is Brush)
			{
				if (!brush.vbo) {
					brush.vbo = brush.get_model(adjacencies)
				}
				if (brush.vbo) {
					return Variant(brush.vbo.get_desc())
				}
			}
			else if (brush is BrushInstanced)
			{
				if (!brush.vbo) {
					brush.brush.vbo = brush.brush.get_model(adjacencies)
				}
				if (brush.brush.vbo)
				{
					if (!brush.brush.instanced_inited) {
						brush.brush.vbo.set_instanced_mats(brush.transforms)
						brush.brush.instanced_inited = true
					}
					return Variant(brush.brush.vbo.get_desc())
				}
			}
			else if (brush is Surface)
			{
				var gltf = brush.get_model()
				if (gltf) {
					var gltf_desc = gltf.get_desc()
					return Variant(gltf_desc)
				}
			}
		}
		else if (idx == 1)
		{
			if (brush is BrushInstanced) {
				return Variant(brush.transforms)
			}
		}

		return nil
	}	
}