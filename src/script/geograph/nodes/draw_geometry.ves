import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_ARRAY, VAR_TYPE_PORT, VAR_TYPE_RECT, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_MATRIX4
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.config" for POINT_RADIUS
import "geograph.brush" for BrushParts
import "graphics" for Painter, Graphics
import "geometry" for Line, Rect, Circle, Arc, Polyline, Polygon, Box, Line3D, Polyline3D, Polygon3D
import "maths.vector" for Vector2, Vector3
import "maths.rect" for Rect as tt_Rect

class DrawGeometry is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev",    VAR_TYPE_PORT),
			Pin(this, "geos",  [ VAR_TYPE_NUMBER2, VAR_TYPE_RECT, VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "color",   VAR_TYPE_NUMBER3),
			Pin(this, "cam_mat", VAR_TYPE_MATRIX4),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.params.add(NodeParam("skip", false))

		this.layout()
	}

	render_run() 
	{
		if (this.query_param("skip").value) {
			return
		}

		var v_geos = Blueprint.calc_input_value(this, 1)
		if (!v_geos or !v_geos.value) {
			return
		}

		var color = nil
		var v_color = Blueprint.calc_input_value(this, 2)
		if (v_color) {
			color = v_color.value
		}

		var mat = nil
		var v_mat = Blueprint.calc_input_value(this, 3)
		if (v_mat) {
			mat = v_mat.value
		}

		var pt = Painter.init()
		this.draw_geo(pt, v_geos, color, mat)

		Graphics.draw_painter(pt)
	}

	draw_geo(pt, v_geo, color, mat)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var v in v_geo.value) {
				this.draw_geo(pt, v, color, mat)
			}
		}
		else
		{
			var geo = v_geo.value
			if (geo is VarGeo) {
				this.draw_geo_shape(pt, geo, color, mat)
			} else {
				this.draw_prim_val(pt, geo, color, mat)
			}
		}
	}

	draw_prim_val(pt, geo, color, mat)
	{
		if (!color) {
			color = Vector3(1.0, 0.0, 0.0)
		}
		var col_array = [255 * color.x, 255 * color.y, 255 * color.z, 255]

		if (geo is Vector2)
		{
			pt.add_circle_filled(mat, geo.x, geo.y, POINT_RADIUS, col_array, 24)
		}
		else if (geo is Vector3)
		{
			pt.add_point3d(mat, [ geo.x, geo.y, geo.z ], col_array, POINT_RADIUS)
		}
		else if (geo is tt_Rect)
		{
			pt.add_rect(mat, [ geo.x, geo.y, geo.w, geo.h ], col_array, 2)
		}
	}

	draw_geo_shape(pt, geo, color, mat)
	{
		if (!color) {
			color = geo.render_style["color"]
		}
		if (!color) {
			color = Vector3(1.0, 0.0, 0.0)
		}
		var col_array = [255 * color.x, 255 * color.y, 255 * color.z, 255]

		var shape = geo.shape
		if (shape is Line) {
			this.draw_line(pt, geo, col_array, mat)
		} else if (shape is Rect) {
			this.draw_rect(pt, geo, col_array, mat)
		} else if (shape is Circle) {
			this.draw_circle(pt, geo, col_array, mat)
		} else if (shape is Arc) {
			this.draw_arc(pt, geo, col_array, mat)
		} else if (shape is Polyline) {
			this.draw_polyline(pt, geo, col_array, mat)
		} else if (shape is Polygon) {
			this.draw_polygon(pt, geo, col_array, mat)
		} else if (shape is Box) {
			this.draw_box(pt, geo, col_array, mat)
		} else if (shape is Line3D) {
			this.draw_line3d(pt, geo, col_array, mat)
		} else if (shape is Polyline3D) {
			this.draw_polyline3d(pt, geo, col_array, mat)
		} else if (shape is Polygon3D) {
			this.draw_polygon3d(pt, geo, col_array, mat)
		} else if (shape is BrushParts) {
			this.draw_brush_parts(pt, shape, col_array, mat)
		}		
	}

	draw_line(pt, geo, col, mat)
	{
		var line = geo.shape.get()
		if (geo.pos) {
			line[0] = line[0] + geo.pos[0]
			line[1] = line[1] + geo.pos[1]
			line[2] = line[2] + geo.pos[0]
			line[3] = line[3] + geo.pos[1]
		}

		pt.add_line(mat, line, col, 2)
	}

	draw_rect(pt, geo, col, mat)
	{
		var rect = geo.shape.get()
		var fill = geo.render_style["fill"]
		if (geo.angle == 0)
		{
			if (geo.pos) {
				rect[0] = rect[0] + geo.pos[0]
				rect[1] = rect[1] + geo.pos[1]
			}
			if (fill) {
				pt.add_rect_filled(mat, rect, col)
			} else {
				pt.add_rect(mat, rect, col, 2)	
			}
		}
		else
		{
			var quad = [
				Vector2(rect[0], rect[1]),
				Vector2(rect[0], rect[1] + rect[3]),
				Vector2(rect[0] + rect[2], rect[1] + rect[3]),
				Vector2(rect[0] + rect[2], rect[1]),
			]
			// rotate
			for (var v in quad) {
				v.rotate(geo.angle)
			}
			// translate
			if (geo.pos) 
			{
				for (var v in quad) {
					v.x = v.x + geo.pos[0]
					v.y = v.y + geo.pos[1]
				}
			}

			var vertices = []
			for (var v in quad) {
				vertices.add(v.x)
				vertices.add(v.y)
			}
			if (fill) {
				pt.add_polygon_filled(mat, vertices, col)
			} else {
				pt.add_polygon(mat, vertices, col, 2)
			}
		}
	}

	draw_circle(pt, geo, col, mat)
	{
		var circle = geo.shape.get()

		var center = Vector2(circle[0], circle[1])
		center.rotate(geo.angle)
		if (geo.pos) {
			center.x = center.x + geo.pos[0]
			center.y = center.y + geo.pos[1]
		}

		var radius = circle[2]

		var fill = geo.render_style["fill"]
		if (fill) {
			pt.add_circle_filled(mat, center.x, center.y, radius, col, 24)
		} else {
			pt.add_circle(mat, center.x, center.y, radius, col, 2.0, 24)
		}
	}

	draw_arc(pt, geo, col, mat)
	{
		var arc = geo.shape.get()

		var center = Vector2(arc[0], arc[1])
		center.rotate(geo.angle)
		if (geo.pos) {
			center.x = center.x + geo.pos[0]
			center.y = center.y + geo.pos[1]
		}

		var radius      = arc[2]
		var start_angle = arc[3]
		var end_angle   = arc[4]

		pt.add_arc(mat, center.x, center.y, radius, start_angle, end_angle, col, 2.0, 24)
	}

	draw_polyline(pt, geo, col, mat)
	{
		var verts = geo.shape.get_vertices()
		if (verts.count < 2) {
			return
		}

		if (geo.pos) {
			for (var i = 0; i < verts.count; i = i + 2) {
				verts[i] = verts[i] + geo.pos[0]
				verts[i + 1] = verts[i + 1] + geo.pos[1]
			}
		}

		if (geo.shape.get_closed()) {
			verts.add(verts[0])
			verts.add(verts[1])
		}

		pt.add_polyline(mat, verts, col, 2.0)
	}

	draw_polygon(pt, geo, col, mat)
	{
		var fill = geo.render_style["fill"]
		if (fill)
		{
			var verts = geo.shape.get_tris()

			// rotate
			if (geo.angle != 0)
			{
				for (var i = 0; i < verts.count; i = i + 2) {
					var p = Vector2(verts[i], verts[i + 1])
					p.rotate(geo.angle)
					verts[i] = p.x
					verts[i + 1] = p.y
				}
			}

			// translate
			if (geo.pos) 
			{
				for (var i = 0; i < verts.count; i = i + 2) {
					verts[i] = verts[i] + geo.pos[0]
					verts[i + 1] = verts[i + 1] + geo.pos[1]
				}
			}

			pt.add_triangles_filled(mat, verts, col)
		}
		else
		{
			 // fixme: rotate and translate

			 var verts = geo.shape.get_vertices()
			 pt.add_polygon(mat, verts, col, 2)

			 var holes = geo.shape.get_holes()
			 for (var hole in holes) {
			 	pt.add_polygon(mat, hole, col, 2)			 
			 }
		}
	}	

	draw_box(pt, geo, col, mat)
	{
		var min = geo.shape.get_min()
		var max = geo.shape.get_max()
		pt.add_cube(mat, min, max, col, 2.0)
	}

	draw_line3d(pt, geo, col, mat)
	{
		var p0 = geo.shape.get_p0()
		var p1 = geo.shape.get_p1()
		pt.add_line3d(mat, p0, p1, col, 2.0)
	}

	draw_polyline3d(pt, geo, col, mat)
	{
		var verts = geo.shape.get_vertices()
		if (verts.count < 3) {
			return
		}

		if (geo.shape.get_closed()) {
			verts.add(verts[0])
			verts.add(verts[1])
			verts.add(verts[2])
		}
		
		pt.add_polyline3d(mat, verts, col, 2.0)
	}

	draw_polygon3d(pt, geo, col, mat)
	{
		var verts = geo.shape.get_vertices()
		if (verts.count < 3) {
			return
		}

		pt.add_polygon3d_filled(mat, verts, col)
	}

	draw_brush_parts(pt, parts, col, mat)
	{
		// points
		for (var pair in parts.points)
		{
			var poly = parts.brush.polys[pair[0]]
			var point = poly.get_points()[pair[1]]
			pt.add_point3d(mat, point.get_pos(), col, 5.0)
		}

		// faces
		for (var pair in parts.faces)
		{
			var poly = parts.brush.polys[pair[0]]
			var face = poly.get_faces()[pair[1]]

			var vertices = []

			var border = face.get_border()
			var pts = poly.get_points()
			for (var i = 0; i < border.count; i = i + 1)
			{
				var pos = pts[border[i]].get_pos()
				for (var j = 0; j < 3; j = j + 1) {
					vertices.add(pos[j])
				}
			}						

			pt.add_polygon3d_filled(mat, vertices, col)			
		}
	}
}