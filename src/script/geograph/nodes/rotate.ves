import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "maths.vector" for Vector3
import "maths.compiler" for Compiler as math_Compiler
import "math" for Math
import "maths" for Matrix44, Float3

class Rotate is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_NUMBER3, VAR_TYPE_ARRAY ]),
			Pin(this, "from_dir", VAR_TYPE_NUMBER3),
			Pin(this, "to_dir",   VAR_TYPE_NUMBER3),
			Pin(this, "rot_xyz",  VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_NUMBER3, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var mat = this.calc_mat()

		var result = []
		this.rotate_impl(v_geo, mat, result)
		if (result.count == 0) {
			return nil
		} else if (result.count == 1) {
			return result[0]
		} else {
			return Variant(result)
		}
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_geo = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		if (r_geo < 0) {
			return -1
		}

		var r_xyz = Blueprint.calc_input_opcodes(this, 3, compiler, opcodes)
		if (r_xyz < 0) {
			return -1
		}

		var r_mat = math_Compiler.create_mat4(compiler, opcodes)
		opcodes.mat4_rotate(r_mat, r_xyz)

		opcodes.polytope_transform(r_geo, r_mat)

		compiler.free_reg(r_mat)

		return r_geo
	}

	calc_mat()
	{
		var mat = Matrix44.init()

		var v_xyz = Blueprint.calc_input_value(this, 3)
		if (v_xyz)
		{
			var v = v_xyz.value
			mat.rotate(v.x, v.y, v.z)
		}
		else
		{
			var v_f = Blueprint.calc_input_value(this, 1)
			var v_t = Blueprint.calc_input_value(this, 2)
			if (v_f and v_t) 
			{
				var f = v_f.value
				var t = v_t.value
				mat.from_vectors([ f.x, f.y, f.z ], [ t.x, t.y, t.z ])
			}
		}

		return mat
	}

	rotate_impl(v_geo, mat, result)
	{
		if (v_geo.type == VAR_TYPE_ARRAY) 
		{
			var list = []
			for (var v in v_geo.value) {
				this.rotate_impl(v, mat, list)
			}
			result.add(Variant(list))
		} 
		else if (v_geo.type == VAR_TYPE_GEO) 
		{
			result.add(this.rotate_geo(v_geo.value, mat))
		} 
		else if (v_geo.type == VAR_TYPE_NUMBER3) 
		{
			result.add(this.rotate_num3(v_geo.value, mat))	
		}
	}

	rotate_geo(geo, mat)
	{
		var brush = geo.shape.clone()
		brush.transform(mat)

		var new_geo = VarGeo()
		new_geo.shape = brush
		return Variant(VAR_TYPE_GEO, new_geo)
	}

	rotate_num3(num3, mat)
	{
		var p = Float3.init(num3.x, num3.y, num3.z)
		p.transform(mat)
		return Variant(Vector3(p.x(), p.y(), p.z()))
	}
}