import "maths.vector" for Vector3
import "maths.compiler" for Compiler as maths_Compiler

class Compiler
{
	static create_plane(compiler, opcodes, p0, p1, p2)
	{
		var reg = compiler.new_reg()
		if (reg < 0) {
			return -1
		}

		var reg_p0 = compiler.new_reg()
		if (reg_p0 < 0) {
			return -1
		}
		var reg_p1 = compiler.new_reg()
		if (reg_p1 < 0) {
			return -1
		}
		var reg_p2 = compiler.new_reg()
		if (reg_p2 < 0) {
			return -1
		}

		opcodes.store_vec3(reg_p0, p0)
		opcodes.store_vec3(reg_p1, p1)
		opcodes.store_vec3(reg_p2, p2)

		opcodes.create_plane(reg, reg_p0, reg_p1, reg_p2)

		compiler.free_reg(reg_p0)
		compiler.free_reg(reg_p1)
		compiler.free_reg(reg_p2)

		return reg
	}

	static create_face(compiler, opcodes, p0, p1, p2)
	{
    	var reg = compiler.new_reg()
		if (reg < 0) {
			return -1
		}

		var reg_plane = this.create_plane(compiler, opcodes, p0, p1, p2)
		if (reg_plane < 0) {
			return -1
		}

		opcodes.create_polyface(reg, reg_plane)
		compiler.free_reg(reg_plane)

		return reg
	}

	static create_face(compiler, opcodes, indices)
	{
    	var reg = compiler.new_reg()
		if (reg < 0) {
			return -1
		}

		var r_indices = compiler.new_reg()
		opcodes.create_vector(r_indices)
		for (var idx in indices)
		{
			var r_idx = compiler.new_reg()
			opcodes.store_num(r_idx, idx)

			opcodes.vector_add(r_indices, r_idx)

			compiler.free_reg(r_idx)
		}

		opcodes.create_polyface_2(reg, r_indices, -1)
		compiler.free_reg(r_indices)

		return reg
	}
}

class PolytopeBuilder
{
	init(compiler, opcodes)
	{
		this.compiler = compiler
		this.opcodes = opcodes

		this.faces = nil
	}

	begin()
	{
		this.faces = this.compiler.new_reg()
		this.opcodes.create_vector(this.faces)
	}

	add_face(p0, p1, p2)
	{
		var face = Compiler.create_face(this.compiler, this.opcodes, p0, p1, p2)
		this.opcodes.vector_add(this.faces, face)
		this.compiler.free_reg(face)
	}

	end()
	{
		var poly = this.compiler.new_reg()

		this.opcodes.create_polytope(poly, this.faces)

		this.compiler.free_reg(this.faces)

		this.faces = nil

		return poly
	}
}

class PolytopeBuilder2
{
	init(compiler, opcodes)
	{
		this.compiler = compiler
		this.opcodes = opcodes

		this.points = nil
		this.faces = nil
	}

	begin()
	{
		this.points = this.compiler.new_reg()
		this.opcodes.create_vector(this.points)

		this.faces = this.compiler.new_reg()
		this.opcodes.create_vector(this.faces)
	}

	add_point(x, y, z)
	{
		var point = maths_Compiler.create_vec3(this.compiler, this.opcodes, Vector3(x, y, z))
		this.opcodes.vector_add(this.points, point)
		this.compiler.free_reg(point)
	}

	add_face(border, holes)
	{
		var face = Compiler.create_face(this.compiler, this.opcodes, border)
		this.opcodes.vector_add(this.faces, face)
		this.compiler.free_reg(face)
	}

	end()
	{
		var poly = this.compiler.new_reg()

		this.opcodes.create_polytope_2(poly, this.points, this.faces)

		this.compiler.free_reg(this.points)
		this.compiler.free_reg(this.faces)

		this.points = nil
		this.faces = nil

		return poly
	}
}