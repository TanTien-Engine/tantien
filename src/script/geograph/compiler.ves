import "maths.vector" for Vector3
import "maths.compiler" for Compiler as maths_Compiler

class Compiler
{
	static create_plane_i(compiler, opcodes, p0, p1, p2)
	{
		var r_dst = compiler.new_reg()
		if (!r_dst) {
			return nil
		}

		var r_p0 = compiler.new_reg()
		var r_p1 = compiler.new_reg()
		var r_p2 = compiler.new_reg()

		opcodes.vec3_create_i(r_p0, p0.x, p0.y, p0.z)
		opcodes.vec3_create_i(r_p1, p1.x, p1.y, p1.z)
		opcodes.vec3_create_i(r_p2, p2.x, p2.y, p2.z)

		opcodes.create_plane(r_dst, r_p0, r_p1, r_p2)

		compiler.free_reg(r_p0)
		compiler.free_reg(r_p1)
		compiler.free_reg(r_p2)

		return r_dst
	}

	static create_face_i(compiler, opcodes, p0, p1, p2)
	{
    	var r_dst = compiler.new_reg()

    	if (r_dst)
    	{
			var r_plane = this.create_plane_i(compiler, opcodes, p0, p1, p2)
			opcodes.create_polyface(r_dst, r_plane)
			compiler.free_reg(r_plane)
    	}

		return r_dst
	}

	static create_plane_r(compiler, opcodes, r_p0, r_p1, r_p2)
	{
		var r_dst = compiler.new_reg()

		if (r_dst) {
			opcodes.create_plane(r_dst, r_p0, r_p1, r_p2)
		}

		return r_dst
	}

	static create_face_r(compiler, opcodes, p0, p1, p2)
	{
    	var r_dst = compiler.new_reg()

    	if (r_dst)
    	{
			var r_plane = this.create_plane_r(compiler, opcodes, p0, p1, p2)
			opcodes.create_polyface(r_dst, r_plane)
			compiler.free_reg(r_plane)
    	}

		return r_dst
	}

	static create_face(compiler, opcodes, indices)
	{
    	var r_dst = compiler.new_reg()
    	if (!r_dst) {
    		return nil
    	}

		var r_indices = compiler.new_reg()
		opcodes.create_vector(r_indices)
		for (var idx in indices)
		{
			var r_idx = maths_Compiler.create_number(compiler, opcodes, idx)
			opcodes.vector_add(r_indices, r_idx)
			compiler.free_reg(r_idx)
		}

		opcodes.create_polyface_2(r_dst, r_indices, -1)
		compiler.free_reg(r_indices)

		return r_dst
	}
}

class PolytopeBuilder
{
	init(compiler, opcodes)
	{
		this.compiler = compiler
		this.opcodes = opcodes

		this.faces = nil
	}

	begin()
	{
		this.faces = this.compiler.new_reg()
		this.opcodes.create_vector(this.faces)
	}

	add_face_i(p0, p1, p2)
	{
		var face = Compiler.create_face_i(this.compiler, this.opcodes, p0, p1, p2)
		this.opcodes.vector_add(this.faces, face)
		this.compiler.free_reg(face)
	}

	add_face_r(p0, p1, p2)
	{
		var face = Compiler.create_face_r(this.compiler, this.opcodes, p0, p1, p2)
		this.opcodes.vector_add(this.faces, face)
		this.compiler.free_reg(face)
	}

	end()
	{
		var poly = this.compiler.new_reg()

		this.opcodes.create_polytope(poly, this.faces)

		this.compiler.free_reg(this.faces)

		this.faces = nil

		return poly
	}
}

class PolytopeBuilder2
{
	init(compiler, opcodes)
	{
		this.compiler = compiler
		this.opcodes = opcodes

		this.points = nil
		this.faces = nil
	}

	begin()
	{
		this.points = this.compiler.new_reg()
		this.opcodes.create_vector(this.points)

		this.faces = this.compiler.new_reg()
		this.opcodes.create_vector(this.faces)
	}

	add_point(x, y, z)
	{
		var point = maths_Compiler.create_vec3(this.compiler, this.opcodes, Vector3(x, y, z))
		this.opcodes.vector_add(this.points, point)
		this.compiler.free_reg(point)
	}

	add_face(border, holes)
	{
		var face = Compiler.create_face(this.compiler, this.opcodes, border)
		this.opcodes.vector_add(this.faces, face)
		this.compiler.free_reg(face)
	}

	end()
	{
		var poly = this.compiler.new_reg()

		this.opcodes.create_polytope_2(poly, this.points, this.faces)

		this.compiler.free_reg(this.points)
		this.compiler.free_reg(this.faces)

		this.points = nil
		this.faces = nil

		return poly
	}
}