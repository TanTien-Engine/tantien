import "math" for Math
import "maths.vector" for Vector2
import "maths" for Float2
import "blueprint.blueprint" for Blueprint
import "blueprint.node_render" for NodeRender
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.node_param" for NodeParam
import "blueprint.pin_color_map" for PIN_COLOR_MAP
import "blueprint.node_style" for COL_PANEL_BG
import "blueprint.dirty_types" for DIRTY_GUI

class Style
{
	init()
	{
		this.width = 0
		this.height = 0

		this.line_num = 0

		this.color = COL_PANEL_BG
	}
}

class Node
{
	init() 
	{
		this.imports = []
		this.exports = []

		this.style = Style()

		this.pos = Vector2()

		this.params = []

		// for aabb update
		this.aabb_dirty = false

		this.dummy = false

		this.selected = false

		this.dirty_timestamp = 0
		this.msg_timestamp = 0

		// debug
		this.calc_times = 0
		this.render_times = 0		
	}

	get_size() {
		return Vector2(this.style.width, this.style.height)
	}

	update(mt)
	{
		var pos = Float2.init()
		pos.transform(mt)
		if (this.pos.x == pos.x() and this.pos.y == pos.y()) {
			return
		}
		this.pos.x = pos.x()
		this.pos.y = pos.y()

		for (var p in this.imports) {
			for (var c in p.conns) {
				c.update()
			}
		}
		for (var p in this.exports) {
			for (var c in p.conns) {
				c.update()
			}
		}		
	}

	draw(mt, cam_mt)
	{
		NodeRender.draw_node(this)
	}

	layout()
	{
		this.style.width = 120
		this.style.height = this.calc_panel_height()

		for (var i = 0; i < this.imports.count; i = i + 1) {
			this.imports[i].is_input = true
			this.imports[i].slot_idx = i
		}
		for (var i = 0; i < this.exports.count; i = i + 1) {
			this.exports[i].is_input = false
			this.exports[i].slot_idx = i
		}

		this.aabb_dirty = true

		for (var p in this.params) {
			this.style.height = this.style.height + DEFAULT_HEIGHT * p.gui_height()
		}

		// pin color
		for (var p in this.imports) {
			this.init_pin_color(p)
		}
		for (var p in this.exports) {
			this.init_pin_color(p)
		}
	}

	init_pin_color(pin)
	{
		var type = pin.type
		if (pin.type is List) {
			type = pin.type[0]
		}	

		var col = PIN_COLOR_MAP[type]
		if (col) {
			pin.color = col
		}
	}

	to_string(name) 
	{
		var ret = ""
		for (var p in this.params) {
			ret = ret + p.to_string(name)
		}
		return ret
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var pos = Vector2()
		pos.x = this.pos.x - this.style.width * 0.5
		pos.y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		for (var p in this.params) {
			if (p.draw_gui(ctx, pos, this.style.width)) {
				dirty = true
			}
		}		

		return dirty
	}

	on_selected() { this.selected = true }
	on_deselected() { this.selected = false }

	on_connected(pin) {}
	on_disconnected(pin) {}

	on_key_pressed(key) {}
	on_key_released(key) {}
	on_mouse_pressed(x, y, btn) {}
	on_mouse_released(x, y, btn) {}
	on_mouse_moved(x, y, btn) {}
	on_mouse_dragged(x, y, btn) {}
	on_mouse_clicked(x, y, btn) {}
	on_mouse_scrolled(x, y, dx, dy) {}

	on_pin_dirty(pin, type, msg) 
	{
		var t = pin.dirty_timestamp
		if (pin.is_input) 
		{
			// one-way
			for (var p in this.imports) {
				p.dirty_timestamp = Math.max(p.dirty_timestamp, t)
			}
			for (var pin in this.exports) {
				Blueprint.send_pin_dirty(pin, type, msg)
			}
		}
		else
		{
			// one-way
			for (var p in this.exports) {
				p.dirty_timestamp = Math.max(p.dirty_timestamp, t)
			}		
			for (var pin in this.imports) {
				Blueprint.send_pin_dirty(pin, type, msg)
			}
		}
	}
	on_node_dirty() {}

	on_param_dirty()
	{
		// todo: only use pin_dirty ?
		Blueprint.send_node_dirty_root(this)
		for (var pin in this.exports) {
			Blueprint.send_pin_dirty_root(pin, DIRTY_GUI)
		}
	}

	on_scene_add(editor) {}

	calc_panel_height() {
		return DEFAULT_HEIGHT + Math.max(this.imports.count, this.exports.count) * DEFAULT_HEIGHT
	}

	disconnect()
	{
		if (this.imports.count == 1 and 
		    this.exports.count == 1 and 
		    !this.imports[0].conns.isEmpty and 
		    !this.exports[0].conns.isEmpty)
		{
			var from = this.imports[0].conns[0].from
			var to = this.exports[0].conns[0].to
			Blueprint.connect(from, to)
		}

		for (var p in this.imports) {
			while (!p.conns.isEmpty) {
				Blueprint.disconnect(p.conns.front())
			}
		}
		for (var p in this.exports) {
			while (!p.conns.isEmpty) {
				Blueprint.disconnect(p.conns.front())
			}
		}
	}

	query_param(name)
	{
		for (var p in this.params) {
			if (p.name == name) {
				return p
			}
		}	
		return nil	
	}

	get_title()
	{
		return this.get_class().name
	}

	bind_editor() { return false }
	draw_editor() {}
}