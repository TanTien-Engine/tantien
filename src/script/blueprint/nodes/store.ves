import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI

class Store is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "var", VAR_TYPE_ANY),
			Pin(this, "dst", VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "var", VAR_TYPE_ANY),
		]

		this.layout()

		this.exports[0].hide = true

		this.var_name = "store"

		this.val = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		if (pin.is_input) {
			this.clear_cache()
		}		
	}
	
	calc_value(idx)
	{
		if (!this.val) {
			this.val = Blueprint.calc_input_value(this, 0)
		}

		return this.val
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		return Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
	}
	
 	shader_gen(node, idx)
 	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var src = ShaderBuilder.gen_child(node, "var")
		var dst = ShaderBuilder.gen_child(node, "dst")
		if (dst)
		{
			var bb = node.find_value("bb")
			bb.store(dst, src)
			return dst
		}
		else
		{
			var func = node.find_value("func").impl
			return func.add_variable(this.var_name, src)
		}
 	}

	to_string(name) 
	{
		if (this.var_name == "store")
		{
			var f_pin = Blueprint.get_first_connect_pin(this.imports[0])
			if (f_pin) {
				this.var_name = f_pin.name
			}
		}

		return "
%(name).var_name = \"%(this.var_name)\"
"
	}

	get_title()
	{
		if (this.var_name == "store") {
			return super.get_title()
		} else {
			return "%(this.var_name)(S)"
		}
	}

	clear_cache()
	{
		this.val = nil
	}
}