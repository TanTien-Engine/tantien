import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NODE, VAR_TYPE_PORT, VAR_TYPE_ANY, VAR_TYPE_BOOLEAN, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "io" for IO
import "filesystem" for Filesystem
import "blueprint.nodes.input" for Input
import "blueprint.nodes.output" for Output
import "blueprint.nodes.property" for Property
import "blueprint.nodes.proxy" for Proxy
import "blueprint.nodes.camera3d" for Camera3d
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.execute_list" for ExecuteList
import "blueprint.blackboard" for BLACKBOARD
import "blueprint.dirty_types" for DIRTY_GUI
import "rendergraph.nodes.draw" for Draw
import "rendergraph.nodes.compute" for Compute
import "rendergraph.nodes.pass" for Pass
import "geograph.nodes.draw_geometry" for DrawGeometry
import "gui" for GUI
import "maths.vector" for Vector2, Vector3, Vector4
import "shader" for ShaderGen
import "editorgraph.event_types" for EVENT_MOUSE_LEFT_DOWN, EVENT_MOUSE_LEFT_UP, EVENT_MOUSE_RIGHT_DOWN, EVENT_MOUSE_RIGHT_UP, EVENT_MOUSE_LEFT_DRAG, EVENT_BLUEPRINT_CHANGED, EVENT_MOUSE_MOVE
import "gui" for MOUSE_LEFT, MOUSE_RIGHT
import "math" for Math
import "vm" for CodeStats, CodeTools

class Subgraph is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.filepath = ""
		this.file_content = nil

		this.title = ""

		this.all_items   = []
		this.out_nodes   = []
		this.prop_nodes  = []
		this.proxy_nodes = []

		this.drawlist = nil
		this.exe_list = nil
		this.trigger_list = nil

		this.op_node = nil
	}

	on_pin_dirty(pin, type)
	{
		if (pin.is_input) 
		{
			for (var item in this.all_items)
			{
				var node = item[0]
				if (node is Input and node.var_name == pin.name) {
					Blueprint.send_pin_dirty(node.exports[0], type)
					return
				}
			}
		}
	}

	on_node_dirty()
	{
		for (var item in this.all_items) {
			var node = item[0]
			if (node is Input) {
				Blueprint.send_node_dirty(node)
			}
		}
	}

	calc_value(idx)
	{
		var name = nil
		if (idx is Num) {
			name = this.exports[idx].name
		} else if (idx is String) {
			name = idx
		}
		if (!name) {
			return nil
		}

		for (var node in this.out_nodes) {
			if (node.var_name == name) {
				return Blueprint.calc_input_value(node, 0)
			}
		}
		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var name = nil
		if (idx is Num) {
			name = this.exports[idx].name
		} else if (idx is String) {
			name = idx
		}
		if (!name) {
			return -1
		}

		for (var node in this.out_nodes) 
		{
			if (node.var_name == name) 
			{
				var ori_size = CodeTools.get_size(opcodes)
				var ori_cost = CodeStats.get_cost(opcodes)

				var r_dst = Blueprint.calc_input_opcodes(node, 0, compiler, opcodes)

				var size = CodeTools.get_size(opcodes) - ori_size
				var cost = CodeStats.get_cost(opcodes) - ori_cost

				CodeStats.stat_call(opcodes, this.filepath + "    " + name + "    %(size)")

				return r_dst
			}
		}
		return -1
	}

	static has_draw_node(subgraph)
	{
		for (var item in subgraph.all_items) 
		{
			var c = item[0]
			if (c is Subgraph) {
				if (Subgraph.has_draw_node(c)) {
					return true
				}
			} else if (c is Draw or c is Compute or c is DrawGeometry or c is Pass) {
				return true
			}
		}
		return false
	}

	render_gen()
	{
		if (Subgraph.has_draw_node(this)) 
		{
			var nodes = []
			for (var item in this.all_items)
			{
				var node = item[0]
				if (node is Node) {
					nodes.add(node)
				}
			}

			import "rendergraph.drawlist" for Drawlist
			this.drawlist = Drawlist(nodes)
		}

		// setup input vars
		for (var i in 1 .. this.imports.count) 
		{
			var name = this.imports[i].name
			for (var node in this.proxy_nodes) {
				if (node.real_name == name) {
					node.real_node = Blueprint.calc_input_value(this, i).value
				}
				// todo break
			}
		}
	}

	render_run()
	{
		if (this.drawlist) {
			this.drawlist.run()
		}
	}

	execute_gen()
	{
		var nodes = []
		for (var item in this.all_items)
		{
			var node = item[0]
			if (node is Node) {
				nodes.add(node)
			}
		}

		this.exe_list = ExecuteList(nodes)

		// trigger list
		import "editorgraph.trigger_list" for TriggerList
		this.trigger_list = TriggerList([ this ])
	}	

	execute_run() 
	{
		if (this.exe_list) {
			this.exe_list.run()
		}
	}

	layout()
	{
		super.layout()

		this.style.width = 220
		//this.style.height = this.style.height + DEFAULT_HEIGHT * this.prop_nodes.count
		this.style.height = this.style.height + DEFAULT_HEIGHT * 1
	}

	to_string(name) 
	{
		var ret = ""
		if (this.file_content) 
		{
			var source = this.file_content.replace("\"", "\\\"")
			ret = ret + "
%(name).file_content = \"\n%(source)\"
%(name).load_from_string(_editor, %(name).file_content, _editor, \"subgraph\")
"
		} 
		else if (this.filepath != "") 
		{
			var absolute = Filesystem.get_absolute_path(this.filepath)
			var relative = Filesystem.get_relative_path(absolute)
			ret = ret + "%(name).load_from_file(_editor, \"%(relative)\")\n"
		}

		for (var prop in this.prop_nodes) 
		{
			var val = nil
			if (prop.value.has_method("to_list()")) {
				val = prop.value.to_list()
			} else {
				val = prop.value
			}
			ret = ret + "%(name).set_prop_value(\"%(prop.var_name)\", %(val))\n"
		}

		if (this.op_node) {
			var op_name = name + ".op_node"
			ret = ret + this.op_node.to_string(op_name)
		}

		return ret
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var REGION = 1
		for (var prop in this.prop_nodes)
		{
			var prop_dirty = false

			if (prop.var_type == VAR_TYPE_BOOLEAN)
			{
				var value = GUI.checkbox(ctx, prop.var_name, prop.value, x, y)
				if (value != prop.value) {
					prop.value = value
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
			else if (prop.var_type == VAR_TYPE_INTEGER)
			{
				var value = Math.floor(GUI.slider(ctx, prop.var_name, prop.value, x, y, this.style.width - 20, REGION, false))
				if (value != prop.value) {
					prop.value = value
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}			
			else if (prop.var_type == VAR_TYPE_NUMBER)
			{
				var value = GUI.slider(ctx, prop.var_name, prop.value, x, y, this.style.width - 20, REGION, false)
				if (value != prop.value) {
					prop.value = value
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
			else if (prop.var_type == VAR_TYPE_NUMBER2)
			{
				var vx = GUI.slider(ctx, "x", prop.value.x, x, y, this.style.width - 20, REGION, false)
				if (vx != prop.value.x) {
					prop.value.x = vx
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vy = GUI.slider(ctx, "y", prop.value.y, x, y, this.style.width - 20, REGION, false)
				if (vy != prop.value.y) {
					prop.value.y = vy
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
			else if (prop.var_type == VAR_TYPE_NUMBER3)
			{
				var vx = GUI.slider(ctx, "x", prop.value.x, x, y, this.style.width - 20, REGION, false)
				if (vx != prop.value.x) {
					prop.value.x = vx
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vy = GUI.slider(ctx, "y", prop.value.y, x, y, this.style.width - 20, REGION, false)
				if (vy != prop.value.y) {
					prop.value.y = vy
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vz = GUI.slider(ctx, "z", prop.value.z, x, y, this.style.width - 20, REGION, false)
				if (vz != prop.value.z) {
					prop.value.z = vz
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
			else if (prop.var_type == VAR_TYPE_NUMBER4)
			{
				var vx = GUI.slider(ctx, "x", prop.value.x, x, y, this.style.width - 20, REGION, false)
				if (vx != prop.value.x) {
					prop.value.x = vx
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vy = GUI.slider(ctx, "y", prop.value.y, x, y, this.style.width - 20, REGION, false)
				if (vy != prop.value.y) {
					prop.value.y = vy
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vz = GUI.slider(ctx, "z", prop.value.z, x, y, this.style.width - 20, REGION, false)
				if (vz != prop.value.z) {
					prop.value.z = vz
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vw = GUI.slider(ctx, "w", prop.value.w, x, y, this.style.width - 20, REGION, false)
				if (vw != prop.value.w) {
					prop.value.w = vw
					prop_dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}

			if (prop_dirty) 
			{
				Blueprint.send_pin_dirty_root(prop.exports[0], DIRTY_GUI)
				
				dirty = true
			}
		}

		return dirty
	}

	get_title()
	{
		return this.title
	}
	
	load_from_string(editor, str, sub_editor, module_name)
	{
		this.all_items.clear()
		this.prop_nodes.clear()
		this.proxy_nodes.clear()		
		this.out_nodes.clear()

		if (!str) {
			return false
		}

		var old_func = nil
		if (editor) {
			old_func = editor.add_node
			editor.add_node = this.add_node
		}

		var header = "import \"editor\" for _editor\n"
		if (sub_editor) {
			header = header + sub_editor.load_file_imports()
		}
		var source = header + str
		Basic.loadstring(module_name, source)

		if (editor) {
			editor.add_node = old_func
		}

		//this.render_gen()

		for (var item in this.all_items) {
			var node = item[0]
			if (node is Camera3d) {
				this.op_node = node
			}
		}

		return true
	}

	load_from_file(editor, filepath)
	{
		this.load_from_file(editor, filepath, editor)
	}

	load_from_file(editor, filepath, sub_editor)
	{
		var absolute = Filesystem.get_absolute_path(filepath)

		var old_dir = Filesystem.get_asset_base_dir()
		Filesystem.set_asset_base_dir(Filesystem.get_file_dir(absolute))
		var file = IO.open(absolute, "r")
		var body = file.read()
		IO.close(file)

		var module_name = filepath
		if (this.load_from_string(editor, body, sub_editor, module_name))
		{
			this.filepath = absolute
			this.title = Filesystem.get_filename(filepath)
		}

		if (old_dir != "") {
			Filesystem.set_asset_base_dir(old_dir)
		}

		this.rebuild_sub()
	}

	rebuild_sub()
	{
		import "blueprint.nodes.commentary" for Commentary

		for (var item in this.all_items)
		{
			var cnode = item[0]
			if (cnode is Commentary)
			{
				var r = cnode.get_comment_region(Vector2(item[1], item[2]))

				cnode.children.clear()
				for (var citem in this.all_items) {
					if (r.is_contain_pos(Vector2(citem[1], citem[2]))) {
						cnode.children.add(citem[0])
					}
				}
			}
		}
	}

	add_node(node, x, y)
	{
		this.all_items.add([node, x, y])

		var dirty = false
		if (node is Input) 
		{
			node.parent_node = this
			node.parent_pin_idx = this.imports.count

			this.imports.add(Pin(this, node.var_name, node.var_type))
			dirty = true
		} 
		else if (node is Output) 
		{
			node.parent_node = this
			node.parent_pin_idx = this.exports.count

			this.out_nodes.add(node)
			this.exports.add(Pin(this, node.var_name, node.var_type))
			dirty = true
		} 
		else if (node is Property) 
		{
			if (!node.value) 
			{
				if (node.var_type == VAR_TYPE_BOOLEAN) {
					node.value = false
				} else if (node.var_type == VAR_TYPE_INTEGER) {
					node.value = 0
				} else if (node.var_type == VAR_TYPE_NUMBER) {
					node.value = 0
				} else if (node.var_type == VAR_TYPE_NUMBER2) {
					node.value = Vector2()
				} else if (node.var_type == VAR_TYPE_NUMBER3) {
					node.value = Vector3()
				} else if (node.var_type == VAR_TYPE_NUMBER4) {
					node.value = Vector4()
				}
			}
			this.prop_nodes.add(node)
			dirty = true
		}
		else if (node is Proxy)
		{
			this.proxy_nodes.add(node)
			this.imports.add(Pin(this, node.real_name, VAR_TYPE_NODE))
			dirty = true
		}

		if (dirty) {
			this.layout()
		}
	}

	remove_node(index)
	{
		if (index < 0 or index >= this.all_items.count) {
			return false
		}

		var node = this.all_items[index][0]

		node.disconnect()
		this.all_items.removeAt(index)

		if (node is Input) 
		{
			for (var i in 0..this.imports.count) {
				if (node.var_name == this.imports[i].name) {
					this.imports.removeAt(i)
					return true
				}
			}
		}
		else if (node is Output)
		{
			for (var i in 0..this.out_nodes.count) {
				if (this.out_nodes[i] == node) {
					this.out_nodes.removeAt(i)
					this.exports.removeAt(i)
					return true
				}
			}
		}
		else if (node is Property)
		{
			for (var i in 0..this.prop_nodes.count) {
				if (this.prop_nodes[i] == node) {
					this.prop_nodes.removeAt(i)
					return true
				}
			}
		}
		else if (node is Proxy)
		{
			for (var i in 0..this.proxy_nodes.count) {
				if (this.proxy_nodes[i] == node) {
					this.proxy_nodes.removeAt(i)
				}
			}
			for (var i in 0..this.imports.count) {
				if (node.real_name == this.imports[i].name) {
					this.imports.removeAt(i)
					return true
				}
			}
		}

		return true
	}

	set_prop_value(name, value)
	{
		for (var prop in this.prop_nodes) 
		{
			if (prop.var_name == name) 
			{
				if (prop.value.has_method("from_list(_)")) {
					prop.value.from_list(value)
				} else {
					prop.value = value
				}
				return
			}
		}
	}

	on_key_pressed(key) {
		if (this.op_node) {
			this.op_node.on_key_pressed(key)
		}
	}
	on_key_released(key) {
		if (this.op_node) {
			this.op_node.on_key_released(key)
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		if (this.op_node) {
			this.op_node.on_mouse_pressed(x, y, btn)
		}

		if (this.trigger_list)
		{
			if (btn == MOUSE_LEFT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_LEFT_DOWN)
			} else if (btn == MOUSE_RIGHT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_RIGHT_DOWN)
			}
		}
	}

	on_mouse_released(x, y, btn) 
	{
		if (this.op_node) {
			this.op_node.on_mouse_released(x, y, btn)
		}

		if (this.trigger_list)
		{
			if (btn == MOUSE_LEFT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_LEFT_UP)
			} else if (btn == MOUSE_RIGHT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_RIGHT_UP)
			}
		}
	}

	on_mouse_moved(x, y, btn) 
	{
		if (this.op_node) {
			this.op_node.on_mouse_moved(x, y, btn)
		}	
	}

	on_mouse_dragged(x, y, btn) 
	{
		if (this.op_node) {
			this.op_node.on_mouse_dragged(x, y, btn)
		}

		if (this.trigger_list) 
		{
			if (btn == MOUSE_LEFT) {
				BLACKBOARD.mouse_pos.set(x, y)
				this.trigger_list.run(EVENT_MOUSE_LEFT_DRAG)
			}
		}
	}

	on_mouse_scrolled(x, y, dx, dy) {
		if (this.op_node) {
			this.op_node.on_mouse_scrolled(x, y, dx, dy)
		}	
	}

	setup_popup_nodes(editor)
	{
	}

	import_files_header()
	{
		return ""
	}

	sync_from_scene(scene)
	{
		var i_scene = 0
		var i_graph = 0
		while (i_scene < scene.nodes.count or
		       i_graph < this.all_items.count)
		{
			if (i_scene < scene.nodes.count and i_graph < this.all_items.count and 
			    scene.nodes[i_scene].components["bp"] == this.all_items[i_graph][0])
			{
				i_scene = i_scene + 1
				i_graph = i_graph + 1
			}
			else if (i_graph == this.all_items.count)
			{
				var node = scene.nodes[i_scene]
				var bp = node.components["bp"]
				var trans = node.components["transform"]
				this.add_node(bp, trans.position.x, trans.position.y)

				i_scene = i_scene + 1
				i_graph = i_graph + 1
			}
			else
			{
				this.remove_node(i_graph)
			}
		}

		// pos
		for (var i in 0..scene.nodes.count)
		{
			var src = scene.nodes[i]
			var dst = this.all_items[i]
			var trans = src.components["transform"]
			dst[1] = trans.position.x
			dst[2] = trans.position.y
		}
	}

	bind_editor()
	{
		return true
	}
}