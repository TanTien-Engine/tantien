import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_PORT, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.load" for Load
import "blueprint.nodes.boolean" for Boolean
import "blueprint.nodes.integer" for Integer
import "blueprint.nodes.number" for Number
import "blueprint.nodes.load" for Load
import "blueprint.nodes.store" for Store
import "blueprint.nodes.output" for Output

class Assignment is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "src",  VAR_TYPE_ANY),
			Pin(this, "dst",  VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT),
		]

		this.layout()
	}

	// fixme
	render_run() {
		this.execute_run()
	}

	execute_run() 
	{
		var dirty = this.assign()

		if (dirty) {
			Blueprint.send_pin_dirty_root(this.imports[2])
		}
	}

	assign()
	{
		var v_src = Blueprint.calc_input_value(this, 1)
		var v_dst = Blueprint.calc_input_value(this, 2)
		if (!v_src or !v_dst or v_src.type != v_dst.type) {
			return false
		}

		var dirty = false
		if (v_src.type == VAR_TYPE_NUMBER2)
		{
			v_dst.value.x = v_src.value.x
			v_dst.value.y = v_src.value.y
			dirty = true
		}
		else if (v_src.type == VAR_TYPE_NUMBER3)
		{
			v_dst.value.x = v_src.value.x
			v_dst.value.y = v_src.value.y
			v_dst.value.z = v_src.value.z
			dirty = true
		}
		else if (v_src.type == VAR_TYPE_NUMBER4)
		{
			v_dst.value.x = v_src.value.x
			v_dst.value.y = v_src.value.y
			v_dst.value.z = v_src.value.z
			v_dst.value.w = v_src.value.w
			dirty = true
		}
		else
		{
			var n_dst = this.get_dst_node()
			if (n_dst)
			{
				if (n_dst is Boolean) {
					n_dst.value = v_src.value
					dirty = true
				} else if (n_dst is Integer) {
					n_dst.value = v_src.value
					dirty = true
				} else if (n_dst is Number) {
					n_dst.value = v_src.value
					dirty = true
				} 
			}
		}

		return dirty
	}

	get_dst_node(dst)
	{
		if (dst is Load) 
		{
			var prev = Blueprint.get_input_node(dst, 0)
			if (prev is Store) {
				return Blueprint.get_input_node(prev, 0)
			}
		}
		else if (dst is Output)
		{
			var prev = Blueprint.get_input_node(dst.parent_node, dst.parent_pin_idx)
			if (prev) {
				return this.get_dst_node(prev)
			}
		}
		else
		{
			return dst
		}

		return nil
	}

	get_dst_node()
	{
		var n_dst = Blueprint.get_input_node(this, 2)
		if (n_dst) {
			return this.get_dst_node(n_dst)
		} else {
			return nil		
		}
	}
}