import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint
import "math" for Math

class Sqrt is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v = Blueprint.calc_input_value(this, 0)
		if (v.type == VAR_TYPE_NUMBER or v.type == VAR_TYPE_INTEGER) {
			return Variant(VAR_TYPE_NUMBER, Math.sqrt(v.value))
		}

		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_src = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		if (!r_src) {
			return nil
		}

		var r_dst = compiler.new_reg()
		if (r_dst) {
			opcodes.sqrt_num(r_dst, r_src)
		}

		compiler.free_reg(r_src)

		return r_dst
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var v = ShaderBuilder.gen_child(node, "v")
		if (v) {
			var bb = node.find_value("bb")
			return bb.sqrt(v)		
		} else {
			return nil
		}
	}
}