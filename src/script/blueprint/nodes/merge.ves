import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_helper" for NodeHelper

class Merge is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "in0", VAR_TYPE_ANY),
			Pin(this, "in1", VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "list", VAR_TYPE_ARRAY),
		]

		this.layout()
	}

	on_pin_dirty(pin, type)
	{
		if (pin == this.exports[0]) {
			for (var pin in this.imports) {
				Blueprint.send_pin_dirty(pin, type)
			}
		} else if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0], type)
		}
	}

	calc_value(idx)
	{
		var ret = []
		for (var i in 0..this.imports.count) {
			var v = Blueprint.calc_input_value(this, i)
			if (v) {
				ret.add(v)
			}
		}
		return Variant(VAR_TYPE_ARRAY, ret)
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_dst = compiler.new_reg()
		opcodes.create_vector(r_dst)

		for (var i in 0..this.imports.count) 
		{
			var r_one = Blueprint.calc_input_opcodes(this, i, compiler, opcodes)
			if (r_one >= 0) {
				opcodes.vector_concat(r_dst, r_one)
				compiler.free_reg(r_one)
			}
		}

		return r_dst
	}
	
	on_connected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this)
		}
	}

	on_disconnected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this)
		}
	}
}