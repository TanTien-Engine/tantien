import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.blueprint" for Blueprint
import "blueprint.dirty_types" for DIRTY_OPCODES, DIRTY_COMPILE
import "blueprint.msg_types" for Message, UPDATE_OPCODES
import "maths.compiler" for Compiler as maths_Compiler
import "gui" for GUI
import "vm" for CodeTools

class Number is Node
{
	init() 
	{
		super.init()

		this.exports = [
			Pin(this, "v", VAR_TYPE_NUMBER),
		]

		this.layout()

		this.value = 0

		this.pos_in_bytecode = []
	}

	on_pin_dirty(pin, type)
	{
		super.on_pin_dirty(pin, type)

		if (type == DIRTY_COMPILE) {
			this.pos_in_bytecode.clear()
		}
	}

	on_param_dirty()
	{
		if (this.pos_in_bytecode.isEmpty)
		{
			super.on_param_dirty()
		}
		else
		{
			var msg = Message()

			msg.type = UPDATE_OPCODES

			msg.value = []
			for (var pos in this.pos_in_bytecode) 
			{
				msg.value.add(pos + 2)
				msg.value.add(this.value)
			}

			Blueprint.send_message_root(this, msg)

			Blueprint.send_pin_dirty_root(this.exports[0], DIRTY_OPCODES)
		}
	}

	calc_value(idx) 
	{
		return Variant(VAR_TYPE_NUMBER, this.value)
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		this.pos_in_bytecode.add(CodeTools.get_size(opcodes))
		return maths_Compiler.create_number(compiler, opcodes, this.value)
	}

	layout()
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) {
		return "
%(name).value = %(this.value)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var REGION = 1
		var val = GUI.slider(ctx, "v", this.value, x, y, this.style.width - 20, REGION, false)
		if (val != this.value) {
			this.value = val
			dirty = true
		}

		return dirty
	}
}