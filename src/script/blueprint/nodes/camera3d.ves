import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.dirty_types" for DIRTY_EDITOR
import "blueprint.variant" for Variant, VAR_TYPE_NODE, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER3, VAR_TYPE_MATRIX4
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "maths" for Matrix44
import "maths.vector" for Vector2, Vector3
import "graphics.camera3d" for Camera3D as tt_Camera3D

class Camera3d is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "eye",    VAR_TYPE_NUMBER3),
			Pin(this, "center", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "this",  VAR_TYPE_NODE),		
			Pin(this, "mat",   VAR_TYPE_MATRIX4),
			Pin(this, "zoom",  VAR_TYPE_NUMBER),
			Pin(this, "rot",   VAR_TYPE_MATRIX4),
			Pin(this, "pos",   VAR_TYPE_NUMBER3),
			Pin(this, "front", VAR_TYPE_NUMBER3),
			Pin(this, "up",    VAR_TYPE_NUMBER3),
			Pin(this, "right", VAR_TYPE_NUMBER3),			
		]

		this.layout()

		this.cam = tt_Camera3D()
		this.cam.update_vectors()

		this.last_pos = nil

		this.speed = 0.01
	}

	calc_value(idx) 
	{
		if (idx == 0)
		{
			return Variant(VAR_TYPE_NODE, this)
		}
		else if (idx == 1)
		{
			return Variant(VAR_TYPE_MATRIX4, this.calc_mat())
		}
		else if (idx == 2)
		{
			return Variant(VAR_TYPE_NUMBER, this.cam.zoom)	
		}
		else if (idx == 3)
		{
			var mat = Matrix44.init()
			mat.from_rotate_mat(this.calc_mat())
			return Variant(VAR_TYPE_MATRIX4, mat)
		}
		else if (idx == 4)
		{
			return Variant(VAR_TYPE_NUMBER3, this.cam.position)
		}
		else if (idx == 5)
		{
			return Variant(VAR_TYPE_NUMBER3, this.cam.front)
		}
		else if (idx == 6)
		{
			return Variant(VAR_TYPE_NUMBER3, this.cam.up)
		}
		else if (idx == 7)
		{
			return Variant(VAR_TYPE_NUMBER3, this.cam.right)
		}
		else
		{
			return nil
		}
	}

	calc_mat()
	{
		var v_eye = Blueprint.calc_input_value(this, 0)
		if (v_eye)
		{
			var mat = Matrix44.init()

			var center = Vector3(0, 0, 0)
			var v_center = Blueprint.calc_input_value(this, 1)
			if (v_center) {
				center = v_center.value
			}
			mat.lookat(v_eye.value, center, Vector3(0, 1, 0))

			return mat
		}
		else
		{
			return this.cam.calc_mat()
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) {
		return "
%(name).cam.position.set(%(this.cam.position.x), %(this.cam.position.y), %(this.cam.position.z))
%(name).cam.yaw = %(this.cam.yaw)
%(name).cam.pitch = %(this.cam.pitch)
%(name).cam.zoom = %(this.cam.zoom)
%(name).cam.update_vectors()
%(name).speed = %(this.speed)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var speed = GUI.slider(ctx, "speed", this.speed, x, y, this.style.width - 40, 0.5, false)
		if (speed != this.speed) {
			this.speed = speed
			dirty = true
		}

		return dirty
	}

	on_key_pressed(key) 
	{
		if (key == "w") 
		{
			this.cam.move(this.cam.front.x * this.speed, this.cam.front.y * this.speed, this.cam.front.z * this.speed)
		} 
		else if (key == "s") 
		{
			this.cam.move(-this.cam.front.x * this.speed, -this.cam.front.y * this.speed, -this.cam.front.z * this.speed)
		} 
		else if (key == "a") 
		{
			this.cam.move(-this.cam.right.x * this.speed, -this.cam.right.y * this.speed, -this.cam.right.z * this.speed)
		} 
		else if (key == "d") 
		{
			this.cam.move(this.cam.right.x * this.speed, this.cam.right.y * this.speed, this.cam.right.z * this.speed)
		} 
		else if (key == "escape") 
		{
			this.cam.position = Vector3(0, 0, 3)
		    this.cam.yaw   = -90.0
		    this.cam.pitch = 0
			this.cam.zoom = 45.0
			this.cam.update_vectors()
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		this.last_pos = Vector2(x, y) 
	}

	on_mouse_released(x, y, btn) 
	{ 
		this.last_pos = nil 
	}

	on_mouse_dragged(x, y, btn) 
	{		
		var dx = x - this.last_pos.x
		var dy = this.last_pos.y - y
		this.last_pos.set(x, y)

		var SENSITIVITY = 0.1
		dx = dx * SENSITIVITY
		dy = dy * SENSITIVITY
		this.cam.yaw = this.cam.yaw + dx
		this.cam.pitch = this.cam.pitch + dy

		if (this.cam.pitch > 89) {
			this.cam.pitch = 89
		}
		if (this.cam.pitch < -89) {
			this.cam.pitch = -89
		}

		this.cam.update_vectors()

		for (var pin in this.exports) {
			Blueprint.send_pin_dirty_root(pin, DIRTY_EDITOR)
		}
	}
	
	on_mouse_scrolled(x, y, dx, dy)
	{
		this.cam.zoom = this.cam.zoom - dy
		if (this.cam.zoom < 1.0) {
			this.cam.zoom = 1.0
		}
		if (this.cam.zoom > 45.0) {
			this.cam.zoom = 45.0 
		}
	}
}