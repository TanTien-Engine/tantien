import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.nodes.store" for Store
import "gui" for GUI

class Load is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "var", VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "var", VAR_TYPE_ANY),
		]

		this.layout()

		this.imports[0].hide = true

		this.var_name = "load"
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		} else {
			Blueprint.send_pin_dirty(this.imports[0])
		}
	}

	calc_value(idx)
	{
		return Blueprint.calc_input_value(this, 0)
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		return Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
	}
	
	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var v = ShaderBuilder.gen_child(node, "var")
		if (v) {
			var bb = node.find_value("bb")
			return bb.load(v)
		} else {
			return nil
		}
	}
	
	to_string(name) 
	{
		if (this.var_name == "load")
		{
			var f_node = Blueprint.get_input_node(this, 0)
			if (f_node is Store) {
				this.var_name = f_node.var_name
			}
		}
		if (this.var_name == "load")
		{
			var t_pin = Blueprint.get_first_connect_pin(this.exports[0])
			if (t_pin) {
				this.var_name = t_pin.name
			}
		}

		return "
%(name).var_name = \"%(this.var_name)\"
"
	}

	get_title()
	{
		if (this.var_name == "store") {
			return super.get_title()
		} else {
			return "%(this.var_name)(L)"
		}
	}
}