import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.node_helper" for NodeHelper
import "maths.compiler" for Compiler as maths_Compiler
import "gui" for GUI

class Property is Node
{
	init() 
	{
		super.init()

		this.exports = [
			Pin(this, "var", VAR_TYPE_ANY),
		]

		this.layout()

		this.var_name = "prop"
		this.var_type = VAR_TYPE_ANY

		this.value = nil
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	calc_value(idx)
	{
		return Variant(this.var_type, this.value)
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (this.var_type == "num")
		{
			return maths_Compiler.create_number(compiler, opcodes, this.value)
		}
		else if (this.var_type == "bool")
		{
			return maths_Compiler.create_bool(compiler, opcodes, this.value)
		}
		else
		{
			import "logger.logger" for Logger
			Logger.error("Not Implemented!")

			return nil
		}
	}

	to_string(name) 
	{
		if (this.var_name == "prop")
		{
			var t_pin = Blueprint.get_first_connect_pin(this.exports[0])
			if (t_pin) {
				this.var_name = t_pin.name
				this.var_type = t_pin.type
			}
		}

		var type_str = NodeHelper.var_type_to_string(this.var_type)
		return "
%(name).var_name = \"%(this.var_name)\"
%(name).var_type = %(type_str)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT * 0.5

		GUI.label(ctx, this.var_name, x, y)

		return dirty
	}	
}