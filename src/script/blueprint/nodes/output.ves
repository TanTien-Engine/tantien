import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.node_helper" for NodeHelper
import "gui" for GUI

class Output is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "var", VAR_TYPE_ANY),
		]

		this.layout()

		this.var_name = "out"
		this.var_type = VAR_TYPE_ANY

		this.parent_node = nil
		this.parent_pin_idx = -1

		this.value = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		var p = Blueprint.query_pin(this.parent_node.exports, this.parent_pin_idx)
		if (p) {
			Blueprint.send_pin_dirty(p, type, msg)
		}
	}

	to_string(name) 
	{
		if (this.var_name == "out")
		{
			var f_pin = Blueprint.get_first_connect_pin(this.imports[0])
			if (f_pin) {
				this.var_name = f_pin.name
				this.var_type = f_pin.type
			}
			var v_var = Blueprint.calc_input_value(this, 0)
			if (v_var) {
				this.var_type = v_var.type
			}
		}

		var type_str = NodeHelper.var_type_to_string(this.var_type)
		return "
%(name).var_name = \"%(this.var_name)\"
%(name).var_type = %(type_str)
"
	}

	get_title()
	{
		return "%(this.var_name)(O)"
	}
}