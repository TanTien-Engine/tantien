import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_BOOLEAN, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_NUMBER_SET
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.blueprint" for Blueprint
import "gui" for GUI

class Compare is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "a", VAR_TYPE_NUMBER_SET),
			Pin(this, "b", VAR_TYPE_NUMBER_SET),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_BOOLEAN),
		]

		this.layout()

		// "equal", "not_equal", "greater", "greater_equal", "less", "less_equal"
		this.cmp = "equal"

		// for gui
		this.cmp_items = ["equal", "not_equal", "greater", "greater_equal", "less", "less_equal"]
		this.cmp_selected = -1
	}
	
	calc_value(idx)
	{
		var v_a = Blueprint.calc_input_value(this, 0)
		var v_b = Blueprint.calc_input_value(this, 1)
		if (!v_a or !v_b) {
			return
		}

		var num = 0
		var a = [0, 0, 0, 0]
		var b = [0, 0, 0, 0]
		if (v_a.type == VAR_TYPE_INTEGER or v_a.type == VAR_TYPE_NUMBER)
		{
			num = 1
			a[0] = v_a.value
			b[0] = v_b.value
		}
		else if (v_a.type == VAR_TYPE_NUMBER2)
		{
			num = 2
			a[0] = v_a.value.x
			a[1] = v_a.value.y
			b[0] = v_b.value.x
			b[1] = v_b.value.y
		}
		else if (v_a.type == VAR_TYPE_NUMBER3)
		{
			num = 3
			a[0] = v_a.value.x
			a[1] = v_a.value.y
			a[2] = v_a.value.z
			b[0] = v_b.value.x
			b[1] = v_b.value.y
			b[2] = v_b.value.z
		}
		else if (v_a.type == VAR_TYPE_NUMBER4)
		{
			num = 4
			a[0] = v_a.value.x
			a[1] = v_a.value.y
			a[2] = v_a.value.z
			a[3] = v_a.value.w
			b[0] = v_b.value.x
			b[1] = v_b.value.y
			b[2] = v_b.value.z
			b[3] = v_b.value.w			
		}

		if (num == 0) {
			return Variant(false)
		}

		var count = 0
		if (this.cmp == "equal") {
			for (var i in 0..num) {
				if (a[i] == b[i]) {
					count = count + 1
				}
			}
		} else if (this.cmp == "not_equal") {
			for (var i in 0..num) {
				if (a[i] != b[i]) {
					count = count + 1
				}
			}
		} else if (this.cmp == "greater") {
			for (var i in 0..num) {
				if (a[i] > b[i]) {
					count = count + 1
				}
			}
		} else if (this.cmp == "greater_equal") {
			for (var i in 0..num) {
				if (a[i] >= b[i]) {
					count = count + 1
				}
			}
		} else if (this.cmp == "less") {
			for (var i in 0..num) {
				if (a[i] < b[i]) {
					count = count + 1
				}
			}
		} else if (this.cmp == "less_equal") {
			for (var i in 0..num) {
				if (a[i] <= b[i]) {
					count = count + 1
				}
			}
		}

		return Variant(count == num)
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_a = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_b = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)

		var r_dst = compiler.new_reg()

		if (this.cmp == "equal")
		{
			opcodes.equal_num(r_dst, r_a, r_b)
		}
		else if (this.cmp == "less")
		{
			opcodes.less_num(r_dst, r_a, r_b)
		}
		else
		{
			import "logger.logger" for Logger
			Logger.error("Not Implemented! %(this.cmp)")
		}

		compiler.free_reg(r_a)
		compiler.free_reg(r_b)

		return r_dst
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var a = ShaderBuilder.gen_child(node, "a")
		var b = ShaderBuilder.gen_child(node, "b")
		if (!a or !b) {
			return nil
		}

		var bb = node.find_value("bb")

		if (this.cmp == "equal") {
			return bb.is_equal(a, b)
		} else if (this.cmp == "not_equal") {
			return bb.is_not_equal(a, b)
		} else if (this.cmp == "greater") {
			return bb.is_greater(a, b)
		} else if (this.cmp == "greater_equal") {
			return bb.is_greater_equal(a, b)
		} else if (this.cmp == "less") {
			return bb.is_less(a, b)
		} else if (this.cmp == "less_equal") {
			return bb.is_less_equal(a, b)
		} else {
			return nil
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) 
	{
		return "
%(name).cmp = \"%(this.cmp)\"
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		if (this.cmp_selected < 0) {
			this.cmp_selected = this.cmp_items.query_index(this.cmp)
		}

		var item = GUI.combo(ctx, "cmp", this.cmp_selected, this.cmp_items, x, y, 80)
		if (item != this.cmp_selected) 
		{
			this.cmp_selected = item
			this.cmp = this.cmp_items[item]
			dirty = true
		}

		return dirty
	}	
}