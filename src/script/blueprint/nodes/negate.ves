import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_NUMBER_SET
import "blueprint.blueprint" for Blueprint
import "maths.vector" for Vector2, Vector3, Vector4

class Negate is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "v", VAR_TYPE_NUMBER_SET)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_NUMBER_SET)
		]

		this.layout()
	}

	
	calc_value(idx)
	{
		var v = Blueprint.calc_input_value(this, 0)
		if (v.type == VAR_TYPE_INTEGER) {
			return Variant(VAR_TYPE_INTEGER, -v.value)
		} else if (v.type == VAR_TYPE_NUMBER) {
			return Variant(VAR_TYPE_NUMBER, -v.value)
		} else if (v.type == VAR_TYPE_NUMBER2) {
			return Variant(VAR_TYPE_NUMBER2, Vector2(-v.value.x, -v.value.y))
		} else if (v.type == VAR_TYPE_NUMBER3) {
			return Variant(VAR_TYPE_NUMBER3, Vector3(-v.value.x, -v.value.y, -v.value.z))
		} else if (v.type == VAR_TYPE_NUMBER4) {
			return Variant(VAR_TYPE_NUMBER4, Vector4(-v.value.x, -v.value.y, -v.value.z, -v.value.w))
		} else {
			return nil
		}
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_src = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		if (r_src < 0) {
			return -1
		}

		var r_dst = compiler.new_reg()
		if (r_dst < 0) {
			return -1
		}

		opcodes.negate_num(r_dst, r_src)

		compiler.free_reg(r_src)

		return r_dst
	}
	
	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var v = ShaderBuilder.gen_child(node, "v")
		if (v) {
			var bb = node.find_value("bb")
			return bb.negate(v)		
		} else {
			return nil
		}
	}	
}