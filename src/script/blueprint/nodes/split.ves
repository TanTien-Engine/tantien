import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_MATRIX3, VAR_TYPE_RECT
import "maths.vector" for Vector3

class Split is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "xyzw", VAR_TYPE_NUMBER4),
			Pin(this, "xyz",  VAR_TYPE_NUMBER3),
			Pin(this, "xy",   VAR_TYPE_NUMBER2),
			Pin(this, "mat3", VAR_TYPE_MATRIX3),
			Pin(this, "rect", VAR_TYPE_RECT),
		]
		this.exports = [
			Pin(this, "x",   [ VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3]),
			Pin(this, "y",   [ VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3]),
			Pin(this, "z",   [ VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3]),
			Pin(this, "w",   VAR_TYPE_NUMBER),
			Pin(this, "xyz", VAR_TYPE_NUMBER3),
		]

		this.layout()
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.x)
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return Variant(VAR_TYPE_NUMBER, v_xyz.value.x)
				} else {
					var v_xy = Blueprint.calc_input_value(this, 2)
					if (v_xy) {
						return Variant(VAR_TYPE_NUMBER, v_xy.value.x)
					} else {
						var v_rect = Blueprint.calc_input_value(this, 4)
						if (v_rect) {
							return Variant(VAR_TYPE_NUMBER, v_rect.value.x)
						}
					}
				}
			}
		}
		else if (idx == 1)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.y)
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return Variant(VAR_TYPE_NUMBER, v_xyz.value.y)
				} else {
					var v_xy = Blueprint.calc_input_value(this, 2)
					if (v_xy) {
						return Variant(VAR_TYPE_NUMBER, v_xy.value.y)
					} else {
						var v_rect = Blueprint.calc_input_value(this, 4)
						if (v_rect) {
							return Variant(VAR_TYPE_NUMBER, v_rect.value.y)
						}
					}
				}
			}
		}
		else if (idx == 2)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.z)
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return Variant(VAR_TYPE_NUMBER, v_xyz.value.z)
				} else {
					var v_rect = Blueprint.calc_input_value(this, 4)
					if (v_rect) {
						return Variant(VAR_TYPE_NUMBER, v_rect.value.w)
					}
				}
			}
		}
		else if (idx == 3)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.w)
			} else {
				var v_rect = Blueprint.calc_input_value(this, 4)
				if (v_rect) {
					return Variant(VAR_TYPE_NUMBER, v_rect.value.h)
				}
			}
		}
		else if (idx == 4)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				var rgba = v_xyzw.value
				return Variant(VAR_TYPE_NUMBER3, Vector3(rgba.x, rgba.y, rgba.z))
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return v_xyz
				}
			}
		}

		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (idx == 0)
		{
			for (var i = 0; i < 3; i = i + 1)
			{
				var r_src = Blueprint.calc_input_opcodes(this, i, compiler, opcodes)
				if (r_src)
				{
					var r_dst = compiler.new_reg()

					opcodes.get_x(r_dst, r_src)
					compiler.free_reg(r_src)

					return r_dst
				}
			}
		}
		else if (idx == 1)
		{
			for (var i = 0; i < 3; i = i + 1)
			{
				var r_src = Blueprint.calc_input_opcodes(this, i, compiler, opcodes)
				if (r_src)
				{
					var r_dst = compiler.new_reg()

					opcodes.get_y(r_dst, r_src)
					compiler.free_reg(r_src)

					return r_dst
				}
			}
		}
		else if (idx == 2)
		{
			for (var i = 0; i < 3; i = i + 1)
			{
				var r_src = Blueprint.calc_input_opcodes(this, i, compiler, opcodes)
				if (r_src)
				{
					var r_dst = compiler.new_reg()

					opcodes.get_z(r_dst, r_src)
					compiler.free_reg(r_src)

					return r_dst
				}
			}
		}
		else if (idx == 3)
		{
			for (var i = 0; i < 3; i = i + 1)
			{
				var r_src = Blueprint.calc_input_opcodes(this, i, compiler, opcodes)
				if (r_src)
				{
					var r_dst = compiler.new_reg()

					opcodes.get_w(r_dst, r_src)
					compiler.free_reg(r_src)

					return r_dst
				}
			}
		}

		import "logger.logger" for Logger
		Logger.error("Not Implemented!")
						
		return nil
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var bb = node.find_value("bb")
		
		if (idx == 0)
		{
			var xyzw = ShaderBuilder.gen_child(node, "xyzw")
			if (xyzw) {
				return bb.compose_extract(xyzw, 0)
			} else {
				var xyz = ShaderBuilder.gen_child(node, "xyz")
				if (xyz) {
					return bb.compose_extract(xyz, 0)
				} else {
					var xy = ShaderBuilder.gen_child(node, "xy")
					if (xy) {
						return bb.compose_extract(xy, 0)
					} else {
						var mat3 = ShaderBuilder.gen_child(node, "mat3")
						if (mat3) {
							return bb.compose_extract(mat3, 0)
						}
					}
				}
			}
		}
		else if (idx == 1)
		{
			var xyzw = ShaderBuilder.gen_child(node, "xyzw")
			if (xyzw) {
				return bb.compose_extract(xyzw, 1)
			} else {
				var xyz = ShaderBuilder.gen_child(node, "xyz")
				if (xyz) {
					return bb.compose_extract(xyz, 1)
				} else {
					var xy = ShaderBuilder.gen_child(node, "xy")
					if (xy) {
						return bb.compose_extract(xy, 1)
					} else {
						var mat3 = ShaderBuilder.gen_child(node, "mat3")
						if (mat3) {
							return bb.compose_extract(mat3, 1)
						}
					}
				}
			}
		}
		else if (idx == 2)
		{
			var xyzw = ShaderBuilder.gen_child(node, "xyzw")
			if (xyzw) {
				return bb.compose_extract(xyzw, 2)
			} else {
				var xyz = ShaderBuilder.gen_child(node, "xyz")
				if (xyz) {
					return bb.compose_extract(xyz, 2)
				} else {
					var mat3 = ShaderBuilder.gen_child(node, "mat3")
					if (mat3) {
						return bb.compose_extract(mat3, 2)
					}
				}
			}
		}
		else if (idx == 3)
		{
			var xyzw = ShaderBuilder.gen_child(node, "xyzw")
			if (xyzw) {
				return bb.compose_extract(xyzw, 3)
			}
		}
		else if (idx == 4)
		{
			var xyzw = ShaderBuilder.gen_child(node, "xyzw")
			if (xyzw) {
				var x = bb.compose_extract(xyzw, 0)
				var y = bb.compose_extract(xyzw, 1)
				var z = bb.compose_extract(xyzw, 2)
				return bb.compose_float3(x, y, z)
			} else {
				var xyz = ShaderBuilder.gen_child(node, "xyz")
				if (xyz) {
					return xyz
				}
			}
		}

		return nil
	}
}