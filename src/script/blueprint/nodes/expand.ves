import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_TABLE, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint

class Expand is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "data", [ VAR_TYPE_TABLE, VAR_TYPE_ARRAY ]),
		]

		this.layout()

		this.export_values = []
		this.uniforms = []

		this.data_dirty = false
	}

	on_pin_dirty(pin)
	{
		super.on_pin_dirty(pin)

		this.data_dirty = true
	}

	layout()
	{
		super.layout()

		this.style.width = 180
	}

	calc_value(idx)
	{
		if (this.data_dirty) {
			this.update_data()
			this.data_dirty = false
		}
		return this.export_values[idx]
	}

	get_unif_name(index)
	{
		var name = ""
		
		var prev_pin = Blueprint.get_input_pin(this, 0)
		if (prev_pin) {
			name = name + prev_pin.name
		}

		name = name + "_" + this.exports[index].name	
		return name
	}

	on_connected(pin)
	{
		if (pin.is_input) {
			this.setup_data()
		}
	}

	on_disconnected(pin)
	{
		if (pin.is_input) {
			this.setup_data()
		}
	}

	setup_data()
	{
		for (var p in this.exports) {
			while (!p.conns.isEmpty) {
				Blueprint.disconnect(p.conns.front())
			}
		}
		this.exports.clear()
		this.export_values.clear()

		var data = Blueprint.calc_input_value(this, 0)
		if (!data) {
			this.layout()
			return
		}

		if (data.type == VAR_TYPE_TABLE)
		{
			for (var entry in data.value) {
				var v = Variant(entry.value)
				this.exports.add(Pin(this, entry.key, v.type))
				this.export_values.add(v)
			}
		}
		else if (data.type == VAR_TYPE_ARRAY)
		{
			for (var i in 0..data.value.count) {
				var v = Variant(data.value[i])
				this.exports.add(Pin(this, "%(i)", v.type))
				this.export_values.add(v)
			}
		}

		this.layout()

		this.uniforms = List.filled(this.exports.count, nil)
	}

	update_data()
	{
		var data = Blueprint.calc_input_value(this, 0)
		if (!data) {
			return
		}

		var idx = 0
		if (data.type == VAR_TYPE_TABLE)
		{
			for (var entry in data.value) {
				var v = Variant(entry.value)
				this.export_values[idx] = v
				idx = idx + 1
			}
		}
		else if (data.type == VAR_TYPE_ARRAY)
		{
			for (var i in 0..data.value.count) {
				var v = Variant(data.value[i])
				this.export_values[idx] = v
				idx = idx + 1
			}
		}		
	}
}