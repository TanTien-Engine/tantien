import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_BOOLEAN
import "blueprint.blueprint" for Blueprint

class IsNull is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "in", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_BOOLEAN)
		]

		this.layout()
	}
	
	calc_value(idx)
	{
		var v_in = Blueprint.calc_input_value(this, 0)
		if (!v_in or !v_in.value) {
			return Variant(true)
		} else {
			return Variant(false)
		}
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var reg = compiler.new_reg()
		if (reg < 0) {
			return -1
		}

		var v_in = Blueprint.calc_input_value(this, 0)
		if (!v_in or !v_in.value) {
			opcodes.store_bool(reg, true)
		} else {
			opcodes.store_bool(reg, false)
		}

		return reg
	}
}