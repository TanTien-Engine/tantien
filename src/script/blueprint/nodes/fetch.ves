import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_STRING, VAR_TYPE_TABLE, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "math" for Math

class Fetch is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "items", [ VAR_TYPE_TABLE, VAR_TYPE_ARRAY ]),
			Pin(this, "index", [ VAR_TYPE_INTEGER, VAR_TYPE_STRING ]),
			Pin(this, "prefix", VAR_TYPE_STRING),			
		]
		this.exports = [
			Pin(this, "item", VAR_TYPE_ANY),
			Pin(this, "key", VAR_TYPE_STRING),
		]

		this.layout()

		this.index = nil
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var v_items = Blueprint.calc_input_value(this, 0)
			if (!v_items or !v_items.value) {
				return nil
			}
			if (v_items.type == VAR_TYPE_TABLE) {
				return this.fetch_table_value(v_items.value)
			} else if (v_items.type == VAR_TYPE_ARRAY) {
				return this.fetch_array_value(v_items.value)
			} else {
				return nil
			}
		}
		else if (idx == 1)
		{
			if (this.index is String) {
				return Variant(this.index)
			} else {
				return nil
			}
		}
		else
		{
			return nil
		}
	}

	fetch_table_value(table)
	{
		var v_index = Blueprint.calc_input_value(this, 1)
		if (v_index)
		{
			if (v_index.type == VAR_TYPE_STRING and v_index.value) {
				return Variant(table[v_index.value])
			} else {
				return nil
			}
		}

		if (this.index and this.index is String) {
			return Variant(table[this.index])
		} else {
			return nil
		}
	}

	fetch_array_value(array)
	{
		var index = -1
		
		var v_index = Blueprint.calc_input_value(this, 1)
		if (v_index) {
			if ((v_index.type == VAR_TYPE_INTEGER or v_index.type == VAR_TYPE_NUMBER) and v_index.value) {
			    index = Math.floor(v_index.value)
			}
		} else {
			index = this.query_param("index").value
		}

		if (index < array.count and index >= 0) {
			return Variant(array[index])
		} else {
			return nil
		}
	}

	layout() 
	{
		super.layout()

		this.style.width = 180
		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) 
	{
		if (this.index is String) {
			return "%(name).index = \"%(this.index)\"\n"
		} else if (this.index is Num) {
			return "%(name).index = %(this.index)\n"
		} else {
			return ""
		}
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var v_items = Blueprint.calc_input_value(this, 0)
		if (v_items and v_items.value and v_items.type == VAR_TYPE_TABLE)
		{
			var selected = 0
			var keys = ["null"]
			for (var entry in v_items.value) 
			{
				if (entry.key == this.index) {
					selected = keys.count
				}
				keys.add(entry.key)
			}

			var item = GUI.combo(ctx, "index", selected, keys, x, y, 120)
			if (item != selected) 
			{
				if (item == 0) {
					this.index = nil
				} else {
					this.index = keys[item]				
				}
				dirty = true
			}
			y = y - DEFAULT_HEIGHT
		}
		else if (this.index and this.index is String) 
		{
			GUI.label(ctx, this.index, x, y + DEFAULT_HEIGHT * 0.5)
		}

		return dirty
	}
}