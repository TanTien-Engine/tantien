import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_BOOLEAN
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.node_helper" for NodeHelper
import "gui" for GUI

class Input is Node
{
	init() 
	{
		super.init()

		this.exports = [
			Pin(this, "var", VAR_TYPE_ANY),
			Pin(this, "empty", VAR_TYPE_BOOLEAN),			
		]

		this.layout()

		this.var_name = "in"
		this.var_type = VAR_TYPE_ANY

		this.parent_node = nil
		this.parent_pin_idx = -1
	}	

	on_pin_dirty(pin)
	{
		var p = Blueprint.query_pin(this.parent_node.imports, this.parent_pin_idx)
		if (p) {
			Blueprint.send_pin_dirty(p)
		}
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder
		return ShaderBuilder.gen_child(node, this.parent_node.imports[this.parent_pin_idx].name)
	}

	calc_value(idx)
	{
		if (idx == 0) {
			return Blueprint.calc_input_value(this.parent_node, this.parent_pin_idx)		
		} else {
			var conns = this.parent_node.imports[this.parent_pin_idx].conns
			return Variant(conns.isEmpty)
		}
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (idx == 0) {
			return Blueprint.calc_input_opcodes(this.parent_node, this.parent_pin_idx, compiler, opcodes)
		} else {
			return -1
		}
	}

	to_string(name) 
	{
		if (this.var_name == "in")
		{
			var t_pin = Blueprint.get_first_connect_pin(this.exports[0])
			if (t_pin) {
				this.var_name = t_pin.name
				this.var_type = t_pin.type
			}
		}

		var type_str = NodeHelper.var_type_to_string(this.var_type)
		return "
%(name).var_name = \"%(this.var_name)\"
%(name).var_type = %(type_str)
"
	}

	get_title()
	{
		return "%(this.var_name)(I)"
	}
}