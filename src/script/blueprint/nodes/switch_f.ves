import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_INTEGER
import "blueprint.node_helper" for NodeHelper

var CASE_IDX_OFFSET = 2

class SwitchF is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "type",    VAR_TYPE_INTEGER),
			Pin(this, "default", VAR_TYPE_ANY),			
			Pin(this, "case0",   VAR_TYPE_ANY),
			Pin(this, "case1",   VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "result", VAR_TYPE_ANY),
		]

		this.layout()
	}

	calc_value(idx) 
	{
		var v_type = Blueprint.calc_input_value(this, 0)
		if (!v_type or !v_type.value) {
			return Blueprint.calc_input_value(this, 1)
		}

		if (v_type.value >= 0 and (v_type.value < this.imports.count - CASE_IDX_OFFSET - 1)) {
			return Blueprint.calc_input_value(this, v_type.value + CASE_IDX_OFFSET)
		} else {
			return Blueprint.calc_input_value(this, 1)
		}
	}

	on_connected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, CASE_IDX_OFFSET, "case", VAR_TYPE_ANY)
		}
	}

	on_disconnected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, CASE_IDX_OFFSET, "case", VAR_TYPE_ANY)
		}
	}	
}