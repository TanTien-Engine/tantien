import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "maths.vector" for Vector2, Vector3, Vector4
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4

class Combine is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "x",    VAR_TYPE_NUMBER),
			Pin(this, "y",    VAR_TYPE_NUMBER),
			Pin(this, "z",    VAR_TYPE_NUMBER),
			Pin(this, "w",    VAR_TYPE_NUMBER),
			Pin(this, "xy",   VAR_TYPE_NUMBER2),			
			Pin(this, "xyz",  VAR_TYPE_NUMBER3),
			Pin(this, "grey", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "xyzw", VAR_TYPE_NUMBER4),
			Pin(this, "xyz",  VAR_TYPE_NUMBER3),
			Pin(this, "xy",   VAR_TYPE_NUMBER2),
		]

		this.layout()

		this.value = Vector4()
	}

	calc_value(idx)
	{
		var ret = [0, 0, 0, 0]

		var v_xyz = Blueprint.calc_input_value(this, 4)
		if (v_xyz) 
		{
			ret[0] = v_xyz.value.x
			ret[1] = v_xyz.value.y
			ret[2] = v_xyz.value.z
		} 
		else 
		{
			var v_grey = Blueprint.calc_input_value(this, 5)
			if (v_grey) {
				for (var i in 0..3) {
					ret[i] = v_grey.value
				}
			} else {
				for (var i in 0..3) {
					var v_num = Blueprint.calc_input_value(this, i)
					if (v_num) {
						ret[i] = v_num.value
					}
				}
			}
		}
		var v_w = Blueprint.calc_input_value(this, 3)
		if (v_w) {
			ret[3] = v_w.value
		}

		if (idx == 0) {
			return Variant(VAR_TYPE_NUMBER4, Vector4(ret[0], ret[1], ret[2], ret[3]))
		} else if (idx == 1) {
			return Variant(VAR_TYPE_NUMBER3, Vector3(ret[0], ret[1], ret[2]))
		} else if (idx == 2) {
			return Variant(VAR_TYPE_NUMBER2, Vector2(ret[0], ret[1]))
		}

		return nil		
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_dst = compiler.new_reg()

		var r_x = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_y = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)
		var r_z = Blueprint.calc_input_opcodes(this, 2, compiler, opcodes)

		opcodes.vec3_create_r(r_dst, r_x, r_y, r_z)

		compiler.free_reg(r_x)
		compiler.free_reg(r_y)
		compiler.free_reg(r_z)

		return r_dst
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var module = node.find_value("module")
		var bb = node.find_value("bb")

		var x = ShaderBuilder.gen_child(node, "x")
		if (!x) {
			x = module.const_float(0.0)
		}
		var y = ShaderBuilder.gen_child(node, "y")
		if (!y) {
			y = module.const_float(0.0)
		}
		var z = ShaderBuilder.gen_child(node, "z")
		if (!z) {
			z = module.const_float(0.0)
		}
		var w = ShaderBuilder.gen_child(node, "w")
		if (!w) {
			w = module.const_float(0.0)
		}
		var xy = ShaderBuilder.gen_child(node, "xy")
		if (xy) {
			x = bb.compose_extract(xy, 0)
			y = bb.compose_extract(xy, 1)
		}		
		var xyz = ShaderBuilder.gen_child(node, "xyz")
		if (xyz) {
			x = bb.compose_extract(xyz, 0)
			y = bb.compose_extract(xyz, 1)
			z = bb.compose_extract(xyz, 2)
		}
		var grey = ShaderBuilder.gen_child(node, "grey")
		if (grey) {
			x = grey
			y = grey
			z = grey
		}

		if (idx == 0) {
			return bb.compose_float4(x, y, z, w)
		} else if (idx == 1) {
			return bb.compose_float3(x, y, z)
		} else if (idx == 2) {
			return bb.compose_float2(x, y)
		}

		return nil
	}
}