import "blueprint.nodes.commentary" for Commentary
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_FUNCTION
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.func_in" for FuncIn
import "blueprint.nodes.func_out" for FuncOut

class Function is Commentary
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "func", VAR_TYPE_FUNCTION),
		]

		this.layout()

		this.exports[0].hide = true

		this.title = "Function"
	}

	on_pin_dirty(pin, type, msg)
	{
		for (var node in this.children) {
			if (node is FuncIn)  {
				Blueprint.send_pin_dirty(node.exports[0], type, msg)
			}
		}
	}

	calc_value(idx)
	{
		return Variant(VAR_TYPE_FUNCTION, this)
	}

	get_title()
	{
		return super.get_title()
	}

	prepare_func_in(caller, func_in)
	{
		func_in.caller_node = nil
		func_in.caller_idx = 0
		for (var i = 0; i < caller.imports.count; i = i + 1) {
			if (caller.imports[i].name == func_in.var_name) {
				func_in.caller_node = caller
				func_in.caller_idx = i
				return
			}
		}
	}	

	func_call(caller, idx)
	{
		var export = this.prepare_call(caller, idx)
		if (export) {
			return Blueprint.calc_input_value(export, 0)
		} else {
			return nil
		}
	}

	func_call_opcodes(caller, idx, compiler, opcodes)
	{
		var export = this.prepare_call(caller, idx)
		if (export) {
			return Blueprint.calc_input_opcodes(export, 0, compiler, opcodes)
		} else {
			return nil		
		}
	}

	prepare_call(caller, idx)
	{
		for (var node in this.children)
		{
			if (node is FuncIn) {
				this.prepare_func_in(caller, node)
			}

			if (node is FuncOut)
			{
				for (var i = 0; i < caller.exports.count; i = i + 1) {
					if (caller.exports[i].name == node.var_name and i == idx) {
						return node
					}
				}
			}
		}

		return nil
	}
}