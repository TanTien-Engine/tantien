import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.add" for Add
import "maths.vector" for Vector2, Vector3, Vector4

class Subtract is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "a", VAR_TYPE_ANY),
			Pin(this, "b", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()
	}

	
	calc_value(idx)
	{
		var a = Blueprint.calc_input_value(this, 0)
		var b = Blueprint.calc_input_value(this, 1)
		if (!a and !b) {
			return nil
		}

		var ret = [0, 0, 0, 0]
		if (a) {
			Add.add_to(a, ret)
		}
		if (b) {
			Subtract.sub_from(b, ret)
		}
		if (a.type == VAR_TYPE_NUMBER4 or b.type == VAR_TYPE_NUMBER4) {
			return Variant(VAR_TYPE_NUMBER4, Vector4(ret[0], ret[1], ret[2], ret[3]))
		} else if (a.type == VAR_TYPE_NUMBER3 or b.type == VAR_TYPE_NUMBER3) {
			return Variant(VAR_TYPE_NUMBER3, Vector3(ret[0], ret[1], ret[2]))
		} else if (a.type == VAR_TYPE_NUMBER2 or b.type == VAR_TYPE_NUMBER2) {
			return Variant(VAR_TYPE_NUMBER2, Vector2(ret[0], ret[1]))
		} else if (a.type == VAR_TYPE_INTEGER and b.type == VAR_TYPE_INTEGER) {
			return Variant(VAR_TYPE_INTEGER, ret[0])
		} else {
			return Variant(VAR_TYPE_NUMBER, ret[0])
		}
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		var r_a = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_b = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)
		if (r_a < 0 and r_b < 0) {
			return -1
		}

		var r_dst = compiler.new_reg()
		if (r_dst < 0) {
			return -1
		}

		// fixme
		var v_a = Blueprint.calc_input_value(this, 0)
		var v_b = Blueprint.calc_input_value(this, 1)
		if ((v_a and v_a.type == VAR_TYPE_NUMBER3) or 
		    (v_b and v_b.type == VAR_TYPE_NUMBER3))
		{
			opcodes.vec3_sub(r_dst, r_a, r_b)
		}
		else
		{
			if (r_a < 0) {
				opcodes.store_num(r_dst, -v_b.value)
			} else if (r_b < 0) {
				opcodes.store_num(r_dst, v_a.value)
			} else {
				opcodes.sub(r_dst, r_a, r_b)
			}
		}

		compiler.free_reg(r_a)
		compiler.free_reg(r_b)

		return r_dst
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var a = ShaderBuilder.gen_child(node, "a")
		var b = ShaderBuilder.gen_child(node, "b")
		var bb = node.find_value("bb")
		return bb.sub(a, b)
	}
		
	static sub_from(v, ret)
	{
		if (v.type == VAR_TYPE_NUMBER or v.type == VAR_TYPE_INTEGER) {
			ret[0] = ret[0] - v.value
		} else if (v.type == VAR_TYPE_NUMBER2) {
			ret[0] = ret[0] - v.value.x
			ret[1] = ret[1] - v.value.y			
		} else if (v.type == VAR_TYPE_NUMBER3) {
			ret[0] = ret[0] - v.value.x
			ret[1] = ret[1] - v.value.y
			ret[2] = ret[2] - v.value.z
		} else if (v.type == VAR_TYPE_NUMBER4) {
			ret[0] = ret[0] - v.value.x
			ret[1] = ret[1] - v.value.y
			ret[2] = ret[2] - v.value.z
			ret[3] = ret[3] - v.value.w
		}
	}
}