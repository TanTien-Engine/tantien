import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_PORT, VAR_TYPE_INTEGER, VAR_TYPE_TABLE, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.execute_list" for ExecuteList

class ForEach is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "in",   [ VAR_TYPE_TABLE, VAR_TYPE_ARRAY ]),
			Pin(this, "do",   VAR_TYPE_PORT)
		]
		this.exports = [
			Pin(this, "next",     VAR_TYPE_PORT),
			Pin(this, "out",      VAR_TYPE_ANY),
			Pin(this, "curr_idx", VAR_TYPE_INTEGER),			
		]

		this.layout()

		this.imports[1].stop_port_pass = true
		this.imports[2].stop_port_pass = true
		this.exports[1].stop_port_pass = true
		this.exports[2].stop_port_pass = true

		this.all_values = []
		this.curr_index = 0

		this.drawlist = nil
		this.exe_list = nil
	}

	on_pin_dirty(pin, type)
	{
		if (pin == this.imports[1]) {
			Blueprint.send_pin_dirty(this.exports[1], type)
		} else if (pin == this.exports[1]) {
			Blueprint.send_pin_dirty(this.imports[1], type)
		}
	}

	render_gen()
	{		
		var node = Blueprint.get_input_node(this, 2)
		if (node) 
		{
			var prev_nodes = Blueprint.get_precursor_nodes(node)

			import "rendergraph.drawlist" for Drawlist
			this.drawlist = Drawlist(prev_nodes)
		}

		this.curr_index = 0
	}

	render_run() 
	{
		if (!this.drawlist) {
			return
		}

		this.all_values = this.get_all_values()
		for (this.curr_index = 0; this.curr_index < this.all_values.count; this.curr_index = this.curr_index + 1) {
			this.drawlist.run()	
		}
	}

	execute_gen()
	{
		var node = Blueprint.get_input_node(this, 2)
		if (node) {
			var prev_nodes = Blueprint.get_precursor_nodes(node)
			this.exe_list = ExecuteList(prev_nodes)
		}
	}

	execute_run() 
	{
		if (!this.exe_list) {
			return
		}

		this.all_values = this.get_all_values()
		for (this.curr_index = 0; this.curr_index < this.all_values.count; this.curr_index = this.curr_index + 1) {
			this.exe_list.run()	
		}
	}

	calc_value(idx) 
	{
		if (idx == 1) {
			if (this.curr_index >= 0 and this.curr_index < this.all_values.count) {
				return this.all_values[this.curr_index]
			}
		} else if (idx == 2) {
			return Variant(VAR_TYPE_INTEGER, this.curr_index)
		}

		return nil		
	}

	get_all_values()
	{
		var all_values = []
		
		var v_all = Blueprint.calc_input_value(this, 1)
		if (v_all and v_all.value) 
		{
			if (v_all.value is List or v_all.value is Map) {
				for (var entry in v_all.value) {
					all_values.add(Variant(entry))
				}
			} else {
				all_values.add(Variant(v_all))
			}
		}

		return all_values
	}
}