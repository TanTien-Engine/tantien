import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_UNKNOWN, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_MATRIX4
import "maths" for Matrix44, Float3
import "maths.vector" for Vector4, Vector3, Vector2

class Multiply is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "a", VAR_TYPE_ANY),
			Pin(this, "b", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()
	}

	
	calc_value(idx)
	{
		var a = Blueprint.calc_input_value(this, 0)
		var b = Blueprint.calc_input_value(this, 1)
		if (!a or !b) {
			return nil
		}

		if ((a.type == VAR_TYPE_NUMBER or a.type == VAR_TYPE_INTEGER or a.type == VAR_TYPE_NUMBER2 or a.type == VAR_TYPE_NUMBER3 or a.type == VAR_TYPE_NUMBER4) and (b.type == VAR_TYPE_NUMBER or b.type == VAR_TYPE_INTEGER or b.type == VAR_TYPE_NUMBER2 or b.type == VAR_TYPE_NUMBER3 or b.type == VAR_TYPE_NUMBER4))
		{
			var ret = [1, 1, 1, 1]
			Multiply.mul_to(a, ret)
			Multiply.mul_to(b, ret)
			if (a.type == VAR_TYPE_NUMBER4 or b.type == VAR_TYPE_NUMBER4) {
				return Variant(VAR_TYPE_NUMBER4, Vector4(ret[0], ret[1], ret[2], ret[3]))
			} else if (a.type == VAR_TYPE_NUMBER3 or b.type == VAR_TYPE_NUMBER3) {
				return Variant(VAR_TYPE_NUMBER3, Vector3(ret[0], ret[1], ret[2]))
			} else if (a.type == VAR_TYPE_NUMBER2 or b.type == VAR_TYPE_NUMBER2) {
				return Variant(VAR_TYPE_NUMBER2, Vector2(ret[0], ret[1]))
			} else if (a.type == VAR_TYPE_INTEGER and b.type == VAR_TYPE_INTEGER) {
				return Variant(VAR_TYPE_INTEGER, ret[0])
			} else {
				return Variant(VAR_TYPE_NUMBER, ret[0])
			}
		} 
		else if (a.type == VAR_TYPE_MATRIX4) 
		{
			var mt = Matrix44.init()
			mt.transform_mat4(b.value)
			mt.transform_mat4(a.value)
			return Variant(VAR_TYPE_MATRIX4, mt)
		} 
		else if (a.type == VAR_TYPE_NUMBER3 and b.type == VAR_TYPE_MATRIX4) 
		{
			var p = Float3.init(a.value.x, a.value.y, a.value.z)
			p.transform(b.value)
			return Variant(VAR_TYPE_NUMBER3, Vector3(p.x(), p.y(), p.z()))	
		} 
		else 
		{
			return Variant(VAR_TYPE_UNKNOWN, nil)
		}

		return nil
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var a = ShaderBuilder.gen_child(node, "a")
		var b = ShaderBuilder.gen_child(node, "b")

		if (!a and !b) {
			return nil
		} else if (!a) {
			return b
		} else if (!b) {
			return a
		} else {
			var bb = node.find_value("bb")
			return bb.mul(a, b)
		}
	}

	static mul_to(v, ret)
	{
		if (v.type == VAR_TYPE_NUMBER or v.type == VAR_TYPE_INTEGER) {
			for (var i in 0..4) {
				ret[i] = ret[i] * v.value			
			}
		} else if (v.type == VAR_TYPE_NUMBER2) {
			ret[0] = ret[0] * v.value.x
			ret[1] = ret[1] * v.value.y			
		} else if (v.type == VAR_TYPE_NUMBER3) {
			ret[0] = ret[0] * v.value.x
			ret[1] = ret[1] * v.value.y
			ret[2] = ret[2] * v.value.z
		} else if (v.type == VAR_TYPE_NUMBER4) {
			ret[0] = ret[0] * v.value.x
			ret[1] = ret[1] * v.value.y
			ret[2] = ret[2] * v.value.z
			ret[3] = ret[3] * v.value.w
		}
	}
}