import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_ARRAY, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint
import "vm" for CodeTools

class ForEachF is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "items", VAR_TYPE_ARRAY),
			Pin(this, "count", VAR_TYPE_INTEGER),			
			Pin(this, "eval",  VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "result",    VAR_TYPE_ARRAY),
			Pin(this, "curr_item", VAR_TYPE_ANY),
		]

		this.layout()

		this.exports[1].stop_port_pass = true

		this.curr_item = nil
		this.r_curr_item = -1
	}

	calc_value(idx) 
	{
		if (idx == 0) {
			return this.calc_result()
		} else if (idx == 1) {
			return this.curr_item
		}
		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (idx == 0)
		{
			var r_dst = compiler.new_reg()
			opcodes.create_vector(r_dst)

			var r_count = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)

			this.r_curr_item = compiler.new_reg()
			opcodes.store_num(this.r_curr_item, 0)

			compiler.keep_reg(this.r_curr_item, true)

			var r_cmp = compiler.new_reg()
			opcodes.store_bool(r_cmp, false)

			var start_ip = CodeTools.get_size(opcodes)

			var r_eval = Blueprint.calc_input_opcodes(this, 2, compiler, opcodes)
			opcodes.vector_concat(r_dst, r_eval)
			compiler.free_reg(r_eval)

			opcodes.inc_num(this.r_curr_item)
			opcodes.cmp_num(r_cmp, this.r_curr_item, r_count)
			opcodes.jump_if_not(start_ip - CodeTools.get_size(opcodes), r_cmp)

			compiler.free_reg(r_count)
			compiler.free_reg(r_cmp)

			compiler.keep_reg(this.r_curr_item, false)
			compiler.free_reg(this.r_curr_item)
			this.r_curr_item = -1

			compiler.keep_reg(this.r_curr_item, false)

			return r_dst
		}
		else if (idx == 1)
		{
			return this.r_curr_item
		}

		return -1
	}

	calc_result()
	{
		var v_items = Blueprint.calc_input_value(this, 0)
		if (v_items.value)
		{
			var result = []

			if (v_items.value is List or v_items.value is Map) 
			{			
				for (var entry in v_items.value) 
				{
					this.curr_item = Variant(entry)

					var v_eval = Blueprint.calc_input_value(this, 2)
					result.add(v_eval)
				}
			}
			else
			{
				this.curr_item = v_items

				var v_eval = Blueprint.calc_input_value(this, 2)
				result.add(v_eval)
			}

			this.curr_item = nil

			return Variant(result)
		}

		var v_count = Blueprint.calc_input_value(this, 1)
		if (v_count.value)
		{
			var result = []

			this.curr_item = nil
			for (var i in 0..v_count.value)
			{
				this.curr_item = Variant(i)

				var v_eval = Blueprint.calc_input_value(this, 2)
				result.add(v_eval)
			}
			this.curr_item = nil

			return Variant(result)
		}
	}
}