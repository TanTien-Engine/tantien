import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_helper" for NodeHelper
import "blueprint.nodes.add" for Add
import "maths.vector" for Vector2, Vector3, Vector4

class Average is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "in0", VAR_TYPE_ANY),
			Pin(this, "in1", VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "avg", VAR_TYPE_ANY),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var ret = [0, 0, 0, 0]
		var count = 0
		var out_type = nil		
		for (var i in 0..this.imports.count) 
		{
			var v = Blueprint.calc_input_value(this, i)
			if (v) 
			{
				Add.add_to(v, ret)
				count = count + 1

				if (!out_type)
				{
					if (v.type == VAR_TYPE_NUMBER or v.type == VAR_TYPE_INTEGER) {
						out_type = VAR_TYPE_NUMBER
					} else if (v.type == VAR_TYPE_NUMBER2) {
						out_type = VAR_TYPE_NUMBER2
					} else if (v.type == VAR_TYPE_NUMBER3) {
						out_type = VAR_TYPE_NUMBER3
					} else if (v.type == VAR_TYPE_NUMBER4) {
						out_type = VAR_TYPE_NUMBER4
					}
				}
			}
		}

		if (count == 0) {
			return nil
		}

		for (var i in 0..4) {
			ret[i] = ret[i] / count
		}
		if (out_type == VAR_TYPE_NUMBER) {
			return Variant(VAR_TYPE_NUMBER, ret[0])
		} else if (out_type == VAR_TYPE_NUMBER2) {
			return Variant(VAR_TYPE_NUMBER2, Vector2(ret[0], ret[1]))
		} else if (out_type == VAR_TYPE_NUMBER3) {
			return Variant(VAR_TYPE_NUMBER3, Vector3(ret[0], ret[1], ret[2]))
		} else if (out_type == VAR_TYPE_NUMBER4) {
			return Variant(VAR_TYPE_NUMBER4, Vector4(ret[0], ret[1], ret[2], ret[3]))
		}

		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (this.imports.count != 3)
		{
			import "logger.logger" for Logger
			Logger.error("Average not support input count.")
			return -1
		}

		var r_dst = compiler.new_reg()
		if (r_dst < 0) {
			return -1
		}

		var r_0 = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
		var r_1 = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)

		opcodes.vec3_add(r_dst, r_0, r_1)

		compiler.free_reg(r_0)
		compiler.free_reg(r_1)

		var r_tmp = compiler.new_reg()
		opcodes.store_num(r_tmp, 0.5)

		opcodes.mul(r_dst, r_dst, r_tmp)

		compiler.free_reg(r_tmp)

		return r_dst
	}

	on_connected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this)
		}
	}

	on_disconnected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this)
		}
	}
}