import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_UNKNOWN, VAR_TYPE_BOOLEAN, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_MATRIX2, VAR_TYPE_MATRIX3, VAR_TYPE_MATRIX4, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "render" for Render

class NodeHelper
{
	static type_var_to_pin(type)
	{
		var pin_type = VAR_TYPE_UNKNOWN
		if (type == "bool") {
			pin_type = VAR_TYPE_BOOLEAN
		} else if (type == "int") {
			pin_type = VAR_TYPE_INTEGER
		} else if (type == "float") {
			pin_type = VAR_TYPE_NUMBER
		} else if (type == "float2" or type == "int2") {
			pin_type = VAR_TYPE_NUMBER2
		} else if (type == "float3" or type == "int3") {
			pin_type = VAR_TYPE_NUMBER3
		} else if (type == "float4" or type == "int4") {
			pin_type = VAR_TYPE_NUMBER4
		} else if (type == "mat2") {
			pin_type = VAR_TYPE_MATRIX2
		} else if (type == "mat3") {
			pin_type = VAR_TYPE_MATRIX3
		} else if (type == "mat4") {
			pin_type = VAR_TYPE_MATRIX4
		} else if (type == "sampler" or type == "image") {
			import "rendergraph.variant" for VAR_TYPE_TEXTURE		
			pin_type = VAR_TYPE_TEXTURE
		} else if (type == "array") {
			pin_type = VAR_TYPE_ARRAY
		} else {
			import "logger.logger" for Logger
			Logger.error("unknown type: %(type)")
		}
		return pin_type
	}

	static init_pins_from_code(node, stage, code, inc_dir, lang, name)
	{
		// func params
		var args = Render.get_shader_func_argus(stage, code, inc_dir, lang, name)
		if (!args) {
			return
		}

		for (var i in 0..args.count - 1) 
		{
			var v = args[i]
			var pin_type = this.type_var_to_pin(v["type"])
			node.imports.add(Pin(node, v["name"], pin_type))
		}

		// uniforms
		var uniforms = []
		import "rendergraph.components.shader_uniforms" for ShaderUniforms		
		ShaderUniforms.get_shader_uniforms(stage, code, inc_dir, lang, uniforms, name)
		for (var unif in uniforms) {
			ShaderUniforms.add_uniform_to_imports(node, unif)
		}

		// func return
		var v = args[args.count - 1]
		if (v["type"] != "void")
		{
			var pin_type = this.type_var_to_pin(v["type"])
			node.exports.add(Pin(node, "ret", pin_type))
		}

		node.layout()

		return args.count - 1
	}

	static var_type_to_string(var_type)
	{
		if (var_type is String)
		{
			return "\"%(var_type)\""
		}
		else if (var_type is List)
		{
			var ret = ""
			for (var type in var_type)
			{
				var str = this.var_type_to_string(type)
				if (ret == "") {
					ret = str
				} else {
					ret = ret + ", %(str)"
				}
			}
			return "[ %(ret) ]"
		}
		else
		{
			return ""
		}
	}

	static dynamic_imports_update(node, offset, title, type)
	{
		var num = 2 + offset
		while (node.imports.count > num and node.imports.back().conns.isEmpty) {
			node.imports.pop_back()
		}

		if (!node.imports.back().conns.isEmpty) {
			node.imports.add(Pin(node, "%(title)%(node.imports.count - offset)", type))
		}

		node.layout()

		for (var port in node.imports) {
			for (var conn in port.conns) {
				conn.update()
			}
		}
		for (var port in node.exports) {
			for (var conn in port.conns) {
				conn.update()
			}
		}
	}

	static dynamic_imports_update(node)
	{
		this.dynamic_imports_update(node, 0, "in", VAR_TYPE_ANY)
	}

	static calc_prop_value(node, name)
	{
		var v_input = Blueprint.calc_input_value(node, name)
		if (v_input) {
			return v_input.value
		} else {
			return node.query_param(name).value
		}
	}

	static calc_prop_opcodes(node, name, compiler, opcodes)
	{
		var r_input = Blueprint.calc_input_opcodes(node, name, compiler, opcodes)
		if (r_input < 0) 
		{
			var r_dst = compiler.new_reg()
			opcodes.store_num(r_dst, node.query_param(name).value)
			return r_dst
		}
		else
		{
			return r_input
		}
	}
}