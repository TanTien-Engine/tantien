import "graphics" for Painter, Graphics
import "blueprint.node_layout" for TITLE_HEIGHT, PIN_RADIUS
import "blueprint.node_style" for COL_PANEL_BG, TB_TITLE, TB_LEFT, TB_RIGHT
import "blueprint.node_layout" for NodeLayout, PIN_TEXT_OFFSET
import "blueprint.variant" for VAR_TYPE_FUNCTION
import "blueprint.blackboard" for BLACKBOARD

class NodeRender
{
	static draw_node(node)
	{
		this.draw_node_panel(node)

		if (BLACKBOARD.editor_cam.scale < 2) {
			this.draw_node_pins(node)
			this.draw_node_conns(node)			
		}
	}

	static draw_node_panel(node)
	{
		var pt = Painter.init()

		var hw = node.style.width * 0.5
		var hh = node.style.height * 0.5
		pt.add_rect_filled(nil, [node.pos.x - hw, node.pos.y - hh, node.style.width, node.style.height], node.style.color)

		Graphics.draw_painter(pt)

		if (BLACKBOARD.editor_cam.scale < 2) {
//			Graphics.draw_text(node.get_title() + "[%(node.calc_times)]", node.pos.x, node.pos.y + hh - TITLE_HEIGHT * 0.5, 0.7, TB_TITLE)
			Graphics.draw_text(node.get_title(), node.pos.x, node.pos.y + hh - TITLE_HEIGHT * 0.5, 0.7, TB_TITLE)
		}
	}

	static draw_node_pins(node)
	{
		for (var pin in node.imports)
		{
			if (this.is_pin_visible(pin)) {
				var p_pos = NodeLayout.calc_pin_pos(pin)
				this.draw_pin(p_pos.x, p_pos.y, pin)
			}
		}
		for (var pin in node.exports)
		{
			if (this.is_pin_visible(pin)) {
				var p_pos = NodeLayout.calc_pin_pos(pin)
				this.draw_pin(p_pos.x, p_pos.y, pin)
			}
		}
	}

	static draw_node_conns(node)
	{
		var pt = Painter.init()

		for (var o in node.exports) {
			for (var c in o.conns) {
				if (this.is_conn_visible(c)) {
					this.draw_conn(pt, c)
				}
			}
		}

		Graphics.draw_painter(pt)
	}

	static draw_pin(x, y, pin)
	{
		var pt = Painter.init()
		if (pin.conns.isEmpty) {
			pt.add_circle(nil, x, y, PIN_RADIUS, pin.color, 1.0, 12)		
		} else {
			pt.add_circle_filled(nil, x, y, PIN_RADIUS, pin.color, 12)
		}
		Graphics.draw_painter(pt)

		var dx = 0
		var tb
		if (pin.is_input) {
			dx = PIN_TEXT_OFFSET
			tb = TB_LEFT
		} else {
			dx = -PIN_TEXT_OFFSET
			tb = TB_RIGHT		
		}

		Graphics.draw_text(pin.name, x + dx, y, 0.5, tb)
	}

	static draw_conn(pt, conn)
	{
		pt.add_bezier(nil, conn.curve, conn.from.color, 2)
	}

	static is_pin_visible(pin)
	{
		if (pin.node.selected) {
			return true
		}

		return !pin.hide
	}

	static is_conn_visible(conn)
	{
		if (conn.to.node.dummy) {
			return false
		}

		if (conn.from.node.selected or conn.to.node.selected) {
			return true
		}

		if (conn.from.hide or conn.to.hide) {
			return false
		}

		if (conn.from.stop_port_pass) {
			return false
		}

		if (conn.from.type == VAR_TYPE_FUNCTION) {
			return false
		}

		return true
	}
}