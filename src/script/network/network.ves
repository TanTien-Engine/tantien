import "network.edge" for Edge
import "network.pin" for Pin
import "network.vertex_shape" for VertexShape

class Network
{
	static topo_sort(all, root)
	{
		var ret = []

		for (var v in all) {
			v.flag = false
		}

		var curr = []
		curr.add(root)
		ret.add(root)
		root.flag = true

		while (!curr.isEmpty)
		{
			var v = curr[0]
			for (var p in v.pins)
			{
				if (p.edge)
				{
					var other = nil
					if (p.edge.pin0.vert != v) {
						other = p.edge.pin0.vert
					} else {
						other = p.edge.pin1.vert
					}

					if (!other.flag)
					{
						curr.add(other)
						ret.add(other)
						other.flag = true
					}					
				}
			}
			curr.pop_front()
		}

		return ret
	}

	static connect(pin0, pin1)
	{
		pin0.vert.add_pin(pin0)
		pin1.vert.add_pin(pin1)

		pin0.vert.on_connection_changed()
		pin1.vert.on_connection_changed()

		var e = Edge(pin0, pin1)
		pin0.edge = e
		pin1.edge = e
		e.update()
		return e
	}

	static disconnect(edge)
	{
		if (edge.pin0) 
		{
			edge.pin0.vert.remove_pin(edge.pin0)
			edge.pin0.edge = nil

			edge.pin0.vert.on_connection_changed()
		}

		if (edge.pin1) 
		{
			edge.pin1.vert.remove_pin(edge.pin1)
			edge.pin1.edge = nil

			edge.pin1.vert.on_connection_changed()
		}

		edge.clear()
	}

	static connect(vert0, pin0, vert1, pin1)
	{
		var p0 = VertexShape.fetch_pin(vert0, pin0)
		var p1 = VertexShape.fetch_pin(vert1, pin1)
		return this.connect(p0, p1)
	}

	static neighbors_pins(vert, type)
	{
		var pins = []

		for (var pin in vert.pins) 
		{
			if ((!type or pin.type == type) and pin.edge)
			{
				if (pin.edge.pin0.vert != vert) {
					pins.add(pin.edge.pin0)
				} else if (pin.edge.pin1.vert != vert) {
					pins.add(pin.edge.pin1)
				}
			}
		}

		return pins
	}

	static neighbors(vert)
	{
		var verts = []

		var pins = this.neighbors_pins(vert)
		for (var pin in pins) {
			verts.add(pin.vert)
		}

		return verts
	}

	static neighbors(vert, type)
	{
		var verts = []

		var pins = this.neighbors_pins(vert, type)
		for (var pin in pins) {
			verts.add(pin.vert)
		}

		return verts
	}	

	static adjacent(vert0, pin0, vert1, pin1)
	{
		var nb0 = this.neighbors(vert0, pin0)
		var nb1 = this.neighbors(vert1, pin1)
		for (var i in nb0) {
			for (var j in nb1) {
				if (i == vert1 and j == vert0) {
					return true
				}
			}
		}
		return false
	}
}