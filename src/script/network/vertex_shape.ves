import "network.pin" for Pin
import "maths.calc" for Calc
import "maths.vector" for Vector2
import "math" for Math

var SHAPE_CIRCLE    = 0
var SHAPE_CAPSULE_H = 1
var SHAPE_CAPSULE_V = 2
var SHAPE_ROD       = 3
var SHAPE_PANEL		= 4

var SHAPE_CIRCLE_RADIUS = 20

var SHAPE_CAPSULE_WIDTH  = 30
var SHAPE_CAPSULE_LENGTH = SHAPE_CAPSULE_WIDTH * 3

var SHAPE_ROD_WIDTH  = 20
var SHAPE_ROD_LENGTH = SHAPE_ROD_WIDTH * 5

var SHAPE_PANEL_WIDTH  = 256
//var SHAPE_PANEL_HEIGHT = TITLE_HEIGHT
var SHAPE_PANEL_HEIGHT = SHAPE_PANEL_WIDTH

var PIN_RADIUS = 5

var PIN_CIRCLE_AROUND_IDX = 0

var PIN_CAPSULE_TOP_IDX    = 0
var PIN_CAPSULE_BOTTOM_IDX = 1
var PIN_CAPSULE_LEFT_IDX   = 2
var PIN_CAPSULE_RIGHT_IDX  = 3

var PIN_ROD_START_IDX = 0
var PIN_ROD_END_IDX   = 1

var PIN_CIRCLE_NAMES  = [ "around" ]
var PIN_CAPSULE_NAMES = [ "top", "bottom", "left", "right" ]
var PIN_ROD_NAMES     = [ "start", "end" ]
var PIN_PANEL_NAMES   = [ "pos" ]

class VertexShape
{
	static calc_pin_pos(pin)
	{
		if (pin.vert.shape == SHAPE_PANEL) {
			if (pin.vert.has_method("calc_pin_pos(_)")) {
				return pin.vert.calc_pin_pos(pin)
			} else {
				return nil
			}
		}

		if (pin.edges.isEmpty) {
			return nil
		}

		var e = pin.edges.front()
		if (!e.pin0 or !e.pin1) {
			return nil
		}

		var pos0 = e.pin0.vert.pos
		if (e.pin0.vert.has_method("calc_pin_pos(_)")) {
			pos0 = e.pin0.vert.calc_pin_pos(e.pin0)
		}
		var pos1 = e.pin1.vert.pos
		if (e.pin1.vert.has_method("calc_pin_pos(_)")) {
			pos1 = e.pin1.vert.calc_pin_pos(e.pin1)
		}

		var p0 = pos0
		var p1 = pos1
		if (pin == e.pin1) {
			p0 = pos1
			p1 = pos0
		}

		var pos = Vector2()

		if (pin.vert.shape == SHAPE_CIRCLE)
		{
			var angle = Math.atan2(p1.y - p0.y, p1.x - p0.x)

			var r = SHAPE_CIRCLE_RADIUS + PIN_RADIUS
			pos.x = p0.x + r * Math.cos(angle)
			pos.y = p0.y + r * Math.sin(angle)
		}
		else if (pin.vert.shape == SHAPE_CAPSULE_H)
		{
			if (pin.type == PIN_CAPSULE_TOP_IDX or pin.type == PIN_CAPSULE_BOTTOM_IDX)
			{
				var dx = 0
				var hw = SHAPE_CAPSULE_LENGTH * 0.5 - SHAPE_CAPSULE_WIDTH * 0.5			
				if (e.pin0.vert.shape == SHAPE_CAPSULE_H and e.pin1.vert.shape == SHAPE_CAPSULE_H)
				{
					var off_x = p1.x - p0.x
					// move right
					if (p0.y < p1.y and pin.type == PIN_CAPSULE_BOTTOM_IDX) {
						off_x = off_x + 100
					}
					var off_y = p1.y - p0.y
					var angle = Math.atan2(off_y, off_x)

					dx = Math.cos(angle) * SHAPE_CAPSULE_WIDTH
					dx = Math.max(Math.min(dx, hw), -hw)

				}
				else
				{
					dx = Math.max(Math.min(p1.x - p0.x, hw), -hw)
				}
				pos.x = p0.x + dx

				if (pin.type == PIN_CAPSULE_TOP_IDX) {
					pos.y = p0.y + SHAPE_CAPSULE_WIDTH * 0.5 + PIN_RADIUS
				} else if (pin.type == PIN_CAPSULE_BOTTOM_IDX) {
					pos.y = p0.y - SHAPE_CAPSULE_WIDTH * 0.5 - PIN_RADIUS
				}
			}
			else
			{
				pos.y = p0.y			
				if (pin.type == PIN_CAPSULE_LEFT_IDX) {
					pos.x = p0.x - SHAPE_CAPSULE_LENGTH * 0.5 - PIN_RADIUS
				} else if (pin.type == PIN_CAPSULE_RIGHT_IDX) {
					pos.x = p0.x + SHAPE_CAPSULE_LENGTH * 0.5 + PIN_RADIUS
				}
			}
		}
		else if (pin.vert.shape == SHAPE_CAPSULE_V)
		{
			if (pin.type == PIN_CAPSULE_TOP_IDX or pin.type == PIN_CAPSULE_BOTTOM_IDX)
			{
				pos.x = p0.x
				if (pin.type == PIN_CAPSULE_TOP_IDX) {
					pos.y = p0.y + SHAPE_CAPSULE_LENGTH * 0.5 + PIN_RADIUS
				} else if (pin.type == PIN_CAPSULE_BOTTOM_IDX) {
					pos.y = p0.y - SHAPE_CAPSULE_LENGTH * 0.5 - PIN_RADIUS
				} 
			}
			else
			{
				var hh = SHAPE_CAPSULE_LENGTH * 0.5 - SHAPE_CAPSULE_WIDTH * 0.5
				var dy = Math.max(Math.min(p1.y - p0.y, hh), -hh)
				pos.y = p0.y + dy

				if (pin.type == PIN_CAPSULE_LEFT_IDX) {
					pos.x = p0.x - SHAPE_CAPSULE_WIDTH * 0.5 - PIN_RADIUS
				} else if (pin.type == PIN_CAPSULE_RIGHT_IDX) {
					pos.x = p0.x + SHAPE_CAPSULE_WIDTH * 0.5 + PIN_RADIUS
				}
			}
		}
		else if (pin.vert.shape == SHAPE_ROD)
		{
			pos.x = p0.x
			pos.y = p0.y
			if (VertexShape.is_shape_rod_hori(pin.vert)) 
			{
				if (pin.type == PIN_ROD_START_IDX) {
					pos.x = p0.x - SHAPE_ROD_LENGTH * 0.5 - PIN_RADIUS
				} else if (pin.type == PIN_ROD_END_IDX) {
					pos.x = p0.x + SHAPE_ROD_LENGTH * 0.5 + PIN_RADIUS
				}
			}
			else
			{
				if (pin.type == PIN_ROD_START_IDX) {
					pos.y = p0.y - SHAPE_ROD_LENGTH * 0.5 - PIN_RADIUS
				} else if (pin.type == PIN_ROD_END_IDX) {
					pos.y = p0.y + SHAPE_ROD_LENGTH * 0.5 + PIN_RADIUS
				}
			}
		}
		else if (pin.vert.shape == SHAPE_PANEL)
		{
			if (pin.vert.has_method("calc_pin_pos(_)")) {
				return pin.vert.calc_pin_pos(pin)
			} else {
				return nil
			}
		}
		else
		{
			return nil
		}	

		return pos
	}

	static create_pin(vert, idx)
	{
		var o = vert.pin_types_t[idx]
		if (!o or o.isEmpty) {
			return nil
		} else {
			return Pin(vert, idx)
		}
	}

	static query_pin(vert, pos)
	{
		var sz = this.calc_aabb(vert)
		var hw = sz.x * 0.5
		var hh = sz.y * 0.5
		if (pos.x < vert.pos.x - hw or
		    pos.x > vert.pos.x + hw or
		    pos.y < vert.pos.y - hh or
		    pos.y > vert.pos.y + hh) {
		    return nil
		}

		for (var pin in vert.pins)
		{
			var pin_pos = this.calc_pin_pos(pin)
			if (pin_pos) {
				var dist = Calc.dis_pos_to_pos(pos, pin_pos)
				if (dist < PIN_RADIUS * 1.1) {
					return pin
				}
			}
		}

		if (vert.shape == SHAPE_CIRCLE)
		{
			var dist = Calc.dis_pos_to_pos(pos, vert.pos)
			if (dist < SHAPE_CIRCLE_RADIUS + PIN_RADIUS * 2 and dist > SHAPE_CIRCLE_RADIUS) {
				return this.create_pin(vert, PIN_CIRCLE_AROUND_IDX)
			}
		}
		else if (vert.shape == SHAPE_CAPSULE_H)
		{
			var hw = SHAPE_CAPSULE_LENGTH * 0.5 - SHAPE_CAPSULE_WIDTH * 0.5
			var hh = SHAPE_CAPSULE_WIDTH * 0.5
			if (pos.y > vert.pos.y + hh) {
				return this.create_pin(vert, PIN_CAPSULE_TOP_IDX)
			} else if (pos.y < vert.pos.y - hh) {
				return this.create_pin(vert, PIN_CAPSULE_BOTTOM_IDX)
			} else if (pos.x < vert.pos.x - hw) {
				return this.create_pin(vert, PIN_CAPSULE_LEFT_IDX)
			} else if (pos.x > vert.pos.x + hw) {
				return this.create_pin(vert, PIN_CAPSULE_RIGHT_IDX)
			}
		}
		else if (vert.shape == SHAPE_CAPSULE_V)
		{
			var hw = SHAPE_CAPSULE_WIDTH * 0.5
			var hh = SHAPE_CAPSULE_LENGTH * 0.5 - SHAPE_CAPSULE_WIDTH * 0.5
			if (pos.y > vert.pos.y + hh) {
				return this.create_pin(vert, PIN_CAPSULE_TOP_IDX)
			} else if (pos.y < vert.pos.y - hh) {
				return this.create_pin(vert, PIN_CAPSULE_BOTTOM_IDX)
			} else if (pos.x < vert.pos.x - hw) {
				return this.create_pin(vert, PIN_CAPSULE_LEFT_IDX)
			} else if (pos.x > vert.pos.x + hw) {
				return this.create_pin(vert, PIN_CAPSULE_RIGHT_IDX)
			}
		}
		else if (vert.shape == SHAPE_ROD)
		{
			var hw = SHAPE_ROD_LENGTH * 0.5 - SHAPE_ROD_WIDTH * 0.5		
			if (VertexShape.is_shape_rod_hori(vert)) 
			{
				if (pos.x < vert.pos.x - hw) {
					return this.create_pin(vert, PIN_ROD_START_IDX)
				} else if (pos.x > vert.pos.x + hw) {
					return this.create_pin(vert, PIN_ROD_END_IDX)
				}
			}
			else
			{
				if (pos.y < vert.pos.y - hw) {
					return this.create_pin(vert, PIN_ROD_START_IDX)
				} else if (pos.y > vert.pos.y + hw) {
					return this.create_pin(vert, PIN_ROD_END_IDX)
				}
			}
		}

		return nil
	}

	static calc_aabb(vert)
	{
		var expand_sz = true

		var size = nil
		if (vert.shape == SHAPE_CIRCLE)
		{
			var diam = SHAPE_CIRCLE_RADIUS * 2
			size = Vector2(diam, diam)
		}
		else if (vert.shape == SHAPE_CAPSULE_H)
		{
			size = Vector2(SHAPE_CAPSULE_LENGTH, SHAPE_CAPSULE_WIDTH)
		}
		else if (vert.shape == SHAPE_CAPSULE_V)
		{
			size = Vector2(SHAPE_CAPSULE_WIDTH, SHAPE_CAPSULE_LENGTH)
		}
		else if (vert.shape == SHAPE_ROD)
		{
			expand_sz = false
			if (VertexShape.is_shape_rod_hori(vert)) {
				size = Vector2(SHAPE_ROD_LENGTH, SHAPE_ROD_WIDTH)			
				size.x = size.x + PIN_RADIUS * 4
			} else {
				size = Vector2(SHAPE_ROD_WIDTH, SHAPE_ROD_LENGTH)			
				size.y = size.y + PIN_RADIUS * 4
			}
		}
		else if (vert.shape == SHAPE_PANEL)
		{
			expand_sz = false
			size = Vector2(SHAPE_PANEL_WIDTH, SHAPE_PANEL_HEIGHT)
		}

		if (!size) {
			return nil
		}

		if (expand_sz) {
			size.x = size.x + PIN_RADIUS * 4
			size.y = size.y + PIN_RADIUS * 4
		}

		return size
	}

	static get_match_pin_idx(f_pin, t_node)
	{
		var expects = f_pin.vert.pin_types_t[f_pin.type]
		for (var i in 0 .. expects.count) {
			for (var j in 0 .. t_node.pin_types_f.count) {
				if (expects[i] == t_node.pin_types_f[j]) {
					return j
				}
			}
		}

		return -1
	}

	static get_vert_pin_names(vert)
	{
		if (vert.shape == SHAPE_CIRCLE) {
			return PIN_CIRCLE_NAMES
		} else if (vert.shape == SHAPE_CAPSULE_H or vert.shape == SHAPE_CAPSULE_V) {
			return PIN_CAPSULE_NAMES
		} else if (vert.shape == SHAPE_ROD) {
			return PIN_ROD_NAMES
		} else if (vert.shape == SHAPE_PANEL) {
			return PIN_PANEL_NAMES
		} else {
			return nil
		}
	}

	static get_pin_name(pin)
	{
		var vert = pin.vert
		var type = pin.type

		if (vert.shape == SHAPE_PANEL) {
			if (vert.has_method("get_pin_name(_)")) {
				return vert.get_pin_name(pin)
			} else {
				return nil
			}
		}

		var names = this.get_vert_pin_names(vert)
		if (!names) {
			return nil
		} else {
			return names[type]
		}
	}

	static fetch_pin(vert, name)
	{
		if (vert.shape == SHAPE_PANEL) {
			if (vert.has_method("query_pin(_)")) {
				return vert.query_pin(name)
			} else {
				return nil
			}
		}

		var type = this.pin_name_to_type(vert, name)
		return Pin(vert, type)
	}

	static pin_name_to_type(vert, name)
	{
		if (vert.shape == SHAPE_PANEL) {
			return 0
		}

		var names = this.get_vert_pin_names(vert)
		if (!names) {
			return nil
		}

		for (var i in 0 .. names.count) {
			if (names[i] == name) {
				return i
			}
		}
		return -1
	}

	static is_shape_rod_hori(vert)
	{
		import "network.network" for Network

		var hori = true

		var s = nil
		var e = nil

		var pins = Network.neighbors_pins(vert, PIN_ROD_START_IDX)
		if (!pins.isEmpty) {
			s = pins[0]
		}
		pins = Network.neighbors_pins(vert, PIN_ROD_END_IDX)
		if (!pins.isEmpty) {
			e = pins[0]
		}

		if (!s or !e) {
			return hori
		}

		var sp = this.calc_pin_pos(s)
		var ep = this.calc_pin_pos(e)
		if (Math.abs(sp.y - ep.y) > Math.abs(sp.x - ep.x)) {
			hori = false
		}

		return hori
	}
}