import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_ARRAY
import "math" for Math

class Shader
{
	init(node)
	{
		this.node = node
		this.prog = nil
	}

	get_frame_count()
	{
		var count = 1
		for (var i in 0..this.node.imports.count) 
		{
			var pin = this.node.imports[i]
			if (pin["unif"] and pin.unif["type"] != "array") {
				var v = Blueprint.calc_input_value(this.node, i)
				if (v.value is List) {
					count = Math.max(count, v.value.count)
				}
			}
		}
		return count
	}

	update_unif_values_from_conns(frame)
	{
		for (var i in 0..this.node.imports.count)
		{
			var val = Blueprint.calc_input_value(this.node, i)
			if (val)
			{
				var pin = this.node.imports[i]

				var _v = nil
				if (val.type == VAR_TYPE_ARRAY)
				{
					if (pin["unif"] and pin.unif["type"] == "array")
					{
						var n = Math.min(val.value.count, pin.unif["value"].count)
						for (var i in 0..n) {
							this.set_uniform_value(pin.unif["value"][i], val.value[i].value)
						}
					}
					else
					{
						if (frame < val.value.count) {
							_v = val.value[frame].value
						} else if (!val.value.isEmpty) {
							_v = val.value[val.value.count - 1].value
						}
					}
				}
				else
				{
					_v = val.value
				}
				if (_v != nil and pin["unif"]) {
					this.set_uniform_value(pin.unif, _v)
				}
			}
		}
	}

	set_uniform_value(dst, src)
	{
		var dst_type = dst["type"]
		if (dst_type == "float" or dst_type == "int" or dst_type == "bool") {
			dst["value"][0] = src
		} else if (dst_type == "float2" or dst_type == "int2") {
			dst["value"][0] = src.x
			dst["value"][1] = src.y
		} else if (dst_type == "float3" or dst_type == "int3") {
			dst["value"][0] = src.x
			dst["value"][1] = src.y
			dst["value"][2] = src.z
		}  else if (dst_type == "float4" or dst_type == "int4") {
			dst["value"][0] = src.x
			dst["value"][1] = src.y
			dst["value"][2] = src.z
			dst["value"][3] = src.w
		} else if (dst_type == "mat2" or dst_type == "mat3" or dst_type == "mat4") {
			dst["value"] = [src]
		} else if (dst_type == "sampler" or dst_type == "image") {
			dst["value"] = [src.tex, src.sampler]
		} else if (dst_type == "ssbo") {
			dst["value"] = [src]
		}
	}

	update_uniforms(frame, unif)
	{
		if (unif["type"] == "array" or unif["type"] == "struct") {
			for (var u in unif["value"]) {
				this.update_uniforms(frame, u)
			}
		} else {
			this.prog.set_uniform_value(unif)
		}
	}

	update_uniforms(frame)
	{
		this.update_unif_values_from_conns(frame)

		for (var unif in this.node.uniforms) {
			this.update_uniforms(frame, unif)
		}
	}
}