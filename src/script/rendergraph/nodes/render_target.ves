import "render" for Render, Framebuffer
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "rendergraph.variant" for VarFrameBuffer, VarTexture, VarRenderBuffer, VAR_TYPE_TEXTURE, VAR_TYPE_FRAME_BUFFER, VAR_TYPE_RENDER_BUFFER
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "render" for Texture2D, Texture3D, Cubemap
import "math" for Math

class RenderTarget is Node
{
	init() 
	{
		super.init()
	
		this.imports = [
			Pin(this, "col0",   [ VAR_TYPE_TEXTURE, VAR_TYPE_RENDER_BUFFER ]),
			Pin(this, "col1",   [ VAR_TYPE_TEXTURE, VAR_TYPE_RENDER_BUFFER ]),
			Pin(this, "col2",   [ VAR_TYPE_TEXTURE, VAR_TYPE_RENDER_BUFFER ]),
			Pin(this, "col3",   [ VAR_TYPE_TEXTURE, VAR_TYPE_RENDER_BUFFER ]),
			Pin(this, "depth",  [ VAR_TYPE_TEXTURE, VAR_TYPE_RENDER_BUFFER ]),
			Pin(this, "mipmap", VAR_TYPE_NUMBER),			
		]
		this.exports = [
			Pin(this, "fbo", VAR_TYPE_FRAME_BUFFER)
		]

		this.width  = 0
		this.height = 0

		this.layout()

		this.fbo = nil
		this.attached = false
	}

	attachment(value, type)
	{
		var mipmap_level = 0
		var mipmap = Blueprint.calc_input_value(this, 5)
		if (mipmap) {
			mipmap_level = mipmap.value
		}

		if (value is VarTexture)
		{
			var tex = value.tex
			if (!tex) {
				return
			}

			if (tex is Texture2D)
			{
				if (this.width == 0) {
					this.width = tex.get_width()
					this.height = tex.get_height()
				}

				this.fbo.attach_tex(tex, type, "tex2d", mipmap_level)
				this.attached = true
			}
			else if (tex is Texture3D)
			{
				if (this.width == 0) {
					this.width  = tex.get_width()
					this.height = tex.get_height()
				}

				this.fbo.attach_tex(tex, type, "tex3d", mipmap_level)
				this.attached = true
			}			
			else if (tex is Cubemap)
			{
				if (this.width == 0) {
					this.width = tex.get_width()
					this.height = tex.get_height()
				}

				this.fbo.attach_tex(tex, type, "cubemap" + "%(value.cubemap_idx)", mipmap_level)
				this.attached = true
			}
		}
		else if (value is VarRenderBuffer)
		{
			var rbo = value.rbo
			if (!rbo) {
				return
			}

			this.fbo.attach_rbo(rbo, type)
			this.attached = true
		}
	}

	calc_value(idx)
	{
		if (!this.fbo) {
			this.fbo = Framebuffer.init()
		}

		for (var i in 0..5) {
			var v = Blueprint.calc_input_value(this, i)
			if (v)  {
				this.attachment(v.value, this.imports[i].name)
			}
		}

		var w = this.width
		var h = this.height
		var v_mipmap = Blueprint.calc_input_value(this, 5)
		if (v_mipmap) 
		{
			var mip = v_mipmap.value
            w = this.width * Math.pow(0.5, mip)
            h = this.height * Math.pow(0.5, mip)
		}

		var ret = VarFrameBuffer()
		ret.fbo      = this.fbo
		ret.width    = w
		ret.height   = h
		ret.attached = this.attached
		return Variant(VAR_TYPE_FRAME_BUFFER, ret)
	}
}