import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_MATRIX4, VAR_TYPE_ARRAY
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.node_param" for NodeParam
import "render" for Cubemap as tt_Cubemap, TextureSampler
import "rendergraph.variant" for VarTexture, VAR_TYPE_TEXTURE
import "graphics" for Graphics
import "gui" for GUI
import "rendergraph.draw_cubemap" for DRAW_CUBEMAP

class Cubemap is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "right",  VAR_TYPE_TEXTURE),
			Pin(this, "left",   VAR_TYPE_TEXTURE),
			Pin(this, "top",    VAR_TYPE_TEXTURE),
			Pin(this, "bottom", VAR_TYPE_TEXTURE),
			Pin(this, "front",  VAR_TYPE_TEXTURE),
			Pin(this, "back",   VAR_TYPE_TEXTURE)
		]
		this.exports = [
			Pin(this, "tex",   VAR_TYPE_TEXTURE),
			Pin(this, "sides", VAR_TYPE_ARRAY)
		]

		this.layout()

		this.tex = nil
		this.sampler = nil

		this.width  = 0
		this.height = 0
		this.format = "rgba8"

		this.preview = false

		this.params.add(NodeParam("unif_name", "u_cube_tex"))
	}

	calc_value(idx)
	{
		if (!this.tex)
		{
			var cube_texs = []
			for (var i in 0..6)
			{
				var v = Blueprint.calc_input_value(this, i)
				if (v and v.type == VAR_TYPE_TEXTURE and v.value.tex) {
					cube_texs.add(v.value.tex)
				}
			}
			if (cube_texs.count == 6) {
				this.tex = tt_Cubemap.init(cube_texs)
			}
		}

		if (idx == 0) 
		{
			var ret = VarTexture()
			ret.tex = this.tex
			ret.sampler = this.sampler
			return Variant(VAR_TYPE_TEXTURE, ret)			
		} 
		else if (idx == 1) 
		{
			var list = []
			for (var i in 0..6) 
			{
				var tex = VarTexture()
				tex.tex = this.tex

				tex.cubemap_idx = i
				list.add(tex)
			}
			return Variant(VAR_TYPE_ARRAY, list)
		}

		return nil
	}

	shader_gen(node, idx)
	{
		var module = node.find_value("module")

		var unif_pair = node.tree.ud["global"].uniforms.query(this)
		if (!unif_pair) 
		{
			var global = node.tree.ud["global"]

			var name = this.query_param("unif_name").value
			var unif = global.gen.add_uniform(module, name, "cubemap")
			var unif_name = global.gen.query_unif_name(unif)

			unif_pair = [unif, unif_name]
			node.tree.ud["global"].uniforms.add(this, unif_pair)
		}

		if (idx == 0)
		{
			var bb = node.find_value("bb")
			return bb.load(unif_pair[0])
		}
		else
		{
			return nil
		}
	}

	bind_uniforms(prog, uniforms)
	{
		var unif_pair = uniforms.query(this)
		if (unif_pair and unif_pair[1]) {
			prog.set_uniform_value({ "name" : unif_pair[1], "type" : "sampler", "value" : [this.tex, this.sampler] })
		}
	}

	draw(mt, cam_mt)
	{
		super.draw(mt, cam_mt)

		if (this.preview and this.tex) {
			DRAW_CUBEMAP.draw(this.tex, mt, this.style.width)
		}
	}

	to_string(name) 
	{
		return super.to_string(name) + "
%(name).init_texture(%(this.width), %(this.height), \"%(this.format)\")
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var preview = GUI.checkbox(ctx, "preview", this.preview, x, y)
		if (preview != this.preview) {
			this.preview = preview
			dirty = true
		}

		return dirty
	}

	init_texture(width, height, format)
	{
		this.width  = width
		this.height = height
		this.format = format

		if (width == 0 or height == 0) {
			return
		}

		this.tex = tt_Cubemap.init(width, height, format)
		this.sampler = TextureSampler.init("linear_clamp_mipmap")
	}
}