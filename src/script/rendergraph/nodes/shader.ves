import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_STRING
import "blueprint.node_helper" for NodeHelper
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "rendergraph.variant" for VAR_TYPE_SHADER
import "rendergraph.variates.shader" for Shader as var_Shader
import "rendergraph.components.shader_uniforms" for ShaderUniforms
import "rendergraph.nodes.shader_code" for ShaderCode
import "gui" for GUI
import "render" for Shader as tt_Shader
import "filesystem" for Filesystem

class Shader is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "vs", VAR_TYPE_STRING),
			Pin(this, "fs", VAR_TYPE_STRING),
			Pin(this, "cs", VAR_TYPE_STRING),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_SHADER)
		]

		this.vs  = ""
		this.tcs = ""
		this.tes = ""		
		this.gs  = ""
		this.fs  = ""
		this.cs  = ""

		this.shader = var_Shader(this)
		this.need_rebuild = false

		this.uniforms = []

		this.params.add(NodeParam("inc_dir", ""))

		this.layout()
	}

	calc_value(idx)
	{
		return Variant(VAR_TYPE_SHADER, this.shader)
	}

	get_shader_uniforms(inc_dir)
	{
		var uniforms = []

		ShaderUniforms.get_shader_uniforms("vertex",    this.vs,  inc_dir, "glsl", uniforms, "main")
		ShaderUniforms.get_shader_uniforms("tess_ctrl", this.tcs, inc_dir, "glsl", uniforms, "main")
		ShaderUniforms.get_shader_uniforms("tess_eval", this.tes, inc_dir, "glsl", uniforms, "main")
		ShaderUniforms.get_shader_uniforms("geometry",  this.gs,  inc_dir, "glsl", uniforms, "main")
		ShaderUniforms.get_shader_uniforms("pixel",     this.fs,  inc_dir, "glsl", uniforms, "main")
		ShaderUniforms.get_shader_uniforms("compute",   this.cs,  inc_dir, "glsl", uniforms, "main")

		return uniforms
	}

	prepare_codes()
	{
		for (var p in this.imports)
		{
			var v_code = Blueprint.calc_input_value(this, p.name)
			if (v_code and v_code.type == VAR_TYPE_STRING) 
			{
				this[p.name] = v_code.value

				// fixme
				var n_code = Blueprint.get_input_node(this, p.name)
				if (n_code and n_code is ShaderCode) {
					var inc_dir = Filesystem.get_directory(n_code.filepath)
					this.query_param("inc_dir").value = inc_dir
				}
			}
		}
	}

	render_gen()
	{
		if (!this.need_rebuild and this.shader.prog) {
			return
		}

		this.prepare_codes()

		var inc_dir = this.query_param("inc_dir").value
		inc_dir = Filesystem.get_absolute_path(inc_dir)

		this.shader.prog = nil
		if (this.cs != "") {
			this.shader.prog = tt_Shader.init(this.cs, inc_dir)
		} else if (this.vs != "" and this.fs != "") {
			this.shader.prog = tt_Shader.init(this.vs, this.tcs, this.tes, this.gs, this.fs, inc_dir)
		}

		if (this.shader.prog)
		{
			this.uniforms = this.get_shader_uniforms(inc_dir)
			for (var unif in this.uniforms) {
				ShaderUniforms.add_uniform_to_imports(this, unif)
			}

			this.layout()
		}
	}

	layout() 
	{
		super.layout()

		this.style.width = 180

		for (var unif in this.uniforms) {
			ShaderUniforms.layout(this, unif)
		}
	}

	on_connected(pin)
	{
		if (pin.is_input) {
			this.render_gen()
		}
	}

	set_uniform(unif, name, value)
	{
		if (unif["type"] == "array" or unif["type"] == "struct")
		{
			for (var u in unif["value"]) {
				this.set_uniform(u, name, value)
			}		
		}
		else if (unif["name"] == name)
		{
			for (var i in 0..value.count) {
				unif["value"][i] = value[i]
			}
		}
	}

	set_uniform(name, value)
	{
		for (var unif in this.uniforms) {
			this.set_uniform(unif, name, value)
		}
	}

	uniform_to_string(name, unif)
	{
		var ret = ""

		for (var p in this.imports) {
			if (p.name == unif["name"]) {
				if (!p.conns.isEmpty) {
					return ret
				}
			}
		}

		if (unif["type"] == "array" or unif["type"] == "struct") 
		{
			for (var u in unif["value"]) {
				ret = ret + this.uniform_to_string(name, u)
			}
		} 
		else 
		{
			if (unif["type"] == "float" or unif["type"] == "int" or unif["type"] == "bool") {
				ret = "%(name).set_uniform(\"%(unif["name"])\", [ %(unif["value"][0]) ])\n"
			} else if (unif["type"] == "float2" or unif["type"] == "int2") {
				ret = "%(name).set_uniform(\"%(unif["name"])\", [ %(unif["value"][0]), %(unif["value"][1]) ])\n"
			} else if (unif["type"] == "float3" or unif["type"] == "int3") {
				ret = "%(name).set_uniform(\"%(unif["name"])\", [ %(unif["value"][0]), %(unif["value"][1]), %(unif["value"][2]) ])\n"
			} else if (unif["type"] == "float4" or unif["type"] == "int4") {
				ret = "%(name).set_uniform(\"%(unif["name"])\", [ %(unif["value"][0]), %(unif["value"][1]), %(unif["value"][2]), %(unif["value"][3]) ])\n"
			}
		}

		return ret
	}

	calc_store_codes(type)
	{
		var v_code = Blueprint.calc_input_value(this, type)
		if (v_code and v_code.type == VAR_TYPE_STRING) {
			return ""
		} else {
			return this[type].replace("\"", "\\\"")		
		}
	}

	to_string(name) 
	{
		var code = super.to_string(name)

		var vs = this.calc_store_codes("vs")
		var tcs = this.calc_store_codes("tcs")
		var tes = this.calc_store_codes("tes")
		var gs = this.calc_store_codes("gs")
		var fs = this.calc_store_codes("fs")
		var cs = this.calc_store_codes("cs")
		code = code + "
%(name).vs = \"%(vs)\"
%(name).tcs = \"%(tcs)\"
%(name).tes = \"%(tes)\"
%(name).gs = \"%(gs)\"
%(name).fs = \"%(fs)\"
%(name).cs = \"%(cs)\"
%(name).render_gen()
"
		for (var unif in this.uniforms) {
			code = code + this.uniform_to_string(name, unif)
		}
		return code
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		for (var unif in this.uniforms) {
			var y_d = ShaderUniforms.draw_gui(this, ctx, unif, x, y)
			y = y_d[0]
			if (y_d[1]) {
				dirty = true
			}
		}

		return dirty
	}
}