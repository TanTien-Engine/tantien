import "render" for Render
import "graphics" for Graphics
import "render" for Texture2D, Texture3D, Cubemap, Framebuffer
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "maths" for Matrix2D

var VAR_TYPE_VERTEX_ARRAY   = "va"
var VAR_TYPE_SHADER         = "shader"
var VAR_TYPE_TEXTURE        = "texture"
var VAR_TYPE_FRAME_BUFFER   = "fbo"
var VAR_TYPE_RENDER_BUFFER  = "rbo"
var VAR_TYPE_MODEL          = "model"
var VAR_TYPE_RENDER_STATE   = "rs"
var VAR_TYPE_STORAGE_BUFFER = "ssbo"
var VAR_TYPE_TEXTURE_BUFFER = "tbo"

class VarTexture
{
	init() 
	{
		this.tex = nil
		this.sampler = nil

		this.cubemap_idx = -1		
	}

	print(x, y, width, cam_mt)
	{
		if (!this.tex) {
			return
		}

		if (this.tex is Texture2D)
		{
			var scale = width / this.tex.get_width()
			var h = this.tex.get_height() * scale

			//Graphics.flush()
			//Graphics.set_intense(50)
			Graphics.draw_texture(this.tex, [x, y - h * 0.5], 0, [scale, scale], [0, 0])
			//Graphics.flush()
			//Graphics.set_intense(1)
		}
		else if (this.tex is Texture3D)
		{
			var scale = width / this.tex.get_width()
			var h = this.tex.get_height() * scale

			//Graphics.flush()
			//Graphics.set_intense(50)
			Graphics.draw_texture(this.tex, [x, y - h * 0.5], 0, [scale, scale], [0, 0])
			//Graphics.flush()
			//Graphics.set_intense(1)
		}
		else if (this.tex is Cubemap)
		{
			var mt = Matrix2D.init()
			mt.transform(x, y + 80, 0, 1, 1, 0, 0, 0, 0)

			import "rendergraph.draw_cubemap" for DRAW_CUBEMAP			
			DRAW_CUBEMAP.draw(this.tex, mt, width, cam_mt)
		}
	}
}

class VarFrameBuffer
{
	init()
	{
		this.fbo = nil
		this.width  = 0
		this.height = 0
		this.attached = false

		this.prev_fbo = nil
		this.prev_vp = nil
	}

	bind()
	{
		this.prev_fbo = Render.get_fbo()
		this.prev_vp  = Render.get_viewport()

		if (this.fbo and this.width > 0 and this.height > 0 and this.attached) {
			Render.set_fbo(this.fbo)
			Render.set_viewport([ 0, 0, this.width, this.height ])
		}
	}

	unbind()
	{
		Render.set_fbo(this.prev_fbo)
		Render.set_viewport(this.prev_vp)

		this.prev_fbo = nil
		this.prev_vp = nil		
	}
}

class VarRenderBuffer
{
	init()
	{
		this.rbo = nil
	}
}

class VarModel
{
	init()
	{
		this.model = nil
	}
}

fun value_to_variant(variant, value)
{
	if (value is Texture2D or value is Texture3D)
	{
		variant.type = VAR_TYPE_TEXTURE
		variant.value = VarTexture()
		variant.value.tex = value
		return true
	}
	else
	{
		return false
	}
}