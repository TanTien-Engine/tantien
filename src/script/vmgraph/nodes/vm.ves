import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_PLANE, VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "vmgraph.variant" for VAR_TYPE_BYTECODES
import "vm" for VM

class Vm is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "codes", VAR_TYPE_BYTECODES),
			Pin(this, "r_out", VAR_TYPE_INTEGER),
		]
		this.exports = [
			Pin(this, "val", VAR_TYPE_ANY),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_codes = Blueprint.calc_input_value(this, 0)
		if (!v_codes) {
			return nil
		}

		var vm = VM.init(v_codes.value)
		vm.run()

		var v_reg_out = Blueprint.calc_input_value(this, 1)
		if (!v_reg_out) {
			return nil
		}

		var reg = v_reg_out.value
		if (reg < 0) {
			return nil
		}

//		var num = vm.load_number(reg)

//		return Variant(VAR_TYPE_NUMBER, num)

//		var plane = vm.load_polyface(reg)
//		return Variant(VAR_TYPE_PLANE, plane)

		return this.return_polytope(vm, reg)
	}

	return_polytope(vm, reg)
	{
		var poly = vm.load_polytope(reg)
		if (!poly) {
			return nil
		}

		var geo = VarGeo()

		if (poly is List) {
			geo.shape = Brush(poly)
		} else {
			geo.shape = Brush([ poly ])
		}

		return Variant(VAR_TYPE_GEO, geo)
	}
}