import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.dirty_types" for DIRTY_OPCODES
import "vmgraph.variant" for VAR_TYPE_BYTECODES
import "vm" for Bytecodes, Compiler as tt_Compiler

class Compiler is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "val", VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "codes", VAR_TYPE_BYTECODES),
		]

		this.layout()

		this.opcodes = nil
	}

	on_pin_dirty(pin, type)
	{
		if (type == DIRTY_OPCODES)
		{
			Blueprint.send_pin_dirty(this.exports[0], type)
		}
		else
		{
			if (pin.is_input) {
				this.opcodes = nil
				Blueprint.send_pin_dirty(this.exports[0], type)
			}
		}
	}

	calc_value(idx)
	{
		if (!this.opcodes)
		{
			var compiler = tt_Compiler.init()
			var opcodes = Bytecodes.init()

			var r_dst = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
			opcodes.set_ret_reg(r_dst)
			compiler.free_reg(r_dst)
			
			compiler.finish()

			this.opcodes = opcodes
		}

		return Variant(VAR_TYPE_BYTECODES, this.opcodes)
	}
}