import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint
import "blueprint.dirty_types" for DIRTY_OPCODES, DIRTY_COMPILE
import "logger.logger" for Logger
import "vmgraph.variant" for VAR_TYPE_BYTECODES
import "vm" for Bytecodes, Compiler as tt_Compiler, CodeRegen, CodeTools

class Compiler is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "val", VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "codes", VAR_TYPE_BYTECODES),
			Pin(this, "r_out", VAR_TYPE_INTEGER),
		]

		this.layout()

		this.opcodes = nil
		this.out_reg = -1
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		if (type != DIRTY_OPCODES) 
		{
			this.opcodes = nil
		}
		else
		{
			if (this.opcodes and msg)
			{
				var codes = this.opcodes

				for (var i = 0; i < msg.count; i = i + 2)
				{
					var pos = msg[i]
					var num = msg[i+1]
					CodeRegen.write_num(codes, pos, num)
				}
			}
		}
	}

	calc_value(idx)
	{
		if (!this.opcodes)
		{
			Logger.info("compile")

			var compiler = tt_Compiler.init()
			var opcodes = Bytecodes.init()

			Blueprint.send_pin_dirty_root(this.imports[0], DIRTY_COMPILE)

			var r_dst = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
			compiler.free_reg(r_dst)
			
			compiler.expect_reg_free()

			//compiler.print_block_tree()

			//CodeTools.decompiler(opcodes, 0, 0)

			this.opcodes = opcodes
			this.out_reg = r_dst
		}

		if (idx == 0) 
		{
			return Variant(VAR_TYPE_BYTECODES, this.opcodes)
		}
		else if (idx == 1)
		{
			return Variant(VAR_TYPE_INTEGER, this.out_reg)
		}
		else
		{
			import "logger.logger" for Logger
			Logger.error("Not Implemented!")

			return nil
		}
	}
}