import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "blueprint.dirty_types" for DIRTY_OPCODES
import "logger.logger" for Logger
import "vmgraph.variant" for VAR_TYPE_BYTECODES, VAR_TYPE_PROFILE
import "vm" for Optimizer as tt_Optimizer, CodeTools

class Optimizer is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "codes",   VAR_TYPE_BYTECODES),
			Pin(this, "profile", VAR_TYPE_PROFILE),
		]
		this.exports = [
			Pin(this, "codes", VAR_TYPE_BYTECODES),
		]

		this.layout()

		this.optim = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		if (type != DIRTY_OPCODES) 
		{
			this.optim = nil
		}
		else
		{
			if (this.optim and msg)
			{
				for (var i = 0; i < msg.count; i = i + 2)
				{
					var pos = msg[i]
					var num = msg[i+1]
					this.optim.write_num(pos, num)
				}
				this.optim.flush()
			}
		}
	}

	calc_value(idx)
	{
		if (!this.optim)
		{
			var v_code = Blueprint.calc_input_value(this, 0)
			if (!v_code) {
				return nil
			}

			var prof = nil
			var v_prof = Blueprint.calc_input_value(this, 1)
			if (v_prof) {
				prof = v_prof.value
			}

			Logger.info("vmgraph optimize")

			this.optim = tt_Optimizer.init(v_code.value)
			this.optim.optimize(prof)
		}

		var new_codes = this.optim.get_codes()
		if (new_codes) {
			return Variant(VAR_TYPE_BYTECODES, new_codes)		
		} else {
			return Blueprint.calc_input_value(this, 0)
		}
	}
}