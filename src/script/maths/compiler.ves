class Compiler
{
	static create_bool(compiler, opcodes, bool)
	{
		var reg = compiler.new_reg()
		if (reg) {
			opcodes.store_bool(reg, bool)
		}	
		return reg
	}

	static create_number(compiler, opcodes, num)
	{
		var reg = compiler.new_reg()
		if (reg) {
			opcodes.store_num(reg, num)	
		}	
		return reg
	}

	static create_vec2(compiler, opcodes, vec2)
	{
		var reg = compiler.new_reg()
		if (reg) {
			opcodes.vec2_create_i(reg, [ vec2.x, vec2.y ])		
		}
		return reg
	}

	static create_vec3(compiler, opcodes, vec3)
	{
		var reg = compiler.new_reg()
		if (reg) {
			opcodes.vec3_create_i(reg, vec3.x, vec3.y, vec3.z)
		}
		return reg
	}

	static create_vec4(compiler, opcodes, vec4)
	{
		var reg = compiler.new_reg()
		if (reg) {
			opcodes.vec4_create_i(reg, [ vec4.x, vec4.y, vec4.z, vec4.w ])		
		}
		return reg
	}

	static create_mat4(compiler, opcodes)
	{
		var reg = compiler.new_reg()
		if (reg) {
			opcodes.create_mat4(reg)		
		}
		return reg
	}

	static create_cube(compiler, opcodes, r_min, r_max)
	{
		var reg = compiler.new_reg()
		if (reg) {
			opcodes.create_cube(reg, r_min, r_max)		
		}
		return reg
	}	
}