import "math" for Math

class Vector2
{
	init() {
		this.x = 0
		this.y = 0
	}

	init(x, y) {
		this.set(x, y)
	}

	toString() {
		return "::maths::vector::Vector2(%(this.x), %(this.y))"
	}

	clone() {
		return Vector2(this.x, this.y)
	}

	set(x, y) {
		this.x = x
		this.y = y	
	}

	add(v)
	{
		return Vector2(this.x + v.x, this.y + v.y)
	}

	rotate(rad)
	{
		var s = Math.sin(rad)
		var c = Math.cos(rad)
		var x = this.x * c - this.y * s
		var y = this.x * s + this.y * c
		this.x = x
		this.y = y
	}

	rotated(rad)
	{
		var ret = this.clone()
		ret.rotate(rad)
		return ret
	}

	from_list(list) {
		this.x = list[0]
		this.y = list[1]
	}
	to_list() {
		return [this.x, this.y]	
	}
}

class Vector3
{
	init() {
		this.x = 0
		this.y = 0
		this.z = 0
	}

	init(v3) {
		this.set(v3.x, v3.y, v3.z)
	}

	init(x, y, z) {
		this.set(x, y, z)
	}

	toString() {
		return "::maths::vector::Vector3(%(this.x), %(this.y), %(this.z))"
	}

	clone() {
		return Vector3(this.x, this.y, this.z)
	}

	set(x, y, z) {
		this.x = x
		this.y = y
		this.z = z
	}

	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
	}

	normalize() 
	{
		var len = this.length()
		if (len == 0) {
			return
		}
		var s = 1.0 / len
		this.x = this.x * s
		this.y = this.y * s
		this.z = this.z * s
	}

	cross(v)
	{
		return Vector3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)
	}

	dot(v)
	{
		 return this.x * v.x + this.y * v.y + this.z * v.z
	}

	add(v)
	{
		return Vector3(this.x + v.x, this.y + v.y, this.z + v.z)
	}

	sub(v)
	{
		return Vector3(this.x - v.x, this.y - v.y, this.z - v.z)
	}

	mul(v)
	{
		return Vector3(this.x * v, this.y * v, this.z * v)
	}

	div(v)
	{
		return Vector3(this.x / v, this.y / v, this.z / v)
	}

	from_list(list) {
		this.x = list[0]
		this.y = list[1]
		this.z = list[2]
	}
	to_list() {
		return [this.x, this.y, this.z]	
	}
}

class Vector4
{
	init() {
		this.x = 0
		this.y = 0
		this.z = 0
		this.w = 0
	}

	init(x, y, z, w) {
		this.set(x, y, z, w)
	}

	toString() {
		return "::maths::vector::Vector4(%(this.x), %(this.y), %(this.z), %(this.w))"
	}

	clone() {
		return Vector4(this.x, this.y, this.z, this.w)
	}

	set(x, y, z, w) {
		this.x = x
		this.y = y
		this.z = z
		this.w = w		
	}

	from_list(list) {
		this.x = list[0]
		this.y = list[1]
		this.z = list[2]
		this.w = list[3]
	}
	to_list() {
		return [this.x, this.y, this.z, this.w]	
	}
}