import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ARRAY, VAR_TYPE_NUMBER3, VAR_TYPE_MATRIX4
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "scenegraph.variant" for VAR_TYPE_SPRITE, VarSprite
import "geograph.variant" for VAR_TYPE_GEO, VAR_TYPE_PLANE, VarGeo
import "geograph.brush" for Brush
import "maths.vector" for Vector3
import "maths.compiler" for Compiler as math_Compiler
import "maths" for Matrix44, Float3

class Transform3d is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "obj",     [ VAR_TYPE_GEO, VAR_TYPE_SPRITE, VAR_TYPE_PLANE, VAR_TYPE_NUMBER3, VAR_TYPE_ARRAY ]),
			Pin(this, "translate", VAR_TYPE_NUMBER3),
			Pin(this, "rotate",    VAR_TYPE_NUMBER3),
			Pin(this, "scale",     VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "obj", [ VAR_TYPE_GEO, VAR_TYPE_SPRITE, VAR_TYPE_PLANE, VAR_TYPE_ARRAY ]),
			Pin(this, "mat", VAR_TYPE_MATRIX4),
		]

		this.layout()
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var v_obj = Blueprint.calc_input_value(this, 0)
			if (!v_obj) {
				return nil
			}

			var mat = this.calc_mat()

			var result = []
			this.transform_impl(v_obj, mat, result)
			if (result.count == 0) {
				return nil
			} else if (result.count == 1) {
				return result[0]
			} else {
				return Variant(result)
			}
		}
		else if (idx == 1)
		{
			var mat = this.calc_mat()
			return Variant(mat)
		}

		return nil
	}

	calc_opcodes(compiler, opcodes, idx)
	{
		if (idx == 0)
		{
			var r_obj = Blueprint.calc_input_opcodes(this, 0, compiler, opcodes)
			if (r_obj < 0) {
				return -1
			}

			var r_mat = this.calc_mat_opcodes(compiler, opcodes)
			if (r_mat < 0) {
				return -1
			}

			opcodes.transform_unknown(r_obj, r_mat)

			compiler.free_reg(r_mat)

			return r_obj
		}
		else if (idx == 1)
		{
			return this.calc_mat_opcodes(compiler, opcodes)
		}

		return -1
	}

	calc_mat()
	{
		// scale
		var sx = 1
		var sy = 1
		var sz = 1
		var v_scale = Blueprint.calc_input_value(this, 3)
		if (v_scale) {
			sx = v_scale.value.x
			sy = v_scale.value.y
			sz = v_scale.value.z
		}

		var scale_mat = Matrix44.init()
		scale_mat.scale(sx, sy, sz)		

		// translate
		var x = 0
		var y = 0
		var z = 0
		var v_translate = Blueprint.calc_input_value(this, 1)
		if (v_translate) {
			x = v_translate.value.x
			y = v_translate.value.y
			z = v_translate.value.z
		}

		var trans_mat = Matrix44.init()
		trans_mat.translate(x, y, z)

		// rotate
		var rx = 0
		var ry = 0
		var rz = 0
		var v_rotate = Blueprint.calc_input_value(this, 2)
		if (v_rotate) {
			rx = v_rotate.value.x
			ry = v_rotate.value.y
			rz = v_rotate.value.z
		}

		var rot_mat = Matrix44.init()
		rot_mat.rotate(rx, ry, rz)

		var mat = Matrix44.init()

		mat.transform_mat4(scale_mat)
		mat.transform_mat4(rot_mat)
		mat.transform_mat4(trans_mat)

		return mat
	}

	calc_mat_opcodes(compiler, opcodes)
	{
		var r_mat = math_Compiler.create_mat4(compiler, opcodes)

		// scale
		var r_scale = Blueprint.calc_input_opcodes(this, 3, compiler, opcodes)
		if (r_scale >= 0) 
		{
			opcodes.mat4_scale(r_mat, r_scale)
			compiler.free_reg(r_scale)
		}

		// rotate
		var r_rotate = Blueprint.calc_input_opcodes(this, 2, compiler, opcodes)		
		if (r_rotate >= 0) 
		{
			opcodes.mat4_rotate(r_mat, r_rotate)
			compiler.free_reg(r_rotate)
		}

		// translate
		var r_translate = Blueprint.calc_input_opcodes(this, 1, compiler, opcodes)
		if (r_translate >= 0) 
		{
			opcodes.mat4_translate(r_mat, r_translate)
			compiler.free_reg(r_translate)
		}

		return r_mat
	}

	transform_impl(v_obj, mat, result)
	{
		if (v_obj.type == VAR_TYPE_ARRAY) {
			for (var v in v_obj.value) {
				this.transform_impl(v, mat, result)
			}
		} else if (v_obj.type == VAR_TYPE_GEO) {
			result.add(this.transform_geo(v_obj.value, mat))
		} else if (v_obj.type == VAR_TYPE_SPRITE) {
			result.add(this.transform_spr(v_obj.value, mat))
		} else if (v_obj.type == VAR_TYPE_PLANE) {
			result.add(this.transform_plane(v_obj.value, mat))	
		} else if (v_obj.type == VAR_TYPE_NUMBER3) {
			result.add(this.transform_num3(v_obj.value, mat))	
		}
	}

	transform_geo(geo, mat)
	{
		if (geo.shape is Brush) 
		{
			var brush = geo.shape.clone()
			brush.transform(mat)

			var new_geo = VarGeo()
			new_geo.shape = brush
			return Variant(VAR_TYPE_GEO, new_geo)
		}

		return nil
	}

	transform_spr(spr, mat)
	{
		var new_spr = spr.clone()

		if (!new_spr.transform) {
			new_spr.transform = Matrix44.init()
		}
		new_spr.transform.transform_mat4(mat)

		return Variant(VAR_TYPE_SPRITE, new_spr)
	}

	transform_plane(plane, mat)
	{
		var new_p = plane.clone()
		new_p.transform(mat)
		return Variant(VAR_TYPE_PLANE, new_p)
	}

	transform_num3(num3, mat)
	{
		var p = Float3.init(num3.x, num3.y, num3.z)
		p.transform(mat)
		return Variant(Vector3(p.x(), p.y(), p.z()))
	}	
}