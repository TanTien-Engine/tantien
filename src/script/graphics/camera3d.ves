import "maths.vector" for Vector3
import "math" for Math
import "maths" for Matrix44, Float3
import "graphics" for Graphics

class Camera3D
{
	init() 
	{
		this.position = Vector3(0, 0, 3)
		this.front    = Vector3(0, 0, -1)
		this.up       = Vector3(0, 1, 0)

		this.right    = Vector3()
		this.world_up = Vector3(0, 1, 0)

	    this.yaw   = -90.0
	    this.pitch = 0

		this.zoom = 45.0
	}

	update_vectors()
	{
		this.front.x = Math.cos(Math.radians(this.yaw)) * Math.cos(Math.radians(this.pitch))		
		this.front.y = Math.sin(Math.radians(this.pitch))
		this.front.z = Math.sin(Math.radians(this.yaw)) * Math.cos(Math.radians(this.pitch))

		this.front.normalize()

		this.right = this.front.cross(this.world_up)
		this.right.normalize()
		this.up = this.right.cross(this.front)
		this.up.normalize()
	}

	calc_mat()
	{
		var center = Vector3()
		center.x = this.position.x + this.front.x
		center.y = this.position.y + this.front.y
		center.z = this.position.z + this.front.z

		var mat = Matrix44.init()
		mat.lookat(this.position, center, this.up)
		return mat
	}

	move(dx, dy, dz)
	{
		this.position.x = this.position.x + dx
		this.position.y = this.position.y + dy
		this.position.z = this.position.z + dz
	}

	rotate(yaw, pitch)
	{
		this.yaw = this.yaw + yaw
		while (this.yaw > 180) {
			this.yaw = this.yaw - 360
		}
		while (this.yaw < -180) {
			this.yaw = this.yaw + 360
		}

		this.pitch = this.pitch + pitch
		if (this.pitch < -90) {
			this.pitch = -90
		} else if (this.pitch > 90) {
			this.pitch = 90
		}
	}

	screen2world(screen_pos, fovy) 
	{
	    // p = p0 + t * v
	    // (p - p1) dot n = 0
		var dir = this.screen2dir(screen_pos, fovy)
		var n = Vector3(0, 1, 0)
	    var t = - this.position.dot(n) / dir.dot(n)
	    return Vector3(this.position.x + t * dir.x, this.position.y + t * dir.y, this.position.z + t * dir.z)
	}

	screen2dir(screen_pos, fovy)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

	    var aspect = w / h
	    var tan_half_fovy = Math.tan(fovy / 2 * 3.1416 / 180.0)

	    var hw = w * 0.5
	    var hh = h * 0.5

	    var x = (screen_pos.x - hw) / hw * tan_half_fovy * aspect
	    var y = -(screen_pos.y - hh) / hh * tan_half_fovy
	    var z = -1
		var p = Float3.init(x, y, z)

		var inv_rot = Matrix44.init()
		inv_rot.from_rotate_mat(this.calc_mat())

		inv_rot.inverse()
		p.transform(inv_rot)

		var ret = Vector3(p.x(), p.y(), p.z())
		ret.normalize()

		return ret
	}
}