import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_STRING
import "blueprint.blueprint" for Blueprint
import "dbgraph.variant" for VAR_TYPE_DB_FILE, VAR_TYPE_RTREE
import "logger.logger" for Logger
import "db" for RTree

class Rtree is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "db",    VAR_TYPE_DB_FILE),
			Pin(this, "model", VAR_TYPE_STRING),
		]
		this.exports = [
			Pin(this, "tree", VAR_TYPE_RTREE),
		]

		this.layout()

		this.rtree = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		this.vm = nil
	}

	calc_value(idx)
	{
		if (!this.rtree) {
			this.rtree = this.calc_rtree_impl(idx)
		}

		return Variant(VAR_TYPE_RTREE, this.rtree)
	}

	calc_rtree_impl(idx)
	{
		Logger.info("rtree")

		var rtree = nil

		var v_db = Blueprint.calc_input_value(this, 0)
		if (v_db and v_db.value) 
		{
			rtree = RTree.init(v_db.value)
		}
		else
		{
			rtree = RTree.init()
			var v_model = Blueprint.calc_input_value(this, 1)
			if (v_model) {
				rtree.load_from_file(v_model.value)
			}
		}

		return rtree
	}
}
