import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "dbgraph.variant" for VAR_TYPE_RTREE, VAR_TYPE_RKEY
import "db" for RKey

class Query is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "tree", VAR_TYPE_RTREE),
			Pin(this, "key", [ VAR_TYPE_RKEY, VAR_TYPE_GEO ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("tmin", 0))
		this.params.add(NodeParam("tmax", 1))

		this.layout()
	}

	calc_value(idx)
	{
		var v_tree = Blueprint.calc_input_value(this, 0)
		if (!v_tree) {
			return nil
		}

		var v_key = Blueprint.calc_input_value(this, 1)
		if (!v_key) {
			return nil
		}

		var key = nil
		if (v_key.type == VAR_TYPE_RKEY) {
			key = v_key.value
		} else if (v_key.type == VAR_TYPE_GEO) {
			key = RKey.init(v_key.value.shape)
		}
		if (!key) {
			return nil
		}

		var geos = []

		var tmin = this.query_param("tmin").value
		var tmax = this.query_param("tmax").value

//		var polys = v_tree.value.query(key, tmin, tmax)
		var polys = v_tree.value.query_with_time(key, tmin, tmax)
		for (var poly in polys)
		{
			var geo = VarGeo()
			geo.shape = Brush([ poly ])
			geos.add(Variant(VAR_TYPE_GEO, geo))
		}

		return Variant(VAR_TYPE_ARRAY, geos)
	}
}