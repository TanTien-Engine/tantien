import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_BOOLEAN, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "rendergraph.variant" for VAR_TYPE_TEXTURE

class Uniform is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()

		this.params.add(NodeParam("unif_name", "unif"))
	}

	shader_gen(node, idx)
	{
		var unif_pair = node.tree.ud["global"].uniforms.query(this)
		if (!unif_pair) 
		{
			var val = Blueprint.calc_input_value(this, 0)
			if (!val) {
				return nil
			}

			var name = this.query_param("unif_name").value
			var type = ""
			if (val.type == VAR_TYPE_BOOLEAN) {
				type = "bool"
			} else if (val.type == VAR_TYPE_INTEGER) {
				type = "int"
			} else if (val.type == VAR_TYPE_NUMBER) {
				type = "float"
			} else if (val.type == VAR_TYPE_NUMBER2) {
				type = "vec2"
			} else if (val.type == VAR_TYPE_NUMBER3) {
				type = "vec3"
			} else if (val.type == VAR_TYPE_NUMBER4) {
				type = "vec4"
			} else {
				return nil
			}

			var global = node.tree.ud["global"]
			var module = node.find_value("module")

			var unif = global.gen.add_uniform(module, name, type)
			var unif_name = global.gen.query_unif_name(unif)

			unif_pair = [unif, unif_name]
			node.tree.ud["global"].uniforms.add(this, unif_pair)
		}

		if (unif_pair[0]) {
			var bb = node.find_value("bb")
			return bb.load(unif_pair[0])
		} else {
			return nil
		}
	}

	query_unif_name(uniforms)
	{
		var unif_pair = uniforms.query(this)
		if (unif_pair) {
			return unif_pair[1]
		}

		return nil
	}

	bind_uniforms(prog, uniforms)
	{
		var unif_name = this.query_unif_name(uniforms)
		if (!unif_name) {
			return nil
		}

		var val = Blueprint.calc_input_value(this, 0)
		if (!val) {
			return nil
		}

		this.bind_unif_val(prog, val, unif_name)

		return val
	}

	bind_unif_val(prog, val, unif_name)
	{
		var type = ""
		var value = []

		if (val.type == VAR_TYPE_BOOLEAN) {
			type = "int"
			if (val.value) {
				value.add(1)
			} else {
				value.add(0)			
			}
		} else if (val.type == VAR_TYPE_INTEGER) {
			type = "int"
			value.add(val.value)		
		} else if (val.type == VAR_TYPE_NUMBER) {
			type = "float"
			value.add(val.value)
		} else if (val.type == VAR_TYPE_NUMBER2) {
			type = "float2"
			value.add(val.value.x)
			value.add(val.value.y)
		} else if (val.type == VAR_TYPE_NUMBER3) {
			type = "float3"
			value.add(val.value.x)
			value.add(val.value.y)
			value.add(val.value.z)
		} else if (val.type == VAR_TYPE_NUMBER4) {
			type = "float4"
			value.add(val.value.x)
			value.add(val.value.y)
			value.add(val.value.z)
			value.add(val.value.w)			
		} else {
			return nil
		}

		prog.set_uniform_value({ "name" : unif_name, "type" : type, "value" : value })
	}
}