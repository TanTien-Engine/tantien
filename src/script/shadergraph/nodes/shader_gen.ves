import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_PORT, VAR_TYPE_STRING
import "blueprint.nodes.input" for Input
import "rendergraph.variant" for VAR_TYPE_SHADER, VAR_TYPE_TEXTURE
import "rendergraph.variates.shader" for Shader as var_Shader
import "rendergraph.components.shader_uniforms" for ShaderUniforms
import "render" for Shader
import "shader" for ShaderGen as tt_ShaderGen

class ShaderGen is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "vs", [ VAR_TYPE_PORT, VAR_TYPE_STRING ]),
			Pin(this, "fs", [ VAR_TYPE_PORT, VAR_TYPE_STRING ]),
			Pin(this, "cs", [ VAR_TYPE_PORT, VAR_TYPE_STRING ]),
			Pin(this, "cs_main", VAR_TYPE_STRING),			
		]
		this.exports = [
			Pin(this, "shader", VAR_TYPE_SHADER)
		]

		this.layout()

		this.shader = var_Shader(this)

		this.uniforms = []
		this.uniforms_nodes = nil
		this.uniforms_insts = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		// update output texture
		if (pin.is_input) {
			for (var pin in this.imports) {
				if (pin.type == VAR_TYPE_TEXTURE) {
					Blueprint.send_pin_dirty(pin, type, msg)
				}
			}
		}
	}

	on_node_dirty()
	{
		this.build_shader()
	}

	calc_value(idx)
	{
		return Variant(VAR_TYPE_SHADER, this.shader)
	}

	render_gen()
	{
		this.build_shader()
	}

	render_run() 
	{
		this.bind_uniforms()
	}

	on_connected(pin)
	{
		if (!pin.is_input) {
			return
		}

		if (pin.slot_idx == 0) {
			this.setup_vs_uniforms()
		} else if (pin.slot_idx == 3) {
			this.setup_cs_uniforms()
		}
	}

	on_disconnected(pin)
	{
		if (!pin.is_input) {
			return
		}

		if (pin.slot_idx == 0) {
			this.setup_vs_uniforms()
		} else if (pin.slot_idx == 3) {
			this.setup_cs_uniforms()
		}
	}

	clear_uniforms()
	{
		this.uniforms.clear()

		var p_vs = this.imports[0]
		var p_fs = this.imports[1]
		var p_cs = this.imports[2]
		var p_cs_main = this.imports[3]		
		this.imports.clear()

		this.imports.add(p_vs)
		this.imports.add(p_fs)
		this.imports.add(p_cs)
		this.imports.add(p_cs_main)
	}

	setup_vs_uniforms()
	{
		this.clear_uniforms()

		var v_vs = Blueprint.calc_input_value(this, 0)
		if (!v_vs or v_vs.type != VAR_TYPE_STRING) {
			return
		}

		ShaderUniforms.get_shader_uniforms("vertex", v_vs.value, nil, "glsl", this.uniforms, "main")
		for (var unif in this.uniforms) {
			ShaderUniforms.add_uniform_to_imports(this, unif)
		}

		this.layout()
	}

	setup_cs_uniforms()
	{
		this.clear_uniforms()

		var v_cs_main = Blueprint.calc_input_value(this, 3)
		if (!v_cs_main or v_cs_main.type != VAR_TYPE_STRING) {
			return
		}

		// fixme
//		ShaderUniforms.get_shader_uniforms("compute", v_cs_main.value, nil, "glsl", this.uniforms, "main")
		ShaderUniforms.get_shader_uniforms("compute", "
layout(binding = 0, r16f) writeonly uniform image2D out_tex;
uniform sampler2D in_tex;
", nil, "glsl", this.uniforms, "main")
		for (var unif in this.uniforms) {
			ShaderUniforms.add_uniform_to_imports(this, unif)
		}

		this.layout()
	}

	bind_uniforms()
	{
		if (this.shader.prog and this.uniforms_nodes)
		{
			for (var node in this.uniforms_nodes) {
				if (node.has_method("bind_uniforms(_,_)")) {
					node.bind_uniforms(this.shader.prog, this.uniforms_insts)
				}
				if (node["node_func"]) {
					node.node_func.bind_uniforms(this.shader.prog, this.uniforms_insts)
				}
			}
		}
	}

	build_shader()
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var n_cs = Blueprint.get_input_node(this, 2)
		if (n_cs)
		{
			var v_cs_main = Blueprint.calc_input_value(this, 3)
			if (!v_cs_main or v_cs_main.type != VAR_TYPE_STRING) {
				return
			}

			var n_cs = Blueprint.get_input_node(this, 2)
			if (n_cs) 
			{
				var builder = ShaderBuilder(n_cs)
				this.uniforms_nodes = builder.uniforms_nodes
				this.uniforms_insts = builder.uniforms_insts
				var code = builder.gen.connect_cs_main(v_cs_main.value)
				if (code) {
					code = code.replace("in vec2 TexCoord;", "")
					this.shader.prog = Shader.init(code, nil)
				}				
			}
		}
		else
		{
			var v_vs = Blueprint.calc_input_value(this, 0)
			if (!v_vs or v_vs.type != VAR_TYPE_STRING) {
				return
			}

			var n_fs = Blueprint.get_input_node(this, 1)
			if (n_fs) 
			{
				var builder = ShaderBuilder(n_fs)
				this.uniforms_nodes = builder.uniforms_nodes
				this.uniforms_insts = builder.uniforms_insts

				this.shader.prog = Shader.init(v_vs.value, "", "", "", builder.gen, nil)
			}
		}
	}
}