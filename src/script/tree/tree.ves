import "tree.edge" for Edge

var PIN_DIRTY_TIMESTAMP = 0

class Tree
{
	static connect(pin0, pin1)
	{
		if (pin0.is_child == pin1.is_child) {
			return nil
		}

		var edge = nil
		if (pin0.is_child) {
			edge = Edge(pin0, pin1)
		} else {
			edge = Edge(pin1, pin0)
		}

		if (pin0.edge) {
			this.disconnect(pin0.edge)
		}
		if (pin1.edge) {
			this.disconnect(pin1.edge)
		}

		pin0.edge = edge
		pin1.edge = edge
		edge.update()

		pin0.node.on_connection_changed()
		pin1.node.on_connection_changed()

		PIN_DIRTY_TIMESTAMP = PIN_DIRTY_TIMESTAMP + 1
		this.send_pin_dirty(pin0)
		this.send_pin_dirty(pin1)

		return edge
	}

	static disconnect(edge)
	{
		if (edge.pin0) 
		{
			edge.pin0.edge = nil
			edge.pin0.node.on_connection_changed()
		}

		if (edge.pin1) 
		{
			edge.pin1.edge = nil
			edge.pin1.node.on_connection_changed()
		}

		PIN_DIRTY_TIMESTAMP = PIN_DIRTY_TIMESTAMP + 1
		this.send_pin_dirty(edge.pin0)
		this.send_pin_dirty(edge.pin1)

		edge.clear()
	}

	static connect(node0, pin0, node1, pin1)
	{
		var p0 = nil
		for (var c in node0.children) {
			if (c.name == pin0) {
				p0 = c
			}
		}

		var p1 = nil
		if (node1.parent.name == pin1) {
			p1 = node1.parent
		}

		if (p0 and p1) {
			return this.connect(p0, p1)		
		} else {
			return nil
		}
	}

	static calc_input_value(pin)
	{
		if (!pin.edge) {
			return nil
		}

		var other = nil
		if (pin.edge.pin0.node == pin.node) {
			other = pin.edge.pin1.node
		} else {
			other = pin.edge.pin0.node
		}

		return other.calc_value(0)
	}

	static send_pin_dirty_root(pin)
	{
		if (pin) {
			PIN_DIRTY_TIMESTAMP = PIN_DIRTY_TIMESTAMP + 1
			this.send_pin_dirty(pin)
		}
	}

	static send_pin_dirty(pin)
	{
		if (!pin or pin.dirty_timestamp == PIN_DIRTY_TIMESTAMP) {
			return
		}

		pin.dirty_timestamp = PIN_DIRTY_TIMESTAMP

		pin.node.on_pin_dirty(pin)

		if (pin.edge.pin0 == pin) {
			this.send_pin_dirty(pin.edge.pin1)
		} else {
			this.send_pin_dirty(pin.edge.pin0)
		}
	}

	static get_successor_nodes(root)
	{
		var nodes = []

		var buf = []
		buf.add(root)
		while (!buf.isEmpty)
		{
			var n = buf[buf.count - 1]
			buf.removeAt(buf.count - 1)

			nodes.add(n)
			for (var pin in n.children) {
				if (pin.edge) {
					buf.add(pin.edge.pin1.node)
				}
			}
		}

		return nodes
	}
}