var node0 = ::geograph::nodes::brush_to_gltf::BrushToGltf()
node0.query_param("adjacencies").value = false

_editor.add_node(node0, -20.676023581753, -291.10174525378)

var node1 = ::blueprint::nodes::fetch::Fetch()
node1.index = "node0"

_editor.add_node(node1, 384.76483479879, -331.68694907861)

var node2 = ::blueprint::nodes::fetch::Fetch()
node2.index = "va"

_editor.add_node(node2, 589.87377684355, -330.18435483226)

var node3 = ::blueprint::nodes::input::Input()

node3.var_name = "geos"
node3.var_type = "array"

_editor.add_node(node3, 595.46840404795, 245.77793726673)

var node4 = ::rendergraph::nodes::draw::Draw()

node4.set_prim_type("triangles")
node4.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "lequal", "clip_plane" : false }
node4.skip = false

_editor.add_node(node4, 784.30380359571, -191.81447758435)

var node5 = ::rendergraph::nodes::shader::Shader()
node5.query_param("inc_dir").value = ""

node5.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out VS_OUT {
    vec3 frag_pos;
} vs_out;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;
};

void main()
{
	vs_out.frag_pos = vec3(model * vec4(aPos, 1.0));
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node5.tcs = ""
node5.tes = ""
node5.gs = ""
node5.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 frag_pos;
} fs_in;

uniform UBO
{
	vec3 light_pos;
    vec3 light_col;
	vec3 cam_pos;
};

void main()
{
 	vec3 dFdxPos = dFdx( fs_in.frag_pos );
    vec3 dFdyPos = dFdy( fs_in.frag_pos );
    vec3 N = normalize( cross(dFdxPos,dFdyPos ));

	// ambient
	vec3 ambient = vec3(0.25) * light_col;

	// diffuse
	const vec3 LIGHT_POS = vec3(-5.0, -5.0, 10);
	vec3 light_dir = normalize(light_pos - fs_in.frag_pos);
    float diff = max(dot(N, light_dir), 0.0);
    vec3 diffuse = diff * vec3(1.0);

    // specular
    vec3 view_dir = normalize(cam_pos - fs_in.frag_pos);
    vec3 halfway_dir = normalize(light_dir + view_dir);  
    float spec = pow(max(dot(N, halfway_dir), 0.0), 32.0);
    vec3 specular = spec * vec3(1.0);

    FragColor = vec4(ambient + diffuse + specular, 1.0); 
}
"
node5.cs = ""
node5.render_gen()

_editor.add_node(node5, 595.83667455228, -102.3677095474)

var node6 = ::blueprint::nodes::perspective::Perspective()

node6.fovy = 45
node6.aspect = 0
node6.znear = 0.1
node6.zfar = 100

_editor.add_node(node6, 413.60400748731, -99.260075321102)

var node7 = ::blueprint::nodes::proxy::Proxy()

node7.real_name = "view_cam"
node7.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node7, 409.76615286487, 48.85559416076)

var node8 = ::blueprint::nodes::number3::Number3()

node8.value.set(5.9766573905945, 5.6433238983154, 5.3099908828735)

_editor.add_node(node8, 413.41918712361, -232.35700607071)

var node9 = ::blueprint::nodes::for_each::ForEach()

_editor.add_node(node9, 1204.9441409146, 267.91360697397)

var node10 = ::blueprint::nodes::is_null::IsNull()

_editor.add_node(node10, 188.36502375197, -214.470801618)

var node11 = ::blueprint::nodes::branch::Branch()

_editor.add_node(node11, 1011.9389355872, 20.226619751981)

var node12 = ::geograph::nodes::draw_geometry::DrawGeometry()
node12.query_param("skip").value = false

_editor.add_node(node12, 783.1307712437, 32.615556424757)

var node13 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node13, 560.9265762203, 104.9157175414)

var node14 = ::blueprint::nodes::list_flatten::ListFlatten()

_editor.add_node(node14, 737.37665349787, 245.690715443)

var node15 = ::blueprint::nodes::cache::Cache()
node15.query_param("disable").value = false

_editor.add_node(node15, 889.19487970526, 242.96342052113)

var node16 = ::blueprint::nodes::input::Input()

node16.var_name = "light_col"
node16.var_type = "num3"

_editor.add_node(node16, 196.35289695046, -57.101640181109)

Blueprint.connect(node15, "var", node9, "in")
Blueprint.connect(node11, "next", node9, "do")
Blueprint.connect(node9, "out", node12, "geos")
Blueprint.connect(node7, "mat", node12, "cam_mat")
Blueprint.connect(node7, "zoom", node6, "fovy")
Blueprint.connect(node6, "mat", node13, "a")
Blueprint.connect(node7, "mat", node13, "b")
Blueprint.connect(node7, "mat", node5, "view")
Blueprint.connect(node6, "mat", node5, "projection")
Blueprint.connect(node8, "v3", node5, "light_pos")
Blueprint.connect(node16, "var", node5, "light_col")
Blueprint.connect(node7, "pos", node5, "cam_pos")
Blueprint.connect(node3, "var", node14, "list")
Blueprint.connect(node14, "list", node15, "var")
Blueprint.connect(node9, "out", node0, "brush")
Blueprint.connect(node0, "gltf", node10, "in")
Blueprint.connect(node10, "out", node11, "cond")
Blueprint.connect(node12, "next", node11, "true")
Blueprint.connect(node4, "next", node11, "false")
Blueprint.connect(node0, "gltf", node1, "items")
Blueprint.connect(node1, "item", node2, "items")
Blueprint.connect(node5, "out", node4, "shader")
Blueprint.connect(node2, "item", node4, "va")
